(ActorU
  (VarD @cycles Nat (LitE (NatLit 0)))
  (LetD
    (VarP @add_cycles)
    (FuncE
      @add_cycles
      Local
      Returns
      ($__4 Any)
      ()
      (BlockE
        (LetD (VarP cycles) (VarE @cycles))
        (LetD WildP (PrimE (CallPrim) (VarE @reset_cycles) (PrimE TupPrim)))
        (IfE
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
          (PrimE SystemCyclesAddPrim (VarE cycles))
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @reset_cycles)
    (FuncE
      @reset_cycles
      Local
      Returns
      ()
      (AssignE (VarLE @cycles) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @immut_array_get)
    (FuncE
      @immut_array_get
      Local
      Returns
      (A Any)
      (params xs)
      Nat -> A
      (FuncE
        @anon-func-39.3
        Local
        Returns
        (params n)
        A
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @mut_array_get)
    (FuncE
      @mut_array_get
      Local
      Returns
      (A__1 Any)
      (params xs)
      Nat -> A__1
      (FuncE
        @anon-func-41.3
        Local
        Returns
        (params n)
        A__1
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @immut_array_size)
    (FuncE
      @immut_array_size
      Local
      Returns
      (A__2 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-43.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_size)
    (FuncE
      @mut_array_size
      Local
      Returns
      (A__3 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-45.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_put)
    (FuncE
      @mut_array_put
      Local
      Returns
      (A__4 Any)
      (params xs)
      (Nat, A__4) -> ()
      (FuncE
        @anon-func-47.3
        Local
        Returns
        (params n x)
        ()
        (AssignE (IdxLE (VarE xs) (VarE n)) (VarE x))
      )
    )
  )
  (LetD
    (VarP @immut_array_keys)
    (FuncE
      @immut_array_keys
      Local
      Returns
      (A__5 Any)
      (params xs)
      () -> @Iter<Nat>
      (FuncE
        @anon-func-49.3
        Local
        Returns
        @Iter<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_keys)
    (FuncE
      @mut_array_keys
      Local
      Returns
      (A__6 Any)
      (params xs)
      () -> @Iter<Nat>
      (FuncE
        @anon-func-55.3
        Local
        Returns
        @Iter<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @immut_array_vals)
    (FuncE
      @immut_array_vals
      Local
      Returns
      (A__7 Any)
      (params xs)
      () -> @Iter<A__7>
      (FuncE
        @anon-func-61.3
        Local
        Returns
        @Iter<A__7>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__7
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__7})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_vals)
    (FuncE
      @mut_array_vals
      Local
      Returns
      (A__8 Any)
      (params xs)
      () -> @Iter<A__8>
      (FuncE
        @anon-func-67.3
        Local
        Returns
        @Iter<A__8>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__8
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__8})
        )
      )
    )
  )
  (LetD
    (VarP @blob_size)
    (FuncE
      @blob_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-73.3 Local Returns Nat (PrimE blob_size (VarE xs)))
    )
  )
  (LetD
    (VarP @blob_vals)
    (FuncE
      @blob_vals
      Local
      Returns
      (params xs)
      () -> @Iter<Nat8>
      (FuncE
        @anon-func-75.3
        Local
        Returns
        @Iter<Nat8>
        (BlockE
          (LetD (VarP i) (PrimE blob_vals_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat8
              (IfE
                (PrimE blob_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE blob_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat8})
        )
      )
    )
  )
  (LetD
    (VarP @text_size)
    (FuncE
      @text_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-86.3 Local Returns Nat (PrimE text_len (VarE xs)))
    )
  )
  (LetD
    (VarP @text_chars)
    (FuncE
      @text_chars
      Local
      Returns
      (params xs)
      () -> @Iter<Char>
      (FuncE
        @anon-func-88.3
        Local
        Returns
        @Iter<Char>
        (BlockE
          (LetD (VarP i) (PrimE text_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Char
              (IfE
                (PrimE text_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE text_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Char})
        )
      )
    )
  )
  (LetD
    (VarP @text_of_num)
    (FuncE
      @text_of_num
      Local
      Returns
      (params x base sep digits)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit )))
        (VarD n Nat (VarE x))
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat EqOp) (VarE n) (LitE (NatLit 0)))
            (PrimE RetPrim (LitE (TextLit 0)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD
          WildP
          (LabelE
            $done/0
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat GtOp) (VarE n) (LitE (NatLit 0)))
                (BlockE
                  (LetD
                    (VarP rem)
                    (PrimE (BinPrim Nat ModOp) (VarE n) (VarE base))
                  )
                  (LetD
                    WildP
                    (IfE
                      (IfE
                        (PrimE (RelPrim Nat GtOp) (VarE sep) (LitE (NatLit 0)))
                        (PrimE (RelPrim Nat EqOp) (VarE i) (VarE sep))
                        (LitE (BoolLit false))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE text)
                            (PrimE
                              (BinPrim Text CatOp)
                              (LitE (TextLit _))
                              (VarE text)
                            )
                          )
                        )
                        (AssignE (VarLE i) (LitE (NatLit 0)))
                      )
                      (PrimE TupPrim)
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE text)
                      (PrimE
                        (BinPrim Text CatOp)
                        (PrimE (CallPrim) (VarE digits) (VarE rem))
                        (VarE text)
                      )
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE n)
                      (PrimE (BinPrim Nat DivOp) (VarE n) (VarE base))
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/0) (PrimE TupPrim))
              )
            )
          )
        )
        (VarE text)
      )
    )
  )
  (LetD
    (VarP @left_pad)
    (FuncE
      @left_pad
      Local
      Returns
      (params pad char t)
      Text
      (IfE
        (PrimE (RelPrim Nat GtOp) (VarE pad) (PrimE text_len (VarE t)))
        (BlockE
          (VarD
            i
            Nat
            (PrimE (BinPrim Nat SubOp) (VarE pad) (PrimE text_len (VarE t)))
          )
          (VarD text Text (VarE t))
          (LetD
            WildP
            (LabelE
              $done/1
              ()
              (LoopE
                (IfE
                  (PrimE (RelPrim Nat GtOp) (VarE i) (LitE (NatLit 0)))
                  (BlockE
                    (LetD
                      WildP
                      (AssignE
                        (VarLE text)
                        (PrimE (BinPrim Text CatOp) (VarE char) (VarE text))
                      )
                    )
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat SubOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE (BreakPrim $done/1) (PrimE TupPrim))
                )
              )
            )
          )
          (VarE text)
        )
        (VarE t)
      )
    )
  )
  (LetD
    (VarP @digits_dec)
    (FuncE
      @digits_dec
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE (BinPrim Int AddOp) (VarE x) (LitE (IntLit 48)))
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Nat)
    (FuncE
      @text_of_Nat
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_num)
        (PrimE
          TupPrim
          (VarE x)
          (LitE (NatLit 10))
          (LitE (NatLit 3))
          (VarE @digits_dec)
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Int)
    (FuncE
      @text_of_Int
      Local
      Returns
      (params x)
      Text
      (IfE
        (PrimE (RelPrim Int EqOp) (VarE x) (LitE (IntLit 0)))
        (LitE (TextLit 0))
        (PrimE
          (BinPrim Text CatOp)
          (IfE
            (PrimE (RelPrim Int LtOp) (VarE x) (LitE (IntLit 0)))
            (LitE (TextLit -))
            (LitE (TextLit +))
          )
          (PrimE (CallPrim) (VarE @text_of_Nat) (PrimE abs (VarE x)))
        )
      )
    )
  )
  (LetD
    (VarP @digits_hex)
    (FuncE
      @digits_hex
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE
              (BinPrim Int AddOp)
              (VarE x)
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE x) (LitE (NatLit 10)))
                (LitE (IntLit 48))
                (LitE (IntLit 55))
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @int64ToInt)
    (FuncE
      @int64ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int64 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int32ToInt)
    (FuncE
      @int32ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int32 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int16ToInt)
    (FuncE
      @int16ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int16 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int8ToInt)
    (FuncE
      @int8ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int8 Int) (VarE n))
    )
  )
  (LetD
    (VarP @nat64ToNat)
    (FuncE
      @nat64ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat64 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat32ToNat)
    (FuncE
      @nat32ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat32 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat16ToNat)
    (FuncE
      @nat16ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat16 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat8ToNat)
    (FuncE
      @nat8ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat8 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @text_of_Nat8)
    (FuncE
      @text_of_Nat8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat8ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat16)
    (FuncE
      @text_of_Nat16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat16ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat32)
    (FuncE
      @text_of_Nat32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat32ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat64)
    (FuncE
      @text_of_Nat64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat64ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int8)
    (FuncE
      @text_of_Int8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int8ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int16)
    (FuncE
      @text_of_Int16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int16ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int32)
    (FuncE
      @text_of_Int32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int32ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int64)
    (FuncE
      @text_of_Int64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int64ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Float)
    (FuncE
      @text_of_Float
      Local
      Returns
      (params x)
      Text
      (PrimE Float->Text (VarE x))
    )
  )
  (LetD
    (VarP @text_of_Bool)
    (FuncE
      @text_of_Bool
      Local
      Returns
      (params b)
      Text
      (IfE (VarE b) (LitE (TextLit true)) (LitE (TextLit false)))
    )
  )
  (LetD
    (VarP @text_of_Text)
    (FuncE
      @text_of_Text
      Local
      Returns
      (params t)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE (BinPrim Text CatOp) (LitE (TextLit ")) (VarE t))
        (LitE (TextLit "))
      )
    )
  )
  (LetD
    (VarP @text_of_Char)
    (FuncE
      @text_of_Char
      Local
      Returns
      (params c)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE
          (BinPrim Text CatOp)
          (LitE (TextLit '))
          (PrimE conv_Char_Text (VarE c))
        )
        (LitE (TextLit '))
      )
    )
  )
  (LetD
    (VarP @text_of_Blob)
    (FuncE
      @text_of_Blob
      Local
      Returns
      (params blob)
      Text
      (BlockE
        (VarD t Text (LitE (TextLit ")))
        (LetD
          WildP
          (BlockE
            (LetD
              (VarP $nxt/0)
              (PrimE
                (DotPrim next)
                (PrimE
                  (CallPrim)
                  (PrimE (CallPrim) (VarE @blob_vals) (VarE blob))
                  (PrimE TupPrim)
                )
              )
            )
            (LabelE
              $done/2
              ()
              (LoopE
                (SwitchE
                  (PrimE (CallPrim) (VarE $nxt/0) (PrimE TupPrim))
                  (case
                    (LitP NullLit)
                    (PrimE (BreakPrim $done/2) (PrimE TupPrim))
                  )
                  (case
                    (OptP (VarP b))
                    (AssignE
                      (VarLE t)
                      (PrimE
                        (BinPrim Text CatOp)
                        (VarE t)
                        (PrimE
                          (BinPrim Text CatOp)
                          (LitE (TextLit \))
                          (PrimE
                            (CallPrim)
                            (VarE @left_pad)
                            (PrimE
                              TupPrim
                              (LitE (NatLit 2))
                              (LitE (TextLit 0))
                              (PrimE
                                (CallPrim)
                                (VarE @text_of_num)
                                (PrimE
                                  TupPrim
                                  (PrimE (CallPrim) (VarE @nat8ToNat) (VarE b))
                                  (LitE (NatLit 16))
                                  (LitE (NatLit 0))
                                  (VarE @digits_hex)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE t)
            (PrimE (BinPrim Text CatOp) (VarE t) (LitE (TextLit ")))
          )
        )
        (PrimE RetPrim (VarE t))
      )
    )
  )
  (LetD
    (VarP @text_has_parens)
    (FuncE
      @text_has_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case (OptP (LitP (CharLit 40))) (LitE (BoolLit true)))
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_needs_parens)
    (FuncE
      @text_needs_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case
          (OptP
            (AltP
              (AltP
                (AltP (LitP (CharLit 43)) (LitP (CharLit 45)))
                (LitP (CharLit 63))
              )
              (LitP (CharLit 35))
            )
          )
          (LitE (BoolLit true))
        )
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_of_option)
    (FuncE
      @text_of_option
      Local
      Returns
      (T__8 Any)
      (params f x)
      Text
      (SwitchE
        (VarE x)
        (case
          (OptP (VarP y))
          (BlockE
            (LetD (VarP fy) (PrimE (CallPrim) (VarE f) (VarE y)))
            (IfE
              (PrimE (CallPrim) (VarE @text_needs_parens) (VarE fy))
              (PrimE
                (BinPrim Text CatOp)
                (PrimE (BinPrim Text CatOp) (LitE (TextLit ?()) (VarE fy))
                (LitE (TextLit )))
              )
              (PrimE (BinPrim Text CatOp) (LitE (TextLit ?)) (VarE fy))
            )
          )
        )
        (case (LitP NullLit) (LitE (TextLit null)))
      )
    )
  )
  (LetD
    (VarP @text_of_variant)
    (FuncE
      @text_of_variant
      Local
      Returns
      (T__9 Any)
      (params l f x)
      Text
      (BlockE
        (LetD (VarP fx) (PrimE (CallPrim) (VarE f) (VarE x)))
        (IfE
          (PrimE (RelPrim Text EqOp) (VarE fx) (LitE (TextLit ())))
          (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
          (IfE
            (PrimE (CallPrim) (VarE @text_has_parens) (VarE fx))
            (PrimE
              (BinPrim Text CatOp)
              (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
              (VarE fx)
            )
            (PrimE
              (BinPrim Text CatOp)
              (PrimE
                (BinPrim Text CatOp)
                (PrimE
                  (BinPrim Text CatOp)
                  (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
                  (LitE (TextLit ())
                )
                (VarE fx)
              )
              (LitE (TextLit )))
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_array)
    (FuncE
      @text_of_array
      Local
      Returns
      (T__10 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/0) (VarE xs))
            (LetD (VarP $last/0) (PrimE GetLastArrayOffset (VarE $arr/0)))
            (VarD $indx/0 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/0) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/3
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/0) (VarE $indx/0))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (AssignE (VarLE first) (LitE (BoolLit false)))
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/0) (VarE $last/0))
                      (PrimE (BreakPrim $done/3) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/0)
                        (PrimE NextArrayOffset (VarE $indx/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @text_of_array_mut)
    (FuncE
      @text_of_array_mut
      Local
      Returns
      (T__11 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [var)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/1) (VarE xs))
            (LetD (VarP $last/1) (PrimE GetLastArrayOffset (VarE $arr/1)))
            (VarD $indx/1 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/1) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/4
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/1) (VarE $indx/1))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (BlockE
                              (LetD
                                WildP
                                (AssignE (VarLE first) (LitE (BoolLit false)))
                              )
                              (AssignE
                                (VarLE text)
                                (PrimE
                                  (BinPrim Text CatOp)
                                  (VarE text)
                                  (LitE (TextLit  ))
                                )
                              )
                            )
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/1) (VarE $last/1))
                      (PrimE (BreakPrim $done/4) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/1)
                        (PrimE NextArrayOffset (VarE $indx/1))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @equal_array)
    (FuncE
      @equal_array
      Local
      Returns
      (T__12 Any)
      (params eq a b)
      Bool
      (BlockE
        (LetD
          WildP
          (IfE
            (PrimE
              (RelPrim Bool EqOp)
              (PrimE
                (RelPrim Nat EqOp)
                (PrimE array_len (VarE a))
                (PrimE array_len (VarE b))
              )
              (LitE (BoolLit false))
            )
            (PrimE RetPrim (LitE (BoolLit false)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD (VarP s) (PrimE array_len (VarE a)))
        (LetD
          WildP
          (LabelE
            $done/5
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE i) (VarE s))
                (BlockE
                  (LetD
                    WildP
                    (IfE
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (CallPrim)
                          (VarE eq)
                          (PrimE
                            TupPrim
                            (PrimE IdxPrim (VarE a) (VarE i))
                            (PrimE IdxPrim (VarE b) (VarE i))
                          )
                        )
                        (LitE (BoolLit false))
                      )
                      (PrimE RetPrim (LitE (BoolLit false)))
                      (PrimE TupPrim)
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/5) (PrimE TupPrim))
              )
            )
          )
        )
        (PrimE RetPrim (LitE (BoolLit true)))
      )
    )
  )
  (VarD @refund Nat (LitE (NatLit 0)))
  (LetD
    (VarP @reset_refund)
    (FuncE
      @reset_refund
      Local
      Returns
      ()
      (AssignE (VarLE @refund) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @getSystemRefund)
    (FuncE
      @getSystemRefund
      Local
      Returns
      @Refund
      (PrimE RetPrim (PrimE SystemCyclesRefundedPrim))
    )
  )
  (LetD (VarP @cleanup) (FuncE @cleanup Local Returns () (PrimE TupPrim)))
  (LetD
    (VarP @new_async)
    (FuncE
      @new_async
      Local
      Returns
      (T__13 Any)
      (@Async<T__13>, @Cont<T__13>, @Cont<Error>, @CleanCont)
      (BlockE
        (LetD
          (VarP w_null)
          (FuncE
            @anon-func-317.16
            Local
            Returns
            (params r t)
            ()
            (PrimE TupPrim)
          )
        )
        (LetD
          (VarP r_null)
          (FuncE
            @anon-func-318.16
            Local
            Returns
            (params $ignored0/0)
            ()
            (PrimE TupPrim)
          )
        )
        (VarD result ?@Result<T__13> (LitE NullLit))
        (VarD ws (@Refund, T__13) -> () (VarE w_null))
        (VarD rs Error -> () (VarE r_null))
        (LetD
          (VarP getRefund)
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE @cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
        )
        (LetD
          (VarP fulfill)
          (FuncE
            fulfill
            Local
            Returns
            (params t)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP refund)
                    (IfE
                      (VarE getRefund)
                      (PrimE (CallPrim) (VarE @getSystemRefund) (PrimE TupPrim))
                      (LitE (NatLit 0))
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE
                        OptPrim
                        (PrimE (TagE ok) (PrimE TupPrim (VarE refund) (VarE t)))
                      )
                    )
                  )
                  (LetD (VarP ws_) (VarE ws))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE
                    (CallPrim)
                    (VarE ws_)
                    (PrimE TupPrim (VarE refund) (VarE t))
                  )
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (LetD
          (VarP fail)
          (FuncE
            fail
            Local
            Returns
            (params e)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE OptPrim (PrimE (TagE error) (VarE e)))
                    )
                  )
                  (LetD (VarP rs_) (VarE rs))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE (CallPrim) (VarE rs_) (VarE e))
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (VarD cleanup () -> () (VarE @cleanup))
        (LetD
          (VarP clean)
          (FuncE
            clean
            Local
            Returns
            ()
            (PrimE (CallPrim) (VarE cleanup) (PrimE TupPrim))
          )
        )
        (LetD
          (VarP enqueue)
          (FuncE
            enqueue
            Local
            Returns
            (params k r b)
            {#schedule : () -> (); #suspend}
            (BlockE
              (LetD WildP (AssignE (VarLE cleanup) (VarE b)))
              (SwitchE
                (VarE result)
                (case
                  (LitP NullLit)
                  (BlockE
                    (LetD (VarP ws_) (VarE ws))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE ws)
                        (FuncE
                          @anon-func-365.15
                          Local
                          Returns
                          (params r t)
                          ()
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE ws_)
                                (PrimE TupPrim (VarE r) (VarE t))
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                            (PrimE (CallPrim) (VarE k) (VarE t))
                          )
                        )
                      )
                    )
                    (LetD (VarP rs_) (VarE rs))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE rs)
                        (FuncE
                          @anon-func-372.15
                          Local
                          Returns
                          (params e)
                          ()
                          (BlockE
                            (LetD WildP (PrimE (CallPrim) (VarE rs_) (VarE e)))
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_refund)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE (CallPrim) (VarE r) (VarE e))
                          )
                        )
                      )
                    )
                    (PrimE (TagE suspend) (PrimE TupPrim))
                  )
                )
                (case
                  (OptP (TagP ok (TupP (VarP r) (VarP t))))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-381.20
                      Local
                      Returns
                      ()
                      (BlockE
                        (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                        (PrimE (CallPrim) (VarE k) (VarE t))
                      )
                    )
                  )
                )
                (case
                  (OptP (TagP error (VarP e)))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-384.20
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE r) (VarE e))
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim (VarE enqueue) (VarE fulfill) (VarE fail) (VarE clean))
      )
    )
  )
  (LetD
    (VarP @ManagementCanister)
    (NewObjE
      Module
      module {type canister_settings = {compute_allocation : ?Nat; controllers : ?[Principal]; freezing_threshold : ?Nat; memory_allocation : ?Nat}; type wasm_module = Blob}
    )
  )
  (LetD
    (VarP @ic00)
    (PrimE
      (ActorOfIdBlob
        actor {create_canister : shared {sender_canister_version : ?Nat64; settings : ?canister_settings} -> async {canister_id : Principal}; install_code : shared {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module} -> async ()}
      )
      (PrimE BlobOfIcUrl (LitE (TextLit aaaaa-aa)))
    )
  )
  (LetD
    (VarP @install_actor_helper)
    (FuncE
      @install_actor_helper
      Local
      Returns
      ($__5 Any)
      (params install_arg wasm_module arg)
      async*<$__5> Principal
      (AsyncE*
        ($@anon-async*-427.24 Any)
        (BlockE
          (LetD
            (TupP (VarP mode) (VarP canister_id))
            (SwitchE
              (VarE install_arg)
              (case
                (TagP new (VarP settings))
                (BlockE
                  (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
                  (LetD
                    (VarP accepted)
                    (PrimE SystemCyclesAcceptPrim (VarE available))
                  )
                  (LetD
                    (VarP sender_canister_version)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE @cycles)
                      (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
                    )
                  )
                  (LetD
                    (ObjP (canister_id (VarP canister_id)))
                    (PrimE
                      AwaitPrim
                      (PrimE
                        (CallPrim $@anon-async*-427.24)
                        (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                        (BlockE
                          (LetD (VarP $base/0) (VarE settings))
                          (LetD
                            (VarP $sender_canister_version/0)
                            (VarE sender_canister_version)
                          )
                          (LetD
                            (VarP $settings/0)
                            (PrimE (DotPrim settings) (VarE $base/0))
                          )
                          (NewObjE
                            Object
                            (settings $settings/0)
                            (sender_canister_version $sender_canister_version/0)
                            {sender_canister_version : ?Nat64; settings : ?canister_settings}
                          )
                        )
                      )
                    )
                  )
                  (PrimE
                    TupPrim
                    (PrimE (TagE install) (PrimE TupPrim))
                    (VarE canister_id)
                  )
                )
              )
              (case
                (TagP install (VarP principal1))
                (PrimE
                  TupPrim
                  (PrimE (TagE install) (PrimE TupPrim))
                  (VarE principal1)
                )
              )
              (case
                (TagP reinstall (VarP actor1))
                (PrimE
                  TupPrim
                  (PrimE (TagE reinstall) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor1))
                )
              )
              (case
                (TagP upgrade (VarP actor2))
                (PrimE
                  TupPrim
                  (PrimE (TagE upgrade) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor2))
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async*-427.24)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/0) (VarE mode))
                  (LetD (VarP $canister_id/0) (VarE canister_id))
                  (LetD (VarP $wasm_module/0) (VarE wasm_module))
                  (LetD (VarP $arg/0) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/1)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/1)
                    (arg $arg/0)
                    (wasm_module $wasm_module/0)
                    (canister_id $canister_id/0)
                    (mode $mode/0)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__5
      )
    )
  )
  (LetD
    (VarP @create_actor_helper)
    (FuncE
      @create_actor_helper
      Local
      Returns
      ($__6 Any)
      (params wasm_module arg)
      async<$__6> Principal
      (AsyncE
        ($@anon-async-463.79 Any)
        (BlockE
          (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
          (LetD (VarP accepted) (PrimE SystemCyclesAcceptPrim (VarE available)))
          (LetD
            (VarP sender_canister_version)
            (PrimE OptPrim (PrimE canister_version))
          )
          (LetD
            WildP
            (AssignE
              (VarLE @cycles)
              (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
            )
          )
          (LetD
            (ObjP (canister_id (VarP canister_id)))
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79)
                (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                (BlockE
                  (LetD (VarP $settings/1) (LitE NullLit))
                  (LetD
                    (VarP $sender_canister_version/2)
                    (VarE sender_canister_version)
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/2)
                    (settings $settings/1)
                    {sender_canister_version : ?Nat64; settings : ?canister_settings}
                  )
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/1) (PrimE (TagE install) (PrimE TupPrim)))
                  (LetD (VarP $canister_id/1) (VarE canister_id))
                  (LetD (VarP $wasm_module/1) (VarE wasm_module))
                  (LetD (VarP $arg/1) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/3)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/3)
                    (arg $arg/1)
                    (wasm_module $wasm_module/1)
                    (canister_id $canister_id/1)
                    (mode $mode/1)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__6
      )
    )
  )
  (LetD
    (VarP @call_raw)
    (FuncE
      @call_raw
      Local
      Returns
      ($__7 Any)
      (params p m a)
      async<$__7> Blob
      (AsyncE
        ($@call_raw Any)
        (PrimE AwaitPrim (PrimE call_raw (VarE p) (VarE m) (VarE a)))
        $__7
      )
    )
  )
  (LetD
    (VarP @call_succeeded)
    (FuncE
      @call_succeeded
      Local
      Returns
      Bool
      (PrimE
        (RelPrim Nat32 EqOp)
        (PrimE call_perform_status)
        (LitE (Nat32Lit 0))
      )
    )
  )
  (LetD
    (VarP @call_error)
    (FuncE
      @call_error
      Local
      Returns
      Error
      (BlockE
        (LetD (VarP status) (PrimE call_perform_status))
        (LetD (VarP message) (PrimE call_perform_message))
        (LetD
          (VarP code)
          (PrimE
            (TagE call_error)
            (BlockE
              (LetD (VarP $err_code/0) (VarE status))
              (NewObjE Object (err_code $err_code/0) {err_code : Nat32})
            )
          )
        )
        (PrimE
          (CastPrim ({#call_error : {err_code : Nat32}}, Text) Error)
          (PrimE TupPrim (VarE code) (VarE message))
        )
      )
    )
  )
  (VarD @timers ?@Node (LitE NullLit))
  (LetD
    (VarP @prune)
    (FuncE
      @prune
      Local
      Returns
      (params n)
      ?@Node
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE NullLit))
        (case
          (OptP (VarP n))
          (IfE
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE
                IdxPrim
                (PrimE (DotPrim expire) (VarE n))
                (LitE (NatLit 0))
              )
              (LitE (Nat64Lit 0))
            )
            (PrimE (CallPrim) (VarE @prune) (PrimE (DotPrim post) (VarE n)))
            (PrimE
              OptPrim
              (BlockE
                (LetD (VarP $base/1) (VarE n))
                (LetD
                  (VarP $pre/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim pre) (VarE n))
                  )
                )
                (LetD
                  (VarP $post/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim post) (VarE n))
                  )
                )
                (LetD (VarP $delay/0) (PrimE (DotPrim delay) (VarE $base/1)))
                (LetD (VarP $expire/0) (PrimE (DotPrim expire) (VarE $base/1)))
                (LetD (VarP $id/0) (PrimE (DotPrim id) (VarE $base/1)))
                (LetD (VarP $job/0) (PrimE (DotPrim job) (VarE $base/1)))
                (NewObjE
                  Object
                  (job $job/0)
                  (id $id/0)
                  (expire $expire/0)
                  (delay $delay/0)
                  (post $post/0)
                  (pre $pre/0)
                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @nextExpiration)
    (FuncE
      @nextExpiration
      Local
      Returns
      (params n)
      Nat64
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE (Nat64Lit 0)))
        (case
          (OptP (VarP n))
          (BlockE
            (VarD
              exp
              Nat64
              (PrimE
                (CallPrim)
                (VarE @nextExpiration)
                (PrimE (DotPrim pre) (VarE n))
              )
            )
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                  )
                  (IfE
                    (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        (CallPrim)
                        (VarE @nextExpiration)
                        (PrimE (DotPrim post) (VarE n))
                      )
                    )
                    (PrimE TupPrim)
                  )
                )
                (PrimE TupPrim)
              )
            )
            (VarE exp)
          )
        )
      )
    )
  )
  (LetD
    (VarP @timer_helper)
    (FuncE
      @timer_helper
      Local
      Returns
      ($__8 Any)
      async<$__8> ()
      (AsyncE
        ($@timer_helper Any)
        (BlockE
          (LetD
            (VarP Array_init)
            (FuncE
              Array_init
              Local
              Returns
              (T__14 Any)
              (params len x)
              [var T__14]
              (PrimE Array.init (VarE len) (VarE x))
            )
          )
          (LetD (VarP now) (PrimE SystemTimePrim))
          (VarD gathered Nat (LitE (NatLit 0)))
          (LetD
            (VarP thunks)
            (PrimE
              (CallPrim ?(() -> async ()))
              (VarE Array_init)
              (PrimE TupPrim (LitE (NatLit 10)) (LitE NullLit))
            )
          )
          (LetD
            (VarP gatherExpired)
            (FuncE
              gatherExpired
              Local
              Returns
              (params n)
              ()
              (SwitchE
                (VarE n)
                (case (LitP NullLit) (PrimE TupPrim))
                (case
                  (OptP (VarP n))
                  (BlockE
                    (LetD
                      WildP
                      (PrimE
                        (CallPrim)
                        (VarE gatherExpired)
                        (PrimE (DotPrim pre) (VarE n))
                      )
                    )
                    (LetD
                      WildP
                      (IfE
                        (IfE
                          (IfE
                            (PrimE
                              (RelPrim Nat64 GtOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                            (PrimE
                              (RelPrim Nat64 LeOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (VarE now)
                            )
                            (LitE (BoolLit false))
                          )
                          (PrimE
                            (RelPrim Nat LtOp)
                            (VarE gathered)
                            (PrimE array_len (VarE thunks))
                          )
                          (LitE (BoolLit false))
                        )
                        (BlockE
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE (VarE thunks) (VarE gathered))
                              (PrimE OptPrim (PrimE (DotPrim job) (VarE n)))
                            )
                          )
                          (LetD
                            WildP
                            (SwitchE
                              (PrimE (DotPrim delay) (VarE n))
                              (case
                                (AltP (LitP NullLit) (OptP (LitP (Nat64Lit 0))))
                                (PrimE TupPrim)
                              )
                              (case
                                (OptP (VarP delay))
                                (BlockE
                                  (LetD
                                    (VarP expire)
                                    (PrimE
                                      (BinPrim Nat64 AddOp)
                                      (PrimE
                                        IdxPrim
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (PrimE
                                        (BinPrim Nat64 MulOp)
                                        (VarE delay)
                                        (PrimE
                                          (BinPrim Nat64 AddOp)
                                          (LitE (Nat64Lit 1))
                                          (PrimE
                                            (BinPrim Nat64 DivOp)
                                            (PrimE
                                              (BinPrim Nat64 SubOp)
                                              (VarE now)
                                              (PrimE
                                                IdxPrim
                                                (PrimE
                                                  (DotPrim expire)
                                                  (VarE n)
                                                )
                                                (LitE (NatLit 0))
                                              )
                                            )
                                            (VarE delay)
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (LetD
                                    WildP
                                    (AssignE
                                      (IdxLE
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (LitE (Nat64Lit 0))
                                    )
                                  )
                                  (LetD
                                    (VarP reinsert)
                                    (FuncE
                                      reinsert
                                      Local
                                      Returns
                                      (params m)
                                      @Node
                                      (SwitchE
                                        (VarE m)
                                        (case
                                          (LitP NullLit)
                                          (BlockE
                                            (LetD (VarP $base/2) (VarE n))
                                            (LetD
                                              (VarP $expire/1)
                                              (PrimE
                                                (ArrayPrim Var Nat64)
                                                (VarE expire)
                                              )
                                            )
                                            (LetD (VarP $pre/1) (LitE NullLit))
                                            (LetD (VarP $post/1) (LitE NullLit))
                                            (LetD
                                              (VarP $delay/1)
                                              (PrimE
                                                (DotPrim delay)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $id/1)
                                              (PrimE
                                                (DotPrim id)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $job/1)
                                              (PrimE
                                                (DotPrim job)
                                                (VarE $base/2)
                                              )
                                            )
                                            (NewObjE
                                              Object
                                              (job $job/1)
                                              (id $id/1)
                                              (delay $delay/1)
                                              (post $post/1)
                                              (pre $pre/1)
                                              (expire $expire/1)
                                              {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : Null; pre : Null}
                                            )
                                          )
                                        )
                                        (case
                                          (OptP (VarP m))
                                          (BlockE
                                            (LetD
                                              WildP
                                              (PrimE
                                                AssertPrim
                                                (PrimE
                                                  (RelPrim Bool EqOp)
                                                  (PrimE
                                                    (RelPrim Nat64 EqOp)
                                                    (PrimE
                                                      IdxPrim
                                                      (PrimE
                                                        (DotPrim expire)
                                                        (VarE m)
                                                      )
                                                      (LitE (NatLit 0))
                                                    )
                                                    (LitE (Nat64Lit 0))
                                                  )
                                                  (LitE (BoolLit false))
                                                )
                                              )
                                            )
                                            (IfE
                                              (PrimE
                                                (RelPrim Nat64 LtOp)
                                                (VarE expire)
                                                (PrimE
                                                  IdxPrim
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE m)
                                                  )
                                                  (LitE (NatLit 0))
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/4) (VarE m))
                                                (LetD
                                                  (VarP $pre/3)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim pre)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/3)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/3)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/3)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/3)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $post/3)
                                                  (PrimE
                                                    (DotPrim post)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (post $post/3)
                                                  (job $job/3)
                                                  (id $id/3)
                                                  (expire $expire/3)
                                                  (delay $delay/3)
                                                  (pre $pre/3)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/3) (VarE m))
                                                (LetD
                                                  (VarP $post/2)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim post)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/2)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/2)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/2)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/2)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $pre/2)
                                                  (PrimE
                                                    (DotPrim pre)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (pre $pre/2)
                                                  (job $job/2)
                                                  (id $id/2)
                                                  (expire $expire/2)
                                                  (delay $delay/2)
                                                  (post $post/2)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (AssignE
                                    (VarLE @timers)
                                    (PrimE
                                      OptPrim
                                      (PrimE
                                        (CallPrim)
                                        (VarE reinsert)
                                        (PrimE
                                          (CallPrim)
                                          (VarE @prune)
                                          (VarE @timers)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                          )
                          (AssignE
                            (VarLE gathered)
                            (PrimE
                              (BinPrim Nat AddOp)
                              (VarE gathered)
                              (LitE (NatLit 1))
                            )
                          )
                        )
                        (PrimE TupPrim)
                      )
                    )
                    (PrimE
                      (CallPrim)
                      (VarE gatherExpired)
                      (PrimE (DotPrim post) (VarE n))
                    )
                  )
                )
              )
            )
          )
          (LetD WildP (PrimE (CallPrim) (VarE gatherExpired) (VarE @timers)))
          (LetD
            (VarP exp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
          )
          (LetD
            WildP
            (BlockE
              (LetD WildP (PrimE global_timer_set (VarE exp)))
              (PrimE TupPrim)
            )
          )
          (LetD
            WildP
            (IfE
              (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
              (AssignE (VarLE @timers) (LitE NullLit))
              (PrimE TupPrim)
            )
          )
          (BlockE
            (LetD (VarP $arr/2) (VarE thunks))
            (LetD (VarP $last/2) (PrimE GetLastArrayOffset (VarE $arr/2)))
            (VarD $indx/2 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/2) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/6
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP o)
                      (PrimE DerefArrayOffset (VarE $arr/2) (VarE $indx/2))
                    )
                    (LetD
                      WildP
                      (SwitchE
                        (VarE o)
                        (case
                          (OptP (VarP thunk))
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim $@timer_helper)
                                (VarE thunk)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE TupPrim)
                          )
                        )
                        (case WildP (PrimE TupPrim))
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/2) (VarE $last/2))
                      (PrimE (BreakPrim $done/6) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/2)
                        (PrimE NextArrayOffset (VarE $indx/2))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        $__8
      )
    )
  )
  (VarD @lastTimerId Nat (LitE (NatLit 0)))
  (LetD
    (VarP @setTimer)
    (FuncE
      @setTimer
      Local
      Returns
      ($__9 Any)
      (params delayNanos recurring job)
      Nat
      (BlockE
        (LetD
          WildP
          (AssignE
            (VarLE @lastTimerId)
            (PrimE (BinPrim Nat AddOp) (VarE @lastTimerId) (LitE (NatLit 1)))
          )
        )
        (LetD (VarP id) (VarE @lastTimerId))
        (LetD (VarP now) (PrimE SystemTimePrim))
        (LetD
          (VarP expire)
          (PrimE (BinPrim Nat64 AddOp) (VarE now) (VarE delayNanos))
        )
        (LetD
          (VarP delay)
          (IfE
            (VarE recurring)
            (PrimE OptPrim (VarE delayNanos))
            (LitE NullLit)
          )
        )
        (LetD
          (VarP insert)
          (FuncE
            insert
            Local
            Returns
            (params n)
            @Node
            (SwitchE
              (VarE n)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP $expire/4)
                    (PrimE (ArrayPrim Var Nat64) (VarE expire))
                  )
                  (LetD (VarP $id/4) (VarE id))
                  (LetD (VarP $delay/4) (VarE delay))
                  (LetD (VarP $job/4) (VarE job))
                  (LetD (VarP $pre/4) (LitE NullLit))
                  (LetD (VarP $post/4) (LitE NullLit))
                  (NewObjE
                    Object
                    (post $post/4)
                    (pre $pre/4)
                    (job $job/4)
                    (delay $delay/4)
                    (id $id/4)
                    (expire $expire/4)
                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                  )
                )
              )
              (case
                (OptP (VarP n))
                (BlockE
                  (LetD
                    WildP
                    (PrimE
                      AssertPrim
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (RelPrim Nat64 EqOp)
                          (PrimE
                            IdxPrim
                            (PrimE (DotPrim expire) (VarE n))
                            (LitE (NatLit 0))
                          )
                          (LitE (Nat64Lit 0))
                        )
                        (LitE (BoolLit false))
                      )
                    )
                  )
                  (IfE
                    (PrimE
                      (RelPrim Nat64 LtOp)
                      (VarE expire)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/6) (VarE n))
                      (LetD
                        (VarP $pre/6)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim pre) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/6)
                        (PrimE (DotPrim delay) (VarE $base/6))
                      )
                      (LetD
                        (VarP $expire/6)
                        (PrimE (DotPrim expire) (VarE $base/6))
                      )
                      (LetD (VarP $id/6) (PrimE (DotPrim id) (VarE $base/6)))
                      (LetD (VarP $job/6) (PrimE (DotPrim job) (VarE $base/6)))
                      (LetD
                        (VarP $post/6)
                        (PrimE (DotPrim post) (VarE $base/6))
                      )
                      (NewObjE
                        Object
                        (post $post/6)
                        (job $job/6)
                        (id $id/6)
                        (expire $expire/6)
                        (delay $delay/6)
                        (pre $pre/6)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/5) (VarE n))
                      (LetD
                        (VarP $post/5)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/5)
                        (PrimE (DotPrim delay) (VarE $base/5))
                      )
                      (LetD
                        (VarP $expire/5)
                        (PrimE (DotPrim expire) (VarE $base/5))
                      )
                      (LetD (VarP $id/5) (PrimE (DotPrim id) (VarE $base/5)))
                      (LetD (VarP $job/5) (PrimE (DotPrim job) (VarE $base/5)))
                      (LetD (VarP $pre/5) (PrimE (DotPrim pre) (VarE $base/5)))
                      (NewObjE
                        Object
                        (pre $pre/5)
                        (job $job/5)
                        (id $id/5)
                        (expire $expire/5)
                        (delay $delay/5)
                        (post $post/5)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE
              OptPrim
              (PrimE
                (CallPrim)
                (VarE insert)
                (PrimE (CallPrim) (VarE @prune) (VarE @timers))
              )
            )
          )
        )
        (LetD
          (VarP exp)
          (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
        )
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
            (AssignE (VarLE @timers) (LitE NullLit))
            (PrimE TupPrim)
          )
        )
        (LetD
          WildP
          (BlockE
            (LetD WildP (PrimE global_timer_set (VarE exp)))
            (PrimE TupPrim)
          )
        )
        (VarE id)
      )
    )
  )
  (LetD
    (VarP @cancelTimer)
    (FuncE
      @cancelTimer
      Local
      Returns
      (params id)
      ()
      (BlockE
        (LetD
          (VarP graft)
          (FuncE
            graft
            Local
            Returns
            (params onto branch)
            ?@Node
            (SwitchE
              (PrimE TupPrim (VarE onto) (VarE branch))
              (case (TupP (LitP NullLit) (LitP NullLit)) (LitE NullLit))
              (case (TupP (LitP NullLit) WildP) (VarE branch))
              (case (TupP WildP (LitP NullLit)) (VarE onto))
              (case
                (TupP (OptP (VarP onto)) WildP)
                (PrimE
                  OptPrim
                  (BlockE
                    (LetD (VarP $base/7) (VarE onto))
                    (LetD
                      (VarP $post/7)
                      (PrimE
                        (CallPrim)
                        (VarE graft)
                        (PrimE
                          TupPrim
                          (PrimE (DotPrim post) (VarE onto))
                          (VarE branch)
                        )
                      )
                    )
                    (LetD
                      (VarP $delay/7)
                      (PrimE (DotPrim delay) (VarE $base/7))
                    )
                    (LetD
                      (VarP $expire/7)
                      (PrimE (DotPrim expire) (VarE $base/7))
                    )
                    (LetD (VarP $id/7) (PrimE (DotPrim id) (VarE $base/7)))
                    (LetD (VarP $job/7) (PrimE (DotPrim job) (VarE $base/7)))
                    (LetD (VarP $pre/7) (PrimE (DotPrim pre) (VarE $base/7)))
                    (NewObjE
                      Object
                      (pre $pre/7)
                      (job $job/7)
                      (id $id/7)
                      (expire $expire/7)
                      (delay $delay/7)
                      (post $post/7)
                      {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          (VarP hunt)
          (FuncE
            hunt
            Local
            Returns
            (params n)
            ?@Node
            (SwitchE
              (VarE n)
              (case (LitP NullLit) (VarE n))
              (case
                (OptP
                  (ObjP (id (VarP node)) (pre (VarP pre)) (post (VarP post)))
                )
                (IfE
                  (PrimE (RelPrim Nat EqOp) (VarE node) (VarE id))
                  (PrimE
                    (CallPrim)
                    (VarE graft)
                    (PrimE TupPrim (VarE pre) (VarE post))
                  )
                  (LabelE
                    !
                    ?@Node
                    (PrimE
                      OptPrim
                      (BlockE
                        (LetD
                          (VarP $base/8)
                          (SwitchE
                            (VarE n)
                            (case
                              (LitP NullLit)
                              (PrimE (BreakPrim !) (LitE NullLit))
                            )
                            (case (OptP (VarP $v/1)) (VarE $v/1))
                          )
                        )
                        (LetD
                          (VarP $pre/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE pre))
                        )
                        (LetD
                          (VarP $post/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE post))
                        )
                        (LetD
                          (VarP $delay/8)
                          (PrimE (DotPrim delay) (VarE $base/8))
                        )
                        (LetD
                          (VarP $expire/8)
                          (PrimE (DotPrim expire) (VarE $base/8))
                        )
                        (LetD (VarP $id/8) (PrimE (DotPrim id) (VarE $base/8)))
                        (LetD
                          (VarP $job/8)
                          (PrimE (DotPrim job) (VarE $base/8))
                        )
                        (NewObjE
                          Object
                          (job $job/8)
                          (id $id/8)
                          (expire $expire/8)
                          (delay $delay/8)
                          (post $post/8)
                          (pre $pre/8)
                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node; pre : ?@Node}
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE (CallPrim) (VarE hunt) (VarE @timers))
          )
        )
        (IfE
          (PrimE
            (RelPrim Nat64 EqOp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
            (LitE (Nat64Lit 0))
          )
          (BlockE
            (LetD
              WildP
              (BlockE
                (LetD WildP (PrimE global_timer_set (LitE (Nat64Lit 0))))
                (PrimE TupPrim)
              )
            )
            (AssignE (VarLE @timers) (LitE NullLit))
          )
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @set_global_timer)
    (FuncE
      @set_global_timer
      Local
      Returns
      (params time)
      ()
      (BlockE (LetD WildP (PrimE global_timer_set (VarE time))) (PrimE TupPrim))
    )
  )
  (LetD
    (VarP file$@prim)
    (BlockE
      (LetD
        (VarP Types)
        (NewObjE
          Module
          module {type Any = Any; type Blob = Blob; type Bool = Bool; type Char = Char; type Error = Error; type Float = Float; type Int = Int; type Int16 = Int16; type Int32 = Int32; type Int64 = Int64; type Int8 = Int8; type Nat = Nat; type Nat16 = Nat16; type Nat32 = Nat32; type Nat64 = Nat64; type Nat8 = Nat8; type None = None; type Null = Null; type Principal = Principal; type Region = Region; type Text = Text}
        )
      )
      (LetD
        (VarP abs)
        (FuncE abs Local Returns (params x) Nat (PrimE abs (VarE x)))
      )
      (LetD
        (VarP shiftLeft)
        (FuncE
          shiftLeft
          Local
          Returns
          (params x shift)
          Nat
          (PrimE lsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP shiftRight)
        (FuncE
          shiftRight
          Local
          Returns
          (params x shift)
          Nat
          (PrimE rsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP idlHash)
        (FuncE idlHash Local Returns (params x) Nat32 (PrimE idlHash (VarE x)))
      )
      (LetD
        (VarP debugPrint)
        (FuncE debugPrint Local Returns (params x) () (PrimE print (VarE x)))
      )
      (LetD
        (VarP debugPrintNat)
        (FuncE
          debugPrintNat
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Nat) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintInt)
        (FuncE
          debugPrintInt
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Int) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintChar)
        (FuncE
          debugPrintChar
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE charToText) (VarE x))
          )
        )
      )
      (LetD
        (VarP trap)
        (FuncE trap Local Returns (params x) None (PrimE trap (VarE x)))
      )
      (LetD
        (VarP rts_version)
        (FuncE rts_version Local Returns Text (PrimE rts_version))
      )
      (LetD
        (VarP rts_memory_size)
        (FuncE rts_memory_size Local Returns Nat (PrimE rts_memory_size))
      )
      (LetD
        (VarP rts_heap_size)
        (FuncE rts_heap_size Local Returns Nat (PrimE rts_heap_size))
      )
      (LetD
        (VarP rts_total_allocation)
        (FuncE
          rts_total_allocation
          Local
          Returns
          Nat
          (PrimE rts_total_allocation)
        )
      )
      (LetD
        (VarP rts_reclaimed)
        (FuncE rts_reclaimed Local Returns Nat (PrimE rts_reclaimed))
      )
      (LetD
        (VarP rts_max_live_size)
        (FuncE rts_max_live_size Local Returns Nat (PrimE rts_max_live_size))
      )
      (LetD
        (VarP rts_max_stack_size)
        (FuncE rts_max_stack_size Local Returns Nat (PrimE rts_max_stack_size))
      )
      (LetD
        (VarP rts_callback_table_count)
        (FuncE
          rts_callback_table_count
          Local
          Returns
          Nat
          (PrimE rts_callback_table_count)
        )
      )
      (LetD
        (VarP rts_callback_table_size)
        (FuncE
          rts_callback_table_size
          Local
          Returns
          Nat
          (PrimE rts_callback_table_size)
        )
      )
      (LetD
        (VarP rts_mutator_instructions)
        (FuncE
          rts_mutator_instructions
          Local
          Returns
          Nat
          (PrimE rts_mutator_instructions)
        )
      )
      (LetD
        (VarP rts_collector_instructions)
        (FuncE
          rts_collector_instructions
          Local
          Returns
          Nat
          (PrimE rts_collector_instructions)
        )
      )
      (LetD
        (VarP rts_stable_memory_size)
        (FuncE
          rts_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_stable_memory_size)
        )
      )
      (LetD
        (VarP rts_logical_stable_memory_size)
        (FuncE
          rts_logical_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_logical_stable_memory_size)
        )
      )
      (LetD (VarP int64ToInt) (VarE @int64ToInt))
      (LetD (VarP int32ToInt) (VarE @int32ToInt))
      (LetD (VarP int16ToInt) (VarE @int16ToInt))
      (LetD (VarP int8ToInt) (VarE @int8ToInt))
      (LetD (VarP nat64ToNat) (VarE @nat64ToNat))
      (LetD (VarP nat32ToNat) (VarE @nat32ToNat))
      (LetD (VarP nat16ToNat) (VarE @nat16ToNat))
      (LetD (VarP nat8ToNat) (VarE @nat8ToNat))
      (LetD
        (VarP intToInt64)
        (FuncE
          intToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32)
        (FuncE
          intToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16)
        (FuncE
          intToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8)
        (FuncE
          intToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP natToNat64)
        (FuncE
          natToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat Nat64) (VarE n))
        )
      )
      (LetD
        (VarP natToNat32)
        (FuncE
          natToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat Nat32) (VarE n))
        )
      )
      (LetD
        (VarP natToNat16)
        (FuncE
          natToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat Nat16) (VarE n))
        )
      )
      (LetD
        (VarP natToNat8)
        (FuncE
          natToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat Nat8) (VarE n))
        )
      )
      (LetD
        (VarP intToInt64Wrap)
        (FuncE
          intToInt64Wrap
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32Wrap)
        (FuncE
          intToInt32Wrap
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16Wrap)
        (FuncE
          intToInt16Wrap
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8Wrap)
        (FuncE
          intToInt8Wrap
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP intToNat64Wrap)
        (FuncE
          intToNat64Wrap
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int Nat64) (VarE n))
        )
      )
      (LetD
        (VarP intToNat32Wrap)
        (FuncE
          intToNat32Wrap
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int Nat32) (VarE n))
        )
      )
      (LetD
        (VarP intToNat16Wrap)
        (FuncE
          intToNat16Wrap
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int Nat16) (VarE n))
        )
      )
      (LetD
        (VarP intToNat8Wrap)
        (FuncE
          intToNat8Wrap
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int64ToNat64)
        (FuncE
          int64ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int64 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToInt64)
        (FuncE
          nat64ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Nat64 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int32ToNat32)
        (FuncE
          int32ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int32 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToInt32)
        (FuncE
          nat32ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Nat32 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int16ToNat16)
        (FuncE
          int16ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int16 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToInt16)
        (FuncE
          nat16ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Nat16 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int8ToNat8)
        (FuncE
          int8ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int8 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToInt8)
        (FuncE
          nat8ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Nat8 Int8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToNat16)
        (FuncE
          nat8ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat8 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat32)
        (FuncE
          nat16ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat16 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat64)
        (FuncE
          nat32ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat32 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToNat32)
        (FuncE
          nat64ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat64 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat16)
        (FuncE
          nat32ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat32 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat8)
        (FuncE
          nat16ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat16 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int8ToInt16)
        (FuncE
          int8ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int8 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt32)
        (FuncE
          int16ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int16 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt64)
        (FuncE
          int32ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int32 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int64ToInt32)
        (FuncE
          int64ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int64 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt16)
        (FuncE
          int32ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int32 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt8)
        (FuncE
          int16ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int16 Int8) (VarE n))
        )
      )
      (LetD
        (VarP charToNat32)
        (FuncE
          charToNat32
          Local
          Returns
          (params c)
          Nat32
          (PrimE (NumConvWrapPrim Char Nat32) (VarE c))
        )
      )
      (LetD
        (VarP nat32ToChar)
        (FuncE
          nat32ToChar
          Local
          Returns
          (params w)
          Char
          (PrimE (NumConvTrapPrim Nat32 Char) (VarE w))
        )
      )
      (LetD
        (VarP charToText)
        (FuncE
          charToText
          Local
          Returns
          (params c)
          Text
          (PrimE conv_Char_Text (VarE c))
        )
      )
      (LetD
        (VarP charToUpper)
        (FuncE
          charToUpper
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_upper (VarE c))
        )
      )
      (LetD
        (VarP charToLower)
        (FuncE
          charToLower
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_lower (VarE c))
        )
      )
      (LetD
        (VarP charIsWhitespace)
        (FuncE
          charIsWhitespace
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_whitespace (VarE c))
        )
      )
      (LetD
        (VarP charIsLowercase)
        (FuncE
          charIsLowercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_lowercase (VarE c))
        )
      )
      (LetD
        (VarP charIsUppercase)
        (FuncE
          charIsUppercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_uppercase (VarE c))
        )
      )
      (LetD
        (VarP charIsAlphabetic)
        (FuncE
          charIsAlphabetic
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_alphabetic (VarE c))
        )
      )
      (LetD
        (VarP blobCompare)
        (FuncE
          blobCompare
          Local
          Returns
          (params b1 b2)
          Int8
          (PrimE blob_compare (VarE b1) (VarE b2))
        )
      )
      (LetD
        (VarP hashBlob)
        (FuncE
          hashBlob
          Local
          Returns
          (params b)
          Nat32
          (PrimE crc32Hash (VarE b))
        )
      )
      (LetD
        (VarP decodeUtf8)
        (FuncE
          decodeUtf8
          Local
          Returns
          (params b)
          ?Text
          (PrimE DecodeUtf8 (VarE b))
        )
      )
      (LetD
        (VarP encodeUtf8)
        (FuncE
          encodeUtf8
          Local
          Returns
          (params t)
          Blob
          (PrimE EncodeUtf8 (VarE t))
        )
      )
      (LetD
        (VarP textCompare)
        (FuncE
          textCompare
          Local
          Returns
          (params t1 t2)
          Int8
          (PrimE text_compare (VarE t1) (VarE t2))
        )
      )
      (LetD
        (VarP textLowercase)
        (FuncE
          textLowercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_lowercase (VarE t))
        )
      )
      (LetD
        (VarP textUppercase)
        (FuncE
          textUppercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_uppercase (VarE t))
        )
      )
      (LetD
        (VarP popcntNat8)
        (FuncE
          popcntNat8
          Local
          Returns
          (params w)
          Nat8
          (PrimE popcnt8 (VarE w))
        )
      )
      (LetD
        (VarP clzNat8)
        (FuncE clzNat8 Local Returns (params w) Nat8 (PrimE clz8 (VarE w)))
      )
      (LetD
        (VarP ctzNat8)
        (FuncE ctzNat8 Local Returns (params w) Nat8 (PrimE ctz8 (VarE w)))
      )
      (LetD
        (VarP btstNat8)
        (FuncE
          btstNat8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat8 EqOp)
              (PrimE btst8 (VarE w) (VarE amount))
              (LitE (Nat8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat16)
        (FuncE
          popcntNat16
          Local
          Returns
          (params w)
          Nat16
          (PrimE popcnt16 (VarE w))
        )
      )
      (LetD
        (VarP clzNat16)
        (FuncE clzNat16 Local Returns (params w) Nat16 (PrimE clz16 (VarE w)))
      )
      (LetD
        (VarP ctzNat16)
        (FuncE ctzNat16 Local Returns (params w) Nat16 (PrimE ctz16 (VarE w)))
      )
      (LetD
        (VarP btstNat16)
        (FuncE
          btstNat16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat16 EqOp)
              (PrimE btst16 (VarE w) (VarE amount))
              (LitE (Nat16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat32)
        (FuncE
          popcntNat32
          Local
          Returns
          (params w)
          Nat32
          (PrimE popcnt32 (VarE w))
        )
      )
      (LetD
        (VarP clzNat32)
        (FuncE clzNat32 Local Returns (params w) Nat32 (PrimE clz32 (VarE w)))
      )
      (LetD
        (VarP ctzNat32)
        (FuncE ctzNat32 Local Returns (params w) Nat32 (PrimE ctz32 (VarE w)))
      )
      (LetD
        (VarP btstNat32)
        (FuncE
          btstNat32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat32 EqOp)
              (PrimE btst32 (VarE w) (VarE amount))
              (LitE (Nat32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat64)
        (FuncE
          popcntNat64
          Local
          Returns
          (params w)
          Nat64
          (PrimE popcnt64 (VarE w))
        )
      )
      (LetD
        (VarP clzNat64)
        (FuncE clzNat64 Local Returns (params w) Nat64 (PrimE clz64 (VarE w)))
      )
      (LetD
        (VarP ctzNat64)
        (FuncE ctzNat64 Local Returns (params w) Nat64 (PrimE ctz64 (VarE w)))
      )
      (LetD
        (VarP btstNat64)
        (FuncE
          btstNat64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE btst64 (VarE w) (VarE amount))
              (LitE (Nat64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt8)
        (FuncE
          popcntInt8
          Local
          Returns
          (params w)
          Int8
          (PrimE popcntInt8 (VarE w))
        )
      )
      (LetD
        (VarP clzInt8)
        (FuncE clzInt8 Local Returns (params w) Int8 (PrimE clzInt8 (VarE w)))
      )
      (LetD
        (VarP ctzInt8)
        (FuncE ctzInt8 Local Returns (params w) Int8 (PrimE ctzInt8 (VarE w)))
      )
      (LetD
        (VarP btstInt8)
        (FuncE
          btstInt8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int8 EqOp)
              (PrimE btstInt8 (VarE w) (VarE amount))
              (LitE (Int8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt16)
        (FuncE
          popcntInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE popcntInt16 (VarE w))
        )
      )
      (LetD
        (VarP clzInt16)
        (FuncE
          clzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE clzInt16 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt16)
        (FuncE
          ctzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE ctzInt16 (VarE w))
        )
      )
      (LetD
        (VarP btstInt16)
        (FuncE
          btstInt16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int16 EqOp)
              (PrimE btstInt16 (VarE w) (VarE amount))
              (LitE (Int16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt32)
        (FuncE
          popcntInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE popcntInt32 (VarE w))
        )
      )
      (LetD
        (VarP clzInt32)
        (FuncE
          clzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE clzInt32 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt32)
        (FuncE
          ctzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE ctzInt32 (VarE w))
        )
      )
      (LetD
        (VarP btstInt32)
        (FuncE
          btstInt32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int32 EqOp)
              (PrimE btstInt32 (VarE w) (VarE amount))
              (LitE (Int32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt64)
        (FuncE
          popcntInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE popcntInt64 (VarE w))
        )
      )
      (LetD
        (VarP clzInt64)
        (FuncE
          clzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE clzInt64 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt64)
        (FuncE
          ctzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE ctzInt64 (VarE w))
        )
      )
      (LetD
        (VarP btstInt64)
        (FuncE
          btstInt64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int64 EqOp)
              (PrimE btstInt64 (VarE w) (VarE amount))
              (LitE (Int64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP floatAbs)
        (FuncE floatAbs Local Returns (params f) Float (PrimE fabs (VarE f)))
      )
      (LetD
        (VarP floatSqrt)
        (FuncE floatSqrt Local Returns (params f) Float (PrimE fsqrt (VarE f)))
      )
      (LetD
        (VarP floatCeil)
        (FuncE floatCeil Local Returns (params f) Float (PrimE fceil (VarE f)))
      )
      (LetD
        (VarP floatFloor)
        (FuncE
          floatFloor
          Local
          Returns
          (params f)
          Float
          (PrimE ffloor (VarE f))
        )
      )
      (LetD
        (VarP floatTrunc)
        (FuncE
          floatTrunc
          Local
          Returns
          (params f)
          Float
          (PrimE ftrunc (VarE f))
        )
      )
      (LetD
        (VarP floatNearest)
        (FuncE
          floatNearest
          Local
          Returns
          (params f)
          Float
          (PrimE fnearest (VarE f))
        )
      )
      (LetD
        (VarP floatMin)
        (FuncE
          floatMin
          Local
          Returns
          (params f g)
          Float
          (PrimE fmin (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatMax)
        (FuncE
          floatMax
          Local
          Returns
          (params f g)
          Float
          (PrimE fmax (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatCopySign)
        (FuncE
          floatCopySign
          Local
          Returns
          (params f g)
          Float
          (PrimE fcopysign (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatToInt)
        (FuncE
          floatToInt
          Local
          Returns
          (params f)
          Int
          (PrimE (NumConvTrapPrim Float Int) (VarE f))
        )
      )
      (LetD
        (VarP intToFloat)
        (FuncE
          intToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int Float) (VarE n))
        )
      )
      (LetD
        (VarP floatToInt64)
        (FuncE
          floatToInt64
          Local
          Returns
          (params f)
          Int64
          (PrimE (NumConvTrapPrim Float Int64) (VarE f))
        )
      )
      (LetD
        (VarP int64ToFloat)
        (FuncE
          int64ToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int64 Float) (VarE n))
        )
      )
      (LetD (VarP floatToText) (VarE @text_of_Float))
      (LetD
        (VarP floatToFormattedText)
        (FuncE
          floatToFormattedText
          Local
          Returns
          (params f prec mode)
          Text
          (PrimE fmtFloat->Text (VarE f) (VarE prec) (VarE mode))
        )
      )
      (LetD
        (VarP sin)
        (FuncE sin Local Returns (params f) Float (PrimE fsin (VarE f)))
      )
      (LetD
        (VarP cos)
        (FuncE cos Local Returns (params f) Float (PrimE fcos (VarE f)))
      )
      (LetD
        (VarP tan)
        (FuncE tan Local Returns (params f) Float (PrimE ftan (VarE f)))
      )
      (LetD
        (VarP arcsin)
        (FuncE arcsin Local Returns (params f) Float (PrimE fasin (VarE f)))
      )
      (LetD
        (VarP arccos)
        (FuncE arccos Local Returns (params f) Float (PrimE facos (VarE f)))
      )
      (LetD
        (VarP arctan)
        (FuncE arctan Local Returns (params f) Float (PrimE fatan (VarE f)))
      )
      (LetD
        (VarP arctan2)
        (FuncE
          arctan2
          Local
          Returns
          (params y x)
          Float
          (PrimE fatan2 (VarE y) (VarE x))
        )
      )
      (LetD
        (VarP exp)
        (FuncE exp Local Returns (params f) Float (PrimE fexp (VarE f)))
      )
      (LetD
        (VarP log)
        (FuncE log Local Returns (params f) Float (PrimE flog (VarE f)))
      )
      (LetD
        (VarP Array_init)
        (FuncE
          Array_init
          Local
          Returns
          (T__16 Any)
          (params len x)
          [var T__16]
          (PrimE Array.init (VarE len) (VarE x))
        )
      )
      (LetD
        (VarP Array_tabulate)
        (FuncE
          Array_tabulate
          Local
          Returns
          (T__17 Any)
          (params len gen)
          [T__17]
          (PrimE Array.tabulate (VarE len) (VarE gen))
        )
      )
      (LetD
        (VarP blobToArray)
        (FuncE
          blobToArray
          Local
          Returns
          (params b)
          [Nat8]
          (PrimE blobToArray (VarE b))
        )
      )
      (LetD
        (VarP blobToArrayMut)
        (FuncE
          blobToArrayMut
          Local
          Returns
          (params b)
          [var Nat8]
          (PrimE blobToArrayMut (VarE b))
        )
      )
      (LetD
        (VarP arrayToBlob)
        (FuncE
          arrayToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayToBlob (VarE a))
        )
      )
      (LetD
        (VarP arrayMutToBlob)
        (FuncE
          arrayMutToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayMutToBlob (VarE a))
        )
      )
      (LetD
        (VarP error)
        (FuncE
          error
          Local
          Returns
          (params message)
          Error
          (BlockE
            (LetD
              (VarP e)
              (PrimE
                TupPrim
                (PrimE (TagE canister_reject) (PrimE TupPrim))
                (VarE message)
              )
            )
            (PrimE (CastPrim (ErrorCode, Text) Error) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorCode)
        (FuncE
          errorCode
          Local
          Returns
          (params e)
          ErrorCode
          (PrimE
            (ProjPrim 0)
            (PrimE (CastPrim Error (ErrorCode, Text)) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorMessage)
        (FuncE
          errorMessage
          Local
          Returns
          (params e)
          Text
          (PrimE
            (ProjPrim 1)
            (PrimE (CastPrim Error (ErrorCode, Text)) (VarE e))
          )
        )
      )
      (LetD (VarP time) (FuncE time Local Returns Nat64 (PrimE SystemTimePrim)))
      (LetD
        (VarP blobOfPrincipal)
        (FuncE
          blobOfPrincipal
          Local
          Returns
          (params id)
          Blob
          (PrimE (CastPrim Principal Blob) (VarE id))
        )
      )
      (LetD
        (VarP principalOfBlob)
        (FuncE
          principalOfBlob
          Local
          Returns
          (params act)
          Principal
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE
                  (RelPrim Nat GtOp)
                  (PrimE blob_size (VarE act))
                  (LitE (NatLit 29))
                )
                (PrimE
                  (CallPrim)
                  (VarE trap)
                  (LitE (TextLit blob too long for principal))
                )
                (PrimE TupPrim)
              )
            )
            (PrimE (CastPrim Blob Principal) (VarE act))
          )
        )
      )
      (LetD
        (VarP principalOfActor)
        (FuncE
          principalOfActor
          Local
          Returns
          (params act)
          Principal
          (PrimE (CastPrim actor {} Principal) (VarE act))
        )
      )
      (LetD
        (VarP isController)
        (FuncE
          isController
          Local
          Returns
          (params p)
          Bool
          (PrimE is_controller (VarE p))
        )
      )
      (LetD
        (VarP canisterVersion)
        (FuncE canisterVersion Local Returns Nat64 (PrimE canister_version))
      )
      (LetD (VarP createActor) (VarE @create_actor_helper))
      (LetD
        (VarP cyclesBalance)
        (FuncE cyclesBalance Local Returns Nat (PrimE SystemCyclesBalancePrim))
      )
      (LetD
        (VarP cyclesAvailable)
        (FuncE
          cyclesAvailable
          Local
          Returns
          Nat
          (PrimE SystemCyclesAvailablePrim)
        )
      )
      (LetD
        (VarP cyclesRefunded)
        (FuncE cyclesRefunded Local Returns Nat (VarE @refund))
      )
      (LetD
        (VarP cyclesAccept)
        (FuncE
          cyclesAccept
          Local
          Returns
          ($__16 Any)
          (params amount)
          Nat
          (PrimE SystemCyclesAcceptPrim (VarE amount))
        )
      )
      (LetD
        (VarP cyclesAdd)
        (FuncE
          cyclesAdd
          Local
          Returns
          ($__17 Any)
          (params amount)
          ()
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat EqOp) (VarE amount) (LitE (NatLit 0)))
                (PrimE RetPrim (PrimE TupPrim))
                (PrimE TupPrim)
              )
            )
            (LetD
              WildP
              (AssignE
                (VarLE @cycles)
                (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE amount))
              )
            )
            (IfE
              (PrimE
                (RelPrim Nat GtOp)
                (VarE @cycles)
                (LitE
                  (NatLit 340_282_366_920_938_463_463_374_607_431_768_211_455)
                )
              )
              (PrimE
                (CallPrim)
                (VarE trap)
                (LitE (TextLit cannot add more than 2^128 cycles))
              )
              (PrimE TupPrim)
            )
          )
        )
      )
      (LetD
        (VarP setCertifiedData)
        (FuncE
          setCertifiedData
          Local
          Returns
          (params data)
          ()
          (PrimE SetCertifiedData (VarE data))
        )
      )
      (LetD
        (VarP getCertificate)
        (FuncE getCertificate Local Returns ?Blob (PrimE GetCertificate))
      )
      (LetD
        (VarP stableMemorySize)
        (FuncE stableMemorySize Local Returns Nat64 (PrimE stableMemorySize))
      )
      (LetD
        (VarP stableMemoryGrow)
        (FuncE
          stableMemoryGrow
          Local
          Returns
          (params pages)
          Nat64
          (PrimE stableMemoryGrow (VarE pages))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat32)
        (FuncE
          stableMemoryLoadNat32
          Local
          Returns
          (params offset)
          Nat32
          (PrimE stableMemoryLoadNat32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat32)
        (FuncE
          stableMemoryStoreNat32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat8)
        (FuncE
          stableMemoryLoadNat8
          Local
          Returns
          (params offset)
          Nat8
          (PrimE stableMemoryLoadNat8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat8)
        (FuncE
          stableMemoryStoreNat8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat16)
        (FuncE
          stableMemoryLoadNat16
          Local
          Returns
          (params offset)
          Nat16
          (PrimE stableMemoryLoadNat16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat16)
        (FuncE
          stableMemoryStoreNat16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat64)
        (FuncE
          stableMemoryLoadNat64
          Local
          Returns
          (params offset)
          Nat64
          (PrimE stableMemoryLoadNat64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat64)
        (FuncE
          stableMemoryStoreNat64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt32)
        (FuncE
          stableMemoryLoadInt32
          Local
          Returns
          (params offset)
          Int32
          (PrimE stableMemoryLoadInt32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt32)
        (FuncE
          stableMemoryStoreInt32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt8)
        (FuncE
          stableMemoryLoadInt8
          Local
          Returns
          (params offset)
          Int8
          (PrimE stableMemoryLoadInt8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt8)
        (FuncE
          stableMemoryStoreInt8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt16)
        (FuncE
          stableMemoryLoadInt16
          Local
          Returns
          (params offset)
          Int16
          (PrimE stableMemoryLoadInt16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt16)
        (FuncE
          stableMemoryStoreInt16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt64)
        (FuncE
          stableMemoryLoadInt64
          Local
          Returns
          (params offset)
          Int64
          (PrimE stableMemoryLoadInt64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt64)
        (FuncE
          stableMemoryStoreInt64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadFloat)
        (FuncE
          stableMemoryLoadFloat
          Local
          Returns
          (params offset)
          Float
          (PrimE stableMemoryLoadFloat (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreFloat)
        (FuncE
          stableMemoryStoreFloat
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreFloat (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadBlob)
        (FuncE
          stableMemoryLoadBlob
          Local
          Returns
          (params offset size)
          Blob
          (PrimE stableMemoryLoadBlob (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP stableMemoryStoreBlob)
        (FuncE
          stableMemoryStoreBlob
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreBlob (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableVarQuery)
        (FuncE
          stableVarQuery
          Local
          Returns
          shared query () -> async {size : Nat64}
          (PrimE stableVarQuery)
        )
      )
      (LetD
        (VarP regionNew)
        (FuncE regionNew Local Returns Region (PrimE regionNew))
      )
      (LetD
        (VarP regionId)
        (FuncE regionId Local Returns (params r) Nat (PrimE regionId (VarE r)))
      )
      (LetD
        (VarP regionSize)
        (FuncE
          regionSize
          Local
          Returns
          (params r)
          Nat64
          (PrimE regionSize (VarE r))
        )
      )
      (LetD
        (VarP regionGrow)
        (FuncE
          regionGrow
          Local
          Returns
          (params r pages)
          Nat64
          (PrimE regionGrow (VarE r) (VarE pages))
        )
      )
      (LetD
        (VarP regionLoadNat32)
        (FuncE
          regionLoadNat32
          Local
          Returns
          (params r offset)
          Nat32
          (PrimE regionLoadNat32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat32)
        (FuncE
          regionStoreNat32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat8)
        (FuncE
          regionLoadNat8
          Local
          Returns
          (params r offset)
          Nat8
          (PrimE regionLoadNat8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat8)
        (FuncE
          regionStoreNat8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat16)
        (FuncE
          regionLoadNat16
          Local
          Returns
          (params r offset)
          Nat16
          (PrimE regionLoadNat16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat16)
        (FuncE
          regionStoreNat16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat64)
        (FuncE
          regionLoadNat64
          Local
          Returns
          (params r offset)
          Nat64
          (PrimE regionLoadNat64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat64)
        (FuncE
          regionStoreNat64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt32)
        (FuncE
          regionLoadInt32
          Local
          Returns
          (params r offset)
          Int32
          (PrimE regionLoadInt32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt32)
        (FuncE
          regionStoreInt32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt8)
        (FuncE
          regionLoadInt8
          Local
          Returns
          (params r offset)
          Int8
          (PrimE regionLoadInt8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt8)
        (FuncE
          regionStoreInt8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt16)
        (FuncE
          regionLoadInt16
          Local
          Returns
          (params r offset)
          Int16
          (PrimE regionLoadInt16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt16)
        (FuncE
          regionStoreInt16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt64)
        (FuncE
          regionLoadInt64
          Local
          Returns
          (params r offset)
          Int64
          (PrimE regionLoadInt64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt64)
        (FuncE
          regionStoreInt64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadFloat)
        (FuncE
          regionLoadFloat
          Local
          Returns
          (params r offset)
          Float
          (PrimE regionLoadFloat (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreFloat)
        (FuncE
          regionStoreFloat
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreFloat (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadBlob)
        (FuncE
          regionLoadBlob
          Local
          Returns
          (params r offset size)
          Blob
          (PrimE regionLoadBlob (VarE r) (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP regionStoreBlob)
        (FuncE
          regionStoreBlob
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreBlob (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD (VarP call_raw) (VarE @call_raw))
      (LetD
        (VarP performanceCounter)
        (FuncE
          performanceCounter
          Local
          Returns
          (params counter)
          Nat64
          (PrimE performanceCounter (VarE counter))
        )
      )
      (LetD
        (VarP forall)
        (FuncE
          forall
          Local
          Returns
          (T__18 Any)
          (params f)
          Bool
          (PrimE forall (VarE f))
        )
      )
      (LetD
        (VarP exists)
        (FuncE
          exists
          Local
          Returns
          (T__19 Any)
          (params f)
          Bool
          (PrimE exists (VarE f))
        )
      )
      (LetD
        (VarP Ret)
        (FuncE Ret Local Returns (T__20 Any) T__20 (PrimE viperRet))
      )
      (LetD (VarP setTimer) (VarE @setTimer))
      (LetD (VarP cancelTimer) (VarE @cancelTimer))
      (NewObjE
        Module
        (trap trap)
        (time time)
        (textUppercase textUppercase)
        (textLowercase textLowercase)
        (textCompare textCompare)
        (tan tan)
        (stableVarQuery stableVarQuery)
        (stableMemoryStoreNat8 stableMemoryStoreNat8)
        (stableMemoryStoreNat64 stableMemoryStoreNat64)
        (stableMemoryStoreNat32 stableMemoryStoreNat32)
        (stableMemoryStoreNat16 stableMemoryStoreNat16)
        (stableMemoryStoreInt8 stableMemoryStoreInt8)
        (stableMemoryStoreInt64 stableMemoryStoreInt64)
        (stableMemoryStoreInt32 stableMemoryStoreInt32)
        (stableMemoryStoreInt16 stableMemoryStoreInt16)
        (stableMemoryStoreFloat stableMemoryStoreFloat)
        (stableMemoryStoreBlob stableMemoryStoreBlob)
        (stableMemorySize stableMemorySize)
        (stableMemoryLoadNat8 stableMemoryLoadNat8)
        (stableMemoryLoadNat64 stableMemoryLoadNat64)
        (stableMemoryLoadNat32 stableMemoryLoadNat32)
        (stableMemoryLoadNat16 stableMemoryLoadNat16)
        (stableMemoryLoadInt8 stableMemoryLoadInt8)
        (stableMemoryLoadInt64 stableMemoryLoadInt64)
        (stableMemoryLoadInt32 stableMemoryLoadInt32)
        (stableMemoryLoadInt16 stableMemoryLoadInt16)
        (stableMemoryLoadFloat stableMemoryLoadFloat)
        (stableMemoryLoadBlob stableMemoryLoadBlob)
        (stableMemoryGrow stableMemoryGrow)
        (sin sin)
        (shiftRight shiftRight)
        (shiftLeft shiftLeft)
        (setTimer setTimer)
        (setCertifiedData setCertifiedData)
        (rts_version rts_version)
        (rts_total_allocation rts_total_allocation)
        (rts_stable_memory_size rts_stable_memory_size)
        (rts_reclaimed rts_reclaimed)
        (rts_mutator_instructions rts_mutator_instructions)
        (rts_memory_size rts_memory_size)
        (rts_max_stack_size rts_max_stack_size)
        (rts_max_live_size rts_max_live_size)
        (rts_logical_stable_memory_size rts_logical_stable_memory_size)
        (rts_heap_size rts_heap_size)
        (rts_collector_instructions rts_collector_instructions)
        (rts_callback_table_size rts_callback_table_size)
        (rts_callback_table_count rts_callback_table_count)
        (regionStoreNat8 regionStoreNat8)
        (regionStoreNat64 regionStoreNat64)
        (regionStoreNat32 regionStoreNat32)
        (regionStoreNat16 regionStoreNat16)
        (regionStoreInt8 regionStoreInt8)
        (regionStoreInt64 regionStoreInt64)
        (regionStoreInt32 regionStoreInt32)
        (regionStoreInt16 regionStoreInt16)
        (regionStoreFloat regionStoreFloat)
        (regionStoreBlob regionStoreBlob)
        (regionSize regionSize)
        (regionNew regionNew)
        (regionLoadNat8 regionLoadNat8)
        (regionLoadNat64 regionLoadNat64)
        (regionLoadNat32 regionLoadNat32)
        (regionLoadNat16 regionLoadNat16)
        (regionLoadInt8 regionLoadInt8)
        (regionLoadInt64 regionLoadInt64)
        (regionLoadInt32 regionLoadInt32)
        (regionLoadInt16 regionLoadInt16)
        (regionLoadFloat regionLoadFloat)
        (regionLoadBlob regionLoadBlob)
        (regionId regionId)
        (regionGrow regionGrow)
        (principalOfBlob principalOfBlob)
        (principalOfActor principalOfActor)
        (popcntNat8 popcntNat8)
        (popcntNat64 popcntNat64)
        (popcntNat32 popcntNat32)
        (popcntNat16 popcntNat16)
        (popcntInt8 popcntInt8)
        (popcntInt64 popcntInt64)
        (popcntInt32 popcntInt32)
        (popcntInt16 popcntInt16)
        (performanceCounter performanceCounter)
        (natToNat8 natToNat8)
        (natToNat64 natToNat64)
        (natToNat32 natToNat32)
        (natToNat16 natToNat16)
        (nat8ToNat16 nat8ToNat16)
        (nat8ToNat nat8ToNat)
        (nat8ToInt8 nat8ToInt8)
        (nat64ToNat32 nat64ToNat32)
        (nat64ToNat nat64ToNat)
        (nat64ToInt64 nat64ToInt64)
        (nat32ToNat64 nat32ToNat64)
        (nat32ToNat16 nat32ToNat16)
        (nat32ToNat nat32ToNat)
        (nat32ToInt32 nat32ToInt32)
        (nat32ToChar nat32ToChar)
        (nat16ToNat8 nat16ToNat8)
        (nat16ToNat32 nat16ToNat32)
        (nat16ToNat nat16ToNat)
        (nat16ToInt16 nat16ToInt16)
        (log log)
        (isController isController)
        (intToNat8Wrap intToNat8Wrap)
        (intToNat64Wrap intToNat64Wrap)
        (intToNat32Wrap intToNat32Wrap)
        (intToNat16Wrap intToNat16Wrap)
        (intToInt8Wrap intToInt8Wrap)
        (intToInt8 intToInt8)
        (intToInt64Wrap intToInt64Wrap)
        (intToInt64 intToInt64)
        (intToInt32Wrap intToInt32Wrap)
        (intToInt32 intToInt32)
        (intToInt16Wrap intToInt16Wrap)
        (intToInt16 intToInt16)
        (intToFloat intToFloat)
        (int8ToNat8 int8ToNat8)
        (int8ToInt16 int8ToInt16)
        (int8ToInt int8ToInt)
        (int64ToNat64 int64ToNat64)
        (int64ToInt32 int64ToInt32)
        (int64ToInt int64ToInt)
        (int64ToFloat int64ToFloat)
        (int32ToNat32 int32ToNat32)
        (int32ToInt64 int32ToInt64)
        (int32ToInt16 int32ToInt16)
        (int32ToInt int32ToInt)
        (int16ToNat16 int16ToNat16)
        (int16ToInt8 int16ToInt8)
        (int16ToInt32 int16ToInt32)
        (int16ToInt int16ToInt)
        (idlHash idlHash)
        (hashBlob hashBlob)
        (getCertificate getCertificate)
        (forall forall)
        (floatTrunc floatTrunc)
        (floatToText floatToText)
        (floatToInt64 floatToInt64)
        (floatToInt floatToInt)
        (floatToFormattedText floatToFormattedText)
        (floatSqrt floatSqrt)
        (floatNearest floatNearest)
        (floatMin floatMin)
        (floatMax floatMax)
        (floatFloor floatFloor)
        (floatCopySign floatCopySign)
        (floatCeil floatCeil)
        (floatAbs floatAbs)
        (exp exp)
        (exists exists)
        (errorMessage errorMessage)
        (errorCode errorCode)
        (error error)
        (encodeUtf8 encodeUtf8)
        (decodeUtf8 decodeUtf8)
        (debugPrintNat debugPrintNat)
        (debugPrintInt debugPrintInt)
        (debugPrintChar debugPrintChar)
        (debugPrint debugPrint)
        (cyclesRefunded cyclesRefunded)
        (cyclesBalance cyclesBalance)
        (cyclesAvailable cyclesAvailable)
        (cyclesAdd cyclesAdd)
        (cyclesAccept cyclesAccept)
        (ctzNat8 ctzNat8)
        (ctzNat64 ctzNat64)
        (ctzNat32 ctzNat32)
        (ctzNat16 ctzNat16)
        (ctzInt8 ctzInt8)
        (ctzInt64 ctzInt64)
        (ctzInt32 ctzInt32)
        (ctzInt16 ctzInt16)
        (createActor createActor)
        (cos cos)
        (clzNat8 clzNat8)
        (clzNat64 clzNat64)
        (clzNat32 clzNat32)
        (clzNat16 clzNat16)
        (clzInt8 clzInt8)
        (clzInt64 clzInt64)
        (clzInt32 clzInt32)
        (clzInt16 clzInt16)
        (charToUpper charToUpper)
        (charToText charToText)
        (charToNat32 charToNat32)
        (charToLower charToLower)
        (charIsWhitespace charIsWhitespace)
        (charIsUppercase charIsUppercase)
        (charIsLowercase charIsLowercase)
        (charIsAlphabetic charIsAlphabetic)
        (canisterVersion canisterVersion)
        (cancelTimer cancelTimer)
        (call_raw call_raw)
        (btstNat8 btstNat8)
        (btstNat64 btstNat64)
        (btstNat32 btstNat32)
        (btstNat16 btstNat16)
        (btstInt8 btstInt8)
        (btstInt64 btstInt64)
        (btstInt32 btstInt32)
        (btstInt16 btstInt16)
        (blobToArrayMut blobToArrayMut)
        (blobToArray blobToArray)
        (blobOfPrincipal blobOfPrincipal)
        (blobCompare blobCompare)
        (arrayToBlob arrayToBlob)
        (arrayMutToBlob arrayMutToBlob)
        (arctan2 arctan2)
        (arctan arctan)
        (arcsin arcsin)
        (arccos arccos)
        (abs abs)
        (Types Types)
        (Ret Ret)
        (Array_tabulate Array_tabulate)
        (Array_init Array_init)
        module {type ErrorCode = {#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}; Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; Ret : <T>() -> T; Types : module {type Any = Any; type Blob = Blob; type Bool = Bool; type Char = Char; type Error = Error; type Float = Float; type Int = Int; type Int16 = Int16; type Int32 = Int32; type Int64 = Int64; type Int8 = Int8; type Nat = Nat; type Nat16 = Nat16; type Nat32 = Nat32; type Nat64 = Nat64; type Nat8 = Nat8; type None = None; type Null = Null; type Principal = Principal; type Region = Region; type Text = Text}; abs : Int -> Nat; arccos : Float -> Float; arcsin : Float -> Float; arctan : Float -> Float; arctan2 : (Float, Float) -> Float; arrayMutToBlob : [var Nat8] -> Blob; arrayToBlob : [Nat8] -> Blob; blobCompare : (Blob, Blob) -> Int8; blobOfPrincipal : Principal -> Blob; blobToArray : Blob -> [Nat8]; blobToArrayMut : Blob -> [var Nat8]; btstInt16 : (Int16, Int16) -> Bool; btstInt32 : (Int32, Int32) -> Bool; btstInt64 : (Int64, Int64) -> Bool; btstInt8 : (Int8, Int8) -> Bool; btstNat16 : (Nat16, Nat16) -> Bool; btstNat32 : (Nat32, Nat32) -> Bool; btstNat64 : (Nat64, Nat64) -> Bool; btstNat8 : (Nat8, Nat8) -> Bool; call_raw : (Principal, Text, Blob) -> async Blob; cancelTimer : Nat -> (); canisterVersion : () -> Nat64; charIsAlphabetic : Char -> Bool; charIsLowercase : Char -> Bool; charIsUppercase : Char -> Bool; charIsWhitespace : Char -> Bool; charToLower : Char -> Char; charToNat32 : Char -> Nat32; charToText : Char -> Text; charToUpper : Char -> Char; clzInt16 : Int16 -> Int16; clzInt32 : Int32 -> Int32; clzInt64 : Int64 -> Int64; clzInt8 : Int8 -> Int8; clzNat16 : Nat16 -> Nat16; clzNat32 : Nat32 -> Nat32; clzNat64 : Nat64 -> Nat64; clzNat8 : Nat8 -> Nat8; cos : Float -> Float; createActor : (Blob, Blob) -> async Principal; ctzInt16 : Int16 -> Int16; ctzInt32 : Int32 -> Int32; ctzInt64 : Int64 -> Int64; ctzInt8 : Int8 -> Int8; ctzNat16 : Nat16 -> Nat16; ctzNat32 : Nat32 -> Nat32; ctzNat64 : Nat64 -> Nat64; ctzNat8 : Nat8 -> Nat8; cyclesAccept : <system>Nat -> Nat; cyclesAdd : <system>Nat -> (); cyclesAvailable : () -> Nat; cyclesBalance : () -> Nat; cyclesRefunded : () -> Nat; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); decodeUtf8 : Blob -> ?Text; encodeUtf8 : Text -> Blob; error : Text -> Error; errorCode : Error -> ErrorCode; errorMessage : Error -> Text; exists : <T>(T -> Bool) -> Bool; exp : Float -> Float; floatAbs : Float -> Float; floatCeil : Float -> Float; floatCopySign : (Float, Float) -> Float; floatFloor : Float -> Float; floatMax : (Float, Float) -> Float; floatMin : (Float, Float) -> Float; floatNearest : Float -> Float; floatSqrt : Float -> Float; floatToFormattedText : (Float, Nat8, Nat8) -> Text; floatToInt : Float -> Int; floatToInt64 : Float -> Int64; floatToText : Float -> Text; floatTrunc : Float -> Float; forall : <T>(T -> Bool) -> Bool; getCertificate : () -> ?Blob; hashBlob : Blob -> Nat32; idlHash : Text -> Nat32; int16ToInt : Int16 -> Int; int16ToInt32 : Int16 -> Int32; int16ToInt8 : Int16 -> Int8; int16ToNat16 : Int16 -> Nat16; int32ToInt : Int32 -> Int; int32ToInt16 : Int32 -> Int16; int32ToInt64 : Int32 -> Int64; int32ToNat32 : Int32 -> Nat32; int64ToFloat : Int64 -> Float; int64ToInt : Int64 -> Int; int64ToInt32 : Int64 -> Int32; int64ToNat64 : Int64 -> Nat64; int8ToInt : Int8 -> Int; int8ToInt16 : Int8 -> Int16; int8ToNat8 : Int8 -> Nat8; intToFloat : Int -> Float; intToInt16 : Int -> Int16; intToInt16Wrap : Int -> Int16; intToInt32 : Int -> Int32; intToInt32Wrap : Int -> Int32; intToInt64 : Int -> Int64; intToInt64Wrap : Int -> Int64; intToInt8 : Int -> Int8; intToInt8Wrap : Int -> Int8; intToNat16Wrap : Int -> Nat16; intToNat32Wrap : Int -> Nat32; intToNat64Wrap : Int -> Nat64; intToNat8Wrap : Int -> Nat8; isController : Principal -> Bool; log : Float -> Float; nat16ToInt16 : Nat16 -> Int16; nat16ToNat : Nat16 -> Nat; nat16ToNat32 : Nat16 -> Nat32; nat16ToNat8 : Nat16 -> Nat8; nat32ToChar : Nat32 -> Char; nat32ToInt32 : Nat32 -> Int32; nat32ToNat : Nat32 -> Nat; nat32ToNat16 : Nat32 -> Nat16; nat32ToNat64 : Nat32 -> Nat64; nat64ToInt64 : Nat64 -> Int64; nat64ToNat : Nat64 -> Nat; nat64ToNat32 : Nat64 -> Nat32; nat8ToInt8 : Nat8 -> Int8; nat8ToNat : Nat8 -> Nat; nat8ToNat16 : Nat8 -> Nat16; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; performanceCounter : Nat32 -> Nat64; popcntInt16 : Int16 -> Int16; popcntInt32 : Int32 -> Int32; popcntInt64 : Int64 -> Int64; popcntInt8 : Int8 -> Int8; popcntNat16 : Nat16 -> Nat16; popcntNat32 : Nat32 -> Nat32; popcntNat64 : Nat64 -> Nat64; popcntNat8 : Nat8 -> Nat8; principalOfActor : (actor {}) -> Principal; principalOfBlob : Blob -> Principal; regionGrow : (Region, Nat64) -> Nat64; regionId : Region -> Nat; regionLoadBlob : (Region, Nat64, Nat) -> Blob; regionLoadFloat : (Region, Nat64) -> Float; regionLoadInt16 : (Region, Nat64) -> Int16; regionLoadInt32 : (Region, Nat64) -> Int32; regionLoadInt64 : (Region, Nat64) -> Int64; regionLoadInt8 : (Region, Nat64) -> Int8; regionLoadNat16 : (Region, Nat64) -> Nat16; regionLoadNat32 : (Region, Nat64) -> Nat32; regionLoadNat64 : (Region, Nat64) -> Nat64; regionLoadNat8 : (Region, Nat64) -> Nat8; regionNew : () -> Region; regionSize : Region -> Nat64; regionStoreBlob : (Region, Nat64, Blob) -> (); regionStoreFloat : (Region, Nat64, Float) -> (); regionStoreInt16 : (Region, Nat64, Int16) -> (); regionStoreInt32 : (Region, Nat64, Int32) -> (); regionStoreInt64 : (Region, Nat64, Int64) -> (); regionStoreInt8 : (Region, Nat64, Int8) -> (); regionStoreNat16 : (Region, Nat64, Nat16) -> (); regionStoreNat32 : (Region, Nat64, Nat32) -> (); regionStoreNat64 : (Region, Nat64, Nat64) -> (); regionStoreNat8 : (Region, Nat64, Nat8) -> (); rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_collector_instructions : () -> Nat; rts_heap_size : () -> Nat; rts_logical_stable_memory_size : () -> Nat; rts_max_live_size : () -> Nat; rts_max_stack_size : () -> Nat; rts_memory_size : () -> Nat; rts_mutator_instructions : () -> Nat; rts_reclaimed : () -> Nat; rts_stable_memory_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; setCertifiedData : Blob -> (); setTimer : <system>(Nat64, Bool, () -> async ()) -> Nat; shiftLeft : (Nat, Nat32) -> Nat; shiftRight : (Nat, Nat32) -> Nat; sin : Float -> Float; stableMemoryGrow : Nat64 -> Nat64; stableMemoryLoadBlob : (Nat64, Nat) -> Blob; stableMemoryLoadFloat : Nat64 -> Float; stableMemoryLoadInt16 : Nat64 -> Int16; stableMemoryLoadInt32 : Nat64 -> Int32; stableMemoryLoadInt64 : Nat64 -> Int64; stableMemoryLoadInt8 : Nat64 -> Int8; stableMemoryLoadNat16 : Nat64 -> Nat16; stableMemoryLoadNat32 : Nat64 -> Nat32; stableMemoryLoadNat64 : Nat64 -> Nat64; stableMemoryLoadNat8 : Nat64 -> Nat8; stableMemorySize : () -> Nat64; stableMemoryStoreBlob : (Nat64, Blob) -> (); stableMemoryStoreFloat : (Nat64, Float) -> (); stableMemoryStoreInt16 : (Nat64, Int16) -> (); stableMemoryStoreInt32 : (Nat64, Int32) -> (); stableMemoryStoreInt64 : (Nat64, Int64) -> (); stableMemoryStoreInt8 : (Nat64, Int8) -> (); stableMemoryStoreNat16 : (Nat64, Nat16) -> (); stableMemoryStoreNat32 : (Nat64, Nat32) -> (); stableMemoryStoreNat64 : (Nat64, Nat64) -> (); stableMemoryStoreNat8 : (Nat64, Nat8) -> (); stableVarQuery : () -> shared query () -> async {size : Nat64}; tan : Float -> Float; textCompare : (Text, Text) -> Int8; textLowercase : Text -> Text; textUppercase : Text -> Text; time : () -> Nat64; trap : Text -> None}
      )
    )
  )
  (LetD
    (ObjP
      (debugPrint (VarP debugPrint))
      (error (VarP error))
      (errorMessage (VarP errorMessage))
      (call_raw (VarP call_raw))
      (principalOfActor (VarP principalOfActor))
    )
    (VarE file$@prim)
  )
  (LetD
    (VarP $__motoko_stable_var_info)
    (FuncE
      $__motoko_stable_var_info
      Shared Query
      Promises
      (T1 Any)
      {size : Nat64}
      (AsyncE
        (T2 Any)
        (BlockE
          (LetD (VarP $caller/0) (PrimE ICCallerPrim))
          (LetD
            WildP
            (PrimE
              AssertPrim
              (IfE
                (PrimE
                  (RelPrim Principal EqOp)
                  (VarE $caller/0)
                  (PrimE (SelfRef Principal))
                )
                (LitE (BoolLit true))
                (PrimE is_controller (VarE $caller/0))
              )
            )
          )
          (LetD
            (VarP $size/0)
            (PrimE (ICStableSize memory {}) (NewObjE Memory memory {}))
          )
          (NewObjE Object (size $size/0) {size : Nat64})
        )
        T1
      )
    )
  )
  (VarD $state/0 ?(memory {}) (PrimE OptPrim (PrimE (ICStableRead memory {}))))
  (LetD
    (VarP $getState/0)
    (FuncE
      $getState/0
      Local
      Returns
      memory {}
      (SwitchE
        (VarE $state/0)
        (case (LitP NullLit) (LoopE (PrimE TupPrim)))
        (case (OptP (VarP $v/0)) (VarE $v/0))
      )
    )
  )
  (LetD
    (VarP foo)
    (FuncE
      foo
      Shared
      Returns
      ($__22 Any)
      ()
      (BlockE
        (LetD
          WildP
          (AsyncE
            ($foo Any)
            (BlockE
              (LetD
                (VarP $thunk/0)
                (FuncE
                  $cleanup
                  Local
                  Returns
                  ()
                  (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT0)))
                )
              )
              (TryE
                (BlockE
                  (LetD
                    (VarP $thunk/1)
                    (FuncE
                      $cleanup
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT1)))
                    )
                  )
                  (TryE
                    (BlockE
                      (LetD
                        (VarP $thunk/2)
                        (FuncE
                          $cleanup
                          Local
                          Returns
                          ()
                          (PrimE
                            (CallPrim)
                            (VarE debugPrint)
                            (LitE (TextLit OUT2))
                          )
                        )
                      )
                      (TryE
                        (BlockE
                          (LetD
                            WildP
                            (PrimE
                              AwaitPrim
                              (AsyncE
                                ($@anon-async-8.29 Any)
                                (PrimE TupPrim)
                                $foo
                              )
                            )
                          )
                          (IfE
                            (LitE (BoolLit true))
                            (PrimE RetPrim (PrimE TupPrim))
                            (PrimE RetPrim (PrimE TupPrim))
                          )
                        )
                        ;
                        $thunk/2
                      )
                    )
                    ;
                    $thunk/1
                  )
                )
                ;
                $thunk/0
              )
            )
            $__22
          )
        )
        (PrimE TupPrim)
      )
    )
  )
  (LetD WildP (AssignE (VarLE $state/0) (LitE NullLit)))
  (foo foo)
  (__motoko_stable_var_info $__motoko_stable_var_info)
  (System
    (Pre (PrimE (ICStableWrite memory {}) (NewObjE Memory memory {})))
    (Post (PrimE TupPrim))
    (Heartbeat (PrimE TupPrim))
    (Timer
      (BlockE
        (LetD WildP (PrimE (CallPrim ()) (VarE @timer_helper) (PrimE TupPrim)))
        (PrimE TupPrim)
      )
    )
    (Inspect (PrimE TupPrim))
  )
  actor {foo : shared () -> ()}
)
(ActorU
  (VarD @cycles Nat (LitE (NatLit 0)))
  (LetD
    (VarP @add_cycles)
    (FuncE
      @add_cycles
      Local
      Returns
      ($__259 Any)
      ()
      (BlockE
        (LetD (VarP cycles) (VarE @cycles))
        (LetD WildP (PrimE (CallPrim) (VarE @reset_cycles) (PrimE TupPrim)))
        (IfE
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
          (PrimE SystemCyclesAddPrim (VarE cycles))
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @reset_cycles)
    (FuncE
      @reset_cycles
      Local
      Returns
      ()
      (AssignE (VarLE @cycles) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @immut_array_get)
    (FuncE
      @immut_array_get
      Local
      Returns
      (A__45 Any)
      (params xs)
      Nat -> A__45
      (FuncE
        @anon-func-39.3
        Local
        Returns
        (params n)
        A__45
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @mut_array_get)
    (FuncE
      @mut_array_get
      Local
      Returns
      (A__46 Any)
      (params xs)
      Nat -> A__46
      (FuncE
        @anon-func-41.3
        Local
        Returns
        (params n)
        A__46
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @immut_array_size)
    (FuncE
      @immut_array_size
      Local
      Returns
      (A__47 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-43.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_size)
    (FuncE
      @mut_array_size
      Local
      Returns
      (A__48 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-45.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_put)
    (FuncE
      @mut_array_put
      Local
      Returns
      (A__49 Any)
      (params xs)
      (Nat, A__49) -> ()
      (FuncE
        @anon-func-47.3
        Local
        Returns
        (params n x)
        ()
        (AssignE (IdxLE (VarE xs) (VarE n)) (VarE x))
      )
    )
  )
  (LetD
    (VarP @immut_array_keys)
    (FuncE
      @immut_array_keys
      Local
      Returns
      (A__50 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-49.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_keys)
    (FuncE
      @mut_array_keys
      Local
      Returns
      (A__51 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-55.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @immut_array_vals)
    (FuncE
      @immut_array_vals
      Local
      Returns
      (A__52 Any)
      (params xs)
      () -> @Iter__1<A__52>
      (FuncE
        @anon-func-61.3
        Local
        Returns
        @Iter__1<A__52>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__52
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__52})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_vals)
    (FuncE
      @mut_array_vals
      Local
      Returns
      (A__53 Any)
      (params xs)
      () -> @Iter__1<A__53>
      (FuncE
        @anon-func-67.3
        Local
        Returns
        @Iter__1<A__53>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__53
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__53})
        )
      )
    )
  )
  (LetD
    (VarP @blob_size)
    (FuncE
      @blob_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-73.3 Local Returns Nat (PrimE blob_size (VarE xs)))
    )
  )
  (LetD
    (VarP @blob_vals)
    (FuncE
      @blob_vals
      Local
      Returns
      (params xs)
      () -> @Iter__1<Nat8>
      (FuncE
        @anon-func-75.3
        Local
        Returns
        @Iter__1<Nat8>
        (BlockE
          (LetD (VarP i) (PrimE blob_vals_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat8
              (IfE
                (PrimE blob_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE blob_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat8})
        )
      )
    )
  )
  (LetD
    (VarP @text_size)
    (FuncE
      @text_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-86.3 Local Returns Nat (PrimE text_len (VarE xs)))
    )
  )
  (LetD
    (VarP @text_chars)
    (FuncE
      @text_chars
      Local
      Returns
      (params xs)
      () -> @Iter__1<Char>
      (FuncE
        @anon-func-88.3
        Local
        Returns
        @Iter__1<Char>
        (BlockE
          (LetD (VarP i) (PrimE text_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Char
              (IfE
                (PrimE text_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE text_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Char})
        )
      )
    )
  )
  (LetD
    (VarP @text_of_num)
    (FuncE
      @text_of_num
      Local
      Returns
      (params x base sep digits)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit )))
        (VarD n Nat (VarE x))
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat EqOp) (VarE n) (LitE (NatLit 0)))
            (PrimE RetPrim (LitE (TextLit 0)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD
          WildP
          (LabelE
            $done/0
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat GtOp) (VarE n) (LitE (NatLit 0)))
                (BlockE
                  (LetD
                    (VarP rem)
                    (PrimE (BinPrim Nat ModOp) (VarE n) (VarE base))
                  )
                  (LetD
                    WildP
                    (IfE
                      (IfE
                        (PrimE (RelPrim Nat GtOp) (VarE sep) (LitE (NatLit 0)))
                        (PrimE (RelPrim Nat EqOp) (VarE i) (VarE sep))
                        (LitE (BoolLit false))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE text)
                            (PrimE
                              (BinPrim Text CatOp)
                              (LitE (TextLit _))
                              (VarE text)
                            )
                          )
                        )
                        (AssignE (VarLE i) (LitE (NatLit 0)))
                      )
                      (PrimE TupPrim)
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE text)
                      (PrimE
                        (BinPrim Text CatOp)
                        (PrimE (CallPrim) (VarE digits) (VarE rem))
                        (VarE text)
                      )
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE n)
                      (PrimE (BinPrim Nat DivOp) (VarE n) (VarE base))
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/0) (PrimE TupPrim))
              )
            )
          )
        )
        (VarE text)
      )
    )
  )
  (LetD
    (VarP @left_pad)
    (FuncE
      @left_pad
      Local
      Returns
      (params pad char t)
      Text
      (IfE
        (PrimE (RelPrim Nat GtOp) (VarE pad) (PrimE text_len (VarE t)))
        (BlockE
          (VarD
            i
            Nat
            (PrimE (BinPrim Nat SubOp) (VarE pad) (PrimE text_len (VarE t)))
          )
          (VarD text Text (VarE t))
          (LetD
            WildP
            (LabelE
              $done/1
              ()
              (LoopE
                (IfE
                  (PrimE (RelPrim Nat GtOp) (VarE i) (LitE (NatLit 0)))
                  (BlockE
                    (LetD
                      WildP
                      (AssignE
                        (VarLE text)
                        (PrimE (BinPrim Text CatOp) (VarE char) (VarE text))
                      )
                    )
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat SubOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE (BreakPrim $done/1) (PrimE TupPrim))
                )
              )
            )
          )
          (VarE text)
        )
        (VarE t)
      )
    )
  )
  (LetD
    (VarP @digits_dec)
    (FuncE
      @digits_dec
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE (BinPrim Int AddOp) (VarE x) (LitE (IntLit 48)))
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Nat)
    (FuncE
      @text_of_Nat
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_num)
        (PrimE
          TupPrim
          (VarE x)
          (LitE (NatLit 10))
          (LitE (NatLit 3))
          (VarE @digits_dec)
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Int)
    (FuncE
      @text_of_Int
      Local
      Returns
      (params x)
      Text
      (IfE
        (PrimE (RelPrim Int EqOp) (VarE x) (LitE (IntLit 0)))
        (LitE (TextLit 0))
        (PrimE
          (BinPrim Text CatOp)
          (IfE
            (PrimE (RelPrim Int LtOp) (VarE x) (LitE (IntLit 0)))
            (LitE (TextLit -))
            (LitE (TextLit +))
          )
          (PrimE (CallPrim) (VarE @text_of_Nat) (PrimE abs (VarE x)))
        )
      )
    )
  )
  (LetD
    (VarP @digits_hex)
    (FuncE
      @digits_hex
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE
              (BinPrim Int AddOp)
              (VarE x)
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE x) (LitE (NatLit 10)))
                (LitE (IntLit 48))
                (LitE (IntLit 55))
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @int64ToInt)
    (FuncE
      @int64ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int64 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int32ToInt)
    (FuncE
      @int32ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int32 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int16ToInt)
    (FuncE
      @int16ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int16 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int8ToInt)
    (FuncE
      @int8ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int8 Int) (VarE n))
    )
  )
  (LetD
    (VarP @nat64ToNat)
    (FuncE
      @nat64ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat64 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat32ToNat)
    (FuncE
      @nat32ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat32 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat16ToNat)
    (FuncE
      @nat16ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat16 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat8ToNat)
    (FuncE
      @nat8ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat8 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @text_of_Nat8)
    (FuncE
      @text_of_Nat8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat8ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat16)
    (FuncE
      @text_of_Nat16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat16ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat32)
    (FuncE
      @text_of_Nat32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat32ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat64)
    (FuncE
      @text_of_Nat64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat64ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int8)
    (FuncE
      @text_of_Int8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int8ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int16)
    (FuncE
      @text_of_Int16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int16ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int32)
    (FuncE
      @text_of_Int32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int32ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int64)
    (FuncE
      @text_of_Int64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int64ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Float)
    (FuncE
      @text_of_Float
      Local
      Returns
      (params x)
      Text
      (PrimE Float->Text (VarE x))
    )
  )
  (LetD
    (VarP @text_of_Bool)
    (FuncE
      @text_of_Bool
      Local
      Returns
      (params b)
      Text
      (IfE (VarE b) (LitE (TextLit true)) (LitE (TextLit false)))
    )
  )
  (LetD
    (VarP @text_of_Text)
    (FuncE
      @text_of_Text
      Local
      Returns
      (params t)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE (BinPrim Text CatOp) (LitE (TextLit ")) (VarE t))
        (LitE (TextLit "))
      )
    )
  )
  (LetD
    (VarP @text_of_Char)
    (FuncE
      @text_of_Char
      Local
      Returns
      (params c)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE
          (BinPrim Text CatOp)
          (LitE (TextLit '))
          (PrimE conv_Char_Text (VarE c))
        )
        (LitE (TextLit '))
      )
    )
  )
  (LetD
    (VarP @text_of_Blob)
    (FuncE
      @text_of_Blob
      Local
      Returns
      (params blob)
      Text
      (BlockE
        (VarD t Text (LitE (TextLit ")))
        (LetD
          WildP
          (BlockE
            (LetD
              (VarP $nxt/0)
              (PrimE
                (DotPrim next)
                (PrimE
                  (CallPrim)
                  (PrimE (CallPrim) (VarE @blob_vals) (VarE blob))
                  (PrimE TupPrim)
                )
              )
            )
            (LabelE
              $done/2
              ()
              (LoopE
                (SwitchE
                  (PrimE (CallPrim) (VarE $nxt/0) (PrimE TupPrim))
                  (case
                    (LitP NullLit)
                    (PrimE (BreakPrim $done/2) (PrimE TupPrim))
                  )
                  (case
                    (OptP (VarP b))
                    (AssignE
                      (VarLE t)
                      (PrimE
                        (BinPrim Text CatOp)
                        (VarE t)
                        (PrimE
                          (BinPrim Text CatOp)
                          (LitE (TextLit \))
                          (PrimE
                            (CallPrim)
                            (VarE @left_pad)
                            (PrimE
                              TupPrim
                              (LitE (NatLit 2))
                              (LitE (TextLit 0))
                              (PrimE
                                (CallPrim)
                                (VarE @text_of_num)
                                (PrimE
                                  TupPrim
                                  (PrimE (CallPrim) (VarE @nat8ToNat) (VarE b))
                                  (LitE (NatLit 16))
                                  (LitE (NatLit 0))
                                  (VarE @digits_hex)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE t)
            (PrimE (BinPrim Text CatOp) (VarE t) (LitE (TextLit ")))
          )
        )
        (PrimE RetPrim (VarE t))
      )
    )
  )
  (LetD
    (VarP @text_has_parens)
    (FuncE
      @text_has_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case (OptP (LitP (CharLit 40))) (LitE (BoolLit true)))
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_needs_parens)
    (FuncE
      @text_needs_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case
          (OptP
            (AltP
              (AltP
                (AltP (LitP (CharLit 43)) (LitP (CharLit 45)))
                (LitP (CharLit 63))
              )
              (LitP (CharLit 35))
            )
          )
          (LitE (BoolLit true))
        )
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_of_option)
    (FuncE
      @text_of_option
      Local
      Returns
      (T__99 Any)
      (params f x)
      Text
      (SwitchE
        (VarE x)
        (case
          (OptP (VarP y))
          (BlockE
            (LetD (VarP fy) (PrimE (CallPrim) (VarE f) (VarE y)))
            (IfE
              (PrimE (CallPrim) (VarE @text_needs_parens) (VarE fy))
              (PrimE
                (BinPrim Text CatOp)
                (PrimE (BinPrim Text CatOp) (LitE (TextLit ?()) (VarE fy))
                (LitE (TextLit )))
              )
              (PrimE (BinPrim Text CatOp) (LitE (TextLit ?)) (VarE fy))
            )
          )
        )
        (case (LitP NullLit) (LitE (TextLit null)))
      )
    )
  )
  (LetD
    (VarP @text_of_variant)
    (FuncE
      @text_of_variant
      Local
      Returns
      (T__100 Any)
      (params l f x)
      Text
      (BlockE
        (LetD (VarP fx) (PrimE (CallPrim) (VarE f) (VarE x)))
        (IfE
          (PrimE (RelPrim Text EqOp) (VarE fx) (LitE (TextLit ())))
          (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
          (IfE
            (PrimE (CallPrim) (VarE @text_has_parens) (VarE fx))
            (PrimE
              (BinPrim Text CatOp)
              (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
              (VarE fx)
            )
            (PrimE
              (BinPrim Text CatOp)
              (PrimE
                (BinPrim Text CatOp)
                (PrimE
                  (BinPrim Text CatOp)
                  (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
                  (LitE (TextLit ())
                )
                (VarE fx)
              )
              (LitE (TextLit )))
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_array)
    (FuncE
      @text_of_array
      Local
      Returns
      (T__101 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/0) (VarE xs))
            (LetD (VarP $last/0) (PrimE GetLastArrayOffset (VarE $arr/0)))
            (VarD $indx/0 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/0) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/3
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/0) (VarE $indx/0))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (AssignE (VarLE first) (LitE (BoolLit false)))
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/0) (VarE $last/0))
                      (PrimE (BreakPrim $done/3) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/0)
                        (PrimE NextArrayOffset (VarE $indx/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @text_of_array_mut)
    (FuncE
      @text_of_array_mut
      Local
      Returns
      (T__102 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [var)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/1) (VarE xs))
            (LetD (VarP $last/1) (PrimE GetLastArrayOffset (VarE $arr/1)))
            (VarD $indx/1 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/1) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/4
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/1) (VarE $indx/1))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (BlockE
                              (LetD
                                WildP
                                (AssignE (VarLE first) (LitE (BoolLit false)))
                              )
                              (AssignE
                                (VarLE text)
                                (PrimE
                                  (BinPrim Text CatOp)
                                  (VarE text)
                                  (LitE (TextLit  ))
                                )
                              )
                            )
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/1) (VarE $last/1))
                      (PrimE (BreakPrim $done/4) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/1)
                        (PrimE NextArrayOffset (VarE $indx/1))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @equal_array)
    (FuncE
      @equal_array
      Local
      Returns
      (T__103 Any)
      (params eq a b)
      Bool
      (BlockE
        (LetD
          WildP
          (IfE
            (PrimE
              (RelPrim Bool EqOp)
              (PrimE
                (RelPrim Nat EqOp)
                (PrimE array_len (VarE a))
                (PrimE array_len (VarE b))
              )
              (LitE (BoolLit false))
            )
            (PrimE RetPrim (LitE (BoolLit false)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD (VarP s) (PrimE array_len (VarE a)))
        (LetD
          WildP
          (LabelE
            $done/5
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE i) (VarE s))
                (BlockE
                  (LetD
                    WildP
                    (IfE
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (CallPrim)
                          (VarE eq)
                          (PrimE
                            TupPrim
                            (PrimE IdxPrim (VarE a) (VarE i))
                            (PrimE IdxPrim (VarE b) (VarE i))
                          )
                        )
                        (LitE (BoolLit false))
                      )
                      (PrimE RetPrim (LitE (BoolLit false)))
                      (PrimE TupPrim)
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/5) (PrimE TupPrim))
              )
            )
          )
        )
        (PrimE RetPrim (LitE (BoolLit true)))
      )
    )
  )
  (VarD @refund Nat (LitE (NatLit 0)))
  (LetD
    (VarP @reset_refund)
    (FuncE
      @reset_refund
      Local
      Returns
      ()
      (AssignE (VarLE @refund) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @getSystemRefund)
    (FuncE
      @getSystemRefund
      Local
      Returns
      @Refund__1
      (PrimE RetPrim (PrimE SystemCyclesRefundedPrim))
    )
  )
  (LetD (VarP @cleanup) (FuncE @cleanup Local Returns () (PrimE TupPrim)))
  (LetD
    (VarP @new_async)
    (FuncE
      @new_async
      Local
      Returns
      (T__104 Any__2)
      (@Async__1<T__104>, @Cont__1<T__104>, @Cont__1<Error>, @CleanCont__1)
      (BlockE
        (LetD
          (VarP w_null)
          (FuncE
            @anon-func-317.16
            Local
            Returns
            (params r t)
            ()
            (PrimE TupPrim)
          )
        )
        (LetD
          (VarP r_null)
          (FuncE
            @anon-func-318.16
            Local
            Returns
            (params $ignored0/0)
            ()
            (PrimE TupPrim)
          )
        )
        (VarD result ?@Result__1<T__104> (LitE NullLit))
        (VarD ws (@Refund__1, T__104) -> () (VarE w_null))
        (VarD rs Error -> () (VarE r_null))
        (LetD
          (VarP getRefund)
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE @cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
        )
        (LetD
          (VarP fulfill)
          (FuncE
            fulfill
            Local
            Returns
            (params t)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP refund)
                    (IfE
                      (VarE getRefund)
                      (PrimE (CallPrim) (VarE @getSystemRefund) (PrimE TupPrim))
                      (LitE (NatLit 0))
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE
                        OptPrim
                        (PrimE (TagE ok) (PrimE TupPrim (VarE refund) (VarE t)))
                      )
                    )
                  )
                  (LetD (VarP ws_) (VarE ws))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE
                    (CallPrim)
                    (VarE ws_)
                    (PrimE TupPrim (VarE refund) (VarE t))
                  )
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (LetD
          (VarP fail)
          (FuncE
            fail
            Local
            Returns
            (params e)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE OptPrim (PrimE (TagE error) (VarE e)))
                    )
                  )
                  (LetD (VarP rs_) (VarE rs))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE (CallPrim) (VarE rs_) (VarE e))
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (VarD cleanup () -> () (VarE @cleanup))
        (LetD
          (VarP clean)
          (FuncE
            clean
            Local
            Returns
            ()
            (PrimE (CallPrim) (VarE cleanup) (PrimE TupPrim))
          )
        )
        (LetD
          (VarP enqueue)
          (FuncE
            enqueue
            Local
            Returns
            (params k r b)
            {#schedule : () -> (); #suspend}
            (BlockE
              (LetD WildP (AssignE (VarLE cleanup) (VarE b)))
              (SwitchE
                (VarE result)
                (case
                  (LitP NullLit)
                  (BlockE
                    (LetD (VarP ws_) (VarE ws))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE ws)
                        (FuncE
                          @anon-func-365.15
                          Local
                          Returns
                          (params r t)
                          ()
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE ws_)
                                (PrimE TupPrim (VarE r) (VarE t))
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                            (PrimE (CallPrim) (VarE k) (VarE t))
                          )
                        )
                      )
                    )
                    (LetD (VarP rs_) (VarE rs))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE rs)
                        (FuncE
                          @anon-func-372.15
                          Local
                          Returns
                          (params e)
                          ()
                          (BlockE
                            (LetD WildP (PrimE (CallPrim) (VarE rs_) (VarE e)))
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_refund)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE (CallPrim) (VarE r) (VarE e))
                          )
                        )
                      )
                    )
                    (PrimE (TagE suspend) (PrimE TupPrim))
                  )
                )
                (case
                  (OptP (TagP ok (TupP (VarP r) (VarP t))))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-381.20
                      Local
                      Returns
                      ()
                      (BlockE
                        (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                        (PrimE (CallPrim) (VarE k) (VarE t))
                      )
                    )
                  )
                )
                (case
                  (OptP (TagP error (VarP e)))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-384.20
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE r) (VarE e))
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim (VarE enqueue) (VarE fulfill) (VarE fail) (VarE clean))
      )
    )
  )
  (LetD (VarP @ManagementCanister) (NewObjE Module module {}))
  (LetD
    (VarP @ic00)
    (PrimE
      (ActorOfIdBlob
        actor {create_canister : shared {sender_canister_version : ?Nat64; settings : ?canister_settings__1} -> async {canister_id : Principal}; install_code : shared {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1} -> async ()}
      )
      (PrimE BlobOfIcUrl (LitE (TextLit aaaaa-aa)))
    )
  )
  (LetD
    (VarP @install_actor_helper)
    (FuncE
      @install_actor_helper
      Local
      Returns
      ($__260 Any)
      (params install_arg wasm_module arg)
      async*<$__260> Principal
      (AsyncE*
        ($@anon-async*-427.24__2 Any)
        (BlockE
          (LetD
            (TupP (VarP mode) (VarP canister_id))
            (SwitchE
              (VarE install_arg)
              (case
                (TagP new (VarP settings))
                (BlockE
                  (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
                  (LetD
                    (VarP accepted)
                    (PrimE SystemCyclesAcceptPrim (VarE available))
                  )
                  (LetD
                    (VarP sender_canister_version)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE @cycles)
                      (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
                    )
                  )
                  (LetD
                    (ObjP (canister_id (VarP canister_id)))
                    (PrimE
                      AwaitPrim
                      (PrimE
                        (CallPrim $@anon-async*-427.24__2)
                        (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                        (BlockE
                          (LetD (VarP $base/0) (VarE settings))
                          (LetD
                            (VarP $sender_canister_version/0)
                            (VarE sender_canister_version)
                          )
                          (LetD
                            (VarP $settings/0)
                            (PrimE (DotPrim settings) (VarE $base/0))
                          )
                          (NewObjE
                            Object
                            (settings $settings/0)
                            (sender_canister_version $sender_canister_version/0)
                            {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                          )
                        )
                      )
                    )
                  )
                  (PrimE
                    TupPrim
                    (PrimE (TagE install) (PrimE TupPrim))
                    (VarE canister_id)
                  )
                )
              )
              (case
                (TagP install (VarP principal1))
                (PrimE
                  TupPrim
                  (PrimE (TagE install) (PrimE TupPrim))
                  (VarE principal1)
                )
              )
              (case
                (TagP reinstall (VarP actor1))
                (PrimE
                  TupPrim
                  (PrimE (TagE reinstall) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor1))
                )
              )
              (case
                (TagP upgrade (VarP actor2))
                (PrimE
                  TupPrim
                  (PrimE (TagE upgrade) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor2))
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async*-427.24__2)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/0) (VarE mode))
                  (LetD (VarP $canister_id/0) (VarE canister_id))
                  (LetD (VarP $wasm_module/0) (VarE wasm_module))
                  (LetD (VarP $arg/0) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/1)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/1)
                    (arg $arg/0)
                    (wasm_module $wasm_module/0)
                    (canister_id $canister_id/0)
                    (mode $mode/0)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__260
      )
    )
  )
  (LetD
    (VarP @create_actor_helper)
    (FuncE
      @create_actor_helper
      Local
      Returns
      ($__261 Any)
      (params wasm_module arg)
      async<$__261> Principal
      (AsyncE
        ($@anon-async-463.79__2 Any)
        (BlockE
          (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
          (LetD (VarP accepted) (PrimE SystemCyclesAcceptPrim (VarE available)))
          (LetD
            (VarP sender_canister_version)
            (PrimE OptPrim (PrimE canister_version))
          )
          (LetD
            WildP
            (AssignE
              (VarLE @cycles)
              (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
            )
          )
          (LetD
            (ObjP (canister_id (VarP canister_id)))
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79__2)
                (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                (BlockE
                  (LetD (VarP $settings/1) (LitE NullLit))
                  (LetD
                    (VarP $sender_canister_version/2)
                    (VarE sender_canister_version)
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/2)
                    (settings $settings/1)
                    {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                  )
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79__2)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/1) (PrimE (TagE install) (PrimE TupPrim)))
                  (LetD (VarP $canister_id/1) (VarE canister_id))
                  (LetD (VarP $wasm_module/1) (VarE wasm_module))
                  (LetD (VarP $arg/1) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/3)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/3)
                    (arg $arg/1)
                    (wasm_module $wasm_module/1)
                    (canister_id $canister_id/1)
                    (mode $mode/1)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__261
      )
    )
  )
  (LetD
    (VarP @call_raw)
    (FuncE
      @call_raw
      Local
      Returns
      ($__262 Any)
      (params p m a)
      async<$__262> Blob
      (AsyncE
        ($@call_raw__2 Any)
        (PrimE AwaitPrim (PrimE call_raw (VarE p) (VarE m) (VarE a)))
        $__262
      )
    )
  )
  (LetD
    (VarP @call_succeeded)
    (FuncE
      @call_succeeded
      Local
      Returns
      Bool
      (PrimE
        (RelPrim Nat32 EqOp)
        (PrimE call_perform_status)
        (LitE (Nat32Lit 0))
      )
    )
  )
  (LetD
    (VarP @call_error)
    (FuncE
      @call_error
      Local
      Returns
      Error
      (BlockE
        (LetD (VarP status) (PrimE call_perform_status))
        (LetD (VarP message) (PrimE call_perform_message))
        (LetD
          (VarP code)
          (PrimE
            (TagE call_error)
            (BlockE
              (LetD (VarP $err_code/0) (VarE status))
              (NewObjE Object (err_code $err_code/0) {err_code : Nat32})
            )
          )
        )
        (PrimE
          (CastPrim ({#call_error : {err_code : Nat32}}, Text) Error)
          (PrimE TupPrim (VarE code) (VarE message))
        )
      )
    )
  )
  (VarD @timers ?@Node__1 (LitE NullLit))
  (LetD
    (VarP @prune)
    (FuncE
      @prune
      Local
      Returns
      (params n)
      ?@Node__1
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE NullLit))
        (case
          (OptP (VarP n))
          (IfE
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE
                IdxPrim
                (PrimE (DotPrim expire) (VarE n))
                (LitE (NatLit 0))
              )
              (LitE (Nat64Lit 0))
            )
            (PrimE (CallPrim) (VarE @prune) (PrimE (DotPrim post) (VarE n)))
            (PrimE
              OptPrim
              (BlockE
                (LetD (VarP $base/1) (VarE n))
                (LetD
                  (VarP $pre/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim pre) (VarE n))
                  )
                )
                (LetD
                  (VarP $post/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim post) (VarE n))
                  )
                )
                (LetD (VarP $delay/0) (PrimE (DotPrim delay) (VarE $base/1)))
                (LetD (VarP $expire/0) (PrimE (DotPrim expire) (VarE $base/1)))
                (LetD (VarP $id/0) (PrimE (DotPrim id) (VarE $base/1)))
                (LetD (VarP $job/0) (PrimE (DotPrim job) (VarE $base/1)))
                (NewObjE
                  Object
                  (job $job/0)
                  (id $id/0)
                  (expire $expire/0)
                  (delay $delay/0)
                  (post $post/0)
                  (pre $pre/0)
                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @nextExpiration)
    (FuncE
      @nextExpiration
      Local
      Returns
      (params n)
      Nat64
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE (Nat64Lit 0)))
        (case
          (OptP (VarP n))
          (BlockE
            (VarD
              exp
              Nat64
              (PrimE
                (CallPrim)
                (VarE @nextExpiration)
                (PrimE (DotPrim pre) (VarE n))
              )
            )
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                  )
                  (IfE
                    (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        (CallPrim)
                        (VarE @nextExpiration)
                        (PrimE (DotPrim post) (VarE n))
                      )
                    )
                    (PrimE TupPrim)
                  )
                )
                (PrimE TupPrim)
              )
            )
            (VarE exp)
          )
        )
      )
    )
  )
  (LetD
    (VarP @timer_helper)
    (FuncE
      @timer_helper
      Local
      Returns
      ($__263 Any)
      async<$__263> ()
      (AsyncE
        ($@timer_helper__2 Any)
        (BlockE
          (LetD
            (VarP Array_init)
            (FuncE
              Array_init
              Local
              Returns
              (T__105 Any)
              (params len x)
              [var T__105]
              (PrimE Array.init (VarE len) (VarE x))
            )
          )
          (LetD (VarP now) (PrimE SystemTimePrim))
          (VarD gathered Nat (LitE (NatLit 0)))
          (LetD
            (VarP thunks)
            (PrimE
              (CallPrim ?(() -> async ()))
              (VarE Array_init)
              (PrimE TupPrim (LitE (NatLit 10)) (LitE NullLit))
            )
          )
          (LetD
            (VarP gatherExpired)
            (FuncE
              gatherExpired
              Local
              Returns
              (params n)
              ()
              (SwitchE
                (VarE n)
                (case (LitP NullLit) (PrimE TupPrim))
                (case
                  (OptP (VarP n))
                  (BlockE
                    (LetD
                      WildP
                      (PrimE
                        (CallPrim)
                        (VarE gatherExpired)
                        (PrimE (DotPrim pre) (VarE n))
                      )
                    )
                    (LetD
                      WildP
                      (IfE
                        (IfE
                          (IfE
                            (PrimE
                              (RelPrim Nat64 GtOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                            (PrimE
                              (RelPrim Nat64 LeOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (VarE now)
                            )
                            (LitE (BoolLit false))
                          )
                          (PrimE
                            (RelPrim Nat LtOp)
                            (VarE gathered)
                            (PrimE array_len (VarE thunks))
                          )
                          (LitE (BoolLit false))
                        )
                        (BlockE
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE (VarE thunks) (VarE gathered))
                              (PrimE OptPrim (PrimE (DotPrim job) (VarE n)))
                            )
                          )
                          (LetD
                            WildP
                            (SwitchE
                              (PrimE (DotPrim delay) (VarE n))
                              (case
                                (AltP (LitP NullLit) (OptP (LitP (Nat64Lit 0))))
                                (PrimE TupPrim)
                              )
                              (case
                                (OptP (VarP delay))
                                (BlockE
                                  (LetD
                                    (VarP expire)
                                    (PrimE
                                      (BinPrim Nat64 AddOp)
                                      (PrimE
                                        IdxPrim
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (PrimE
                                        (BinPrim Nat64 MulOp)
                                        (VarE delay)
                                        (PrimE
                                          (BinPrim Nat64 AddOp)
                                          (LitE (Nat64Lit 1))
                                          (PrimE
                                            (BinPrim Nat64 DivOp)
                                            (PrimE
                                              (BinPrim Nat64 SubOp)
                                              (VarE now)
                                              (PrimE
                                                IdxPrim
                                                (PrimE
                                                  (DotPrim expire)
                                                  (VarE n)
                                                )
                                                (LitE (NatLit 0))
                                              )
                                            )
                                            (VarE delay)
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (LetD
                                    WildP
                                    (AssignE
                                      (IdxLE
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (LitE (Nat64Lit 0))
                                    )
                                  )
                                  (LetD
                                    (VarP reinsert)
                                    (FuncE
                                      reinsert
                                      Local
                                      Returns
                                      (params m)
                                      @Node__1
                                      (SwitchE
                                        (VarE m)
                                        (case
                                          (LitP NullLit)
                                          (BlockE
                                            (LetD (VarP $base/2) (VarE n))
                                            (LetD
                                              (VarP $expire/1)
                                              (PrimE
                                                (ArrayPrim Var Nat64)
                                                (VarE expire)
                                              )
                                            )
                                            (LetD (VarP $pre/1) (LitE NullLit))
                                            (LetD (VarP $post/1) (LitE NullLit))
                                            (LetD
                                              (VarP $delay/1)
                                              (PrimE
                                                (DotPrim delay)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $id/1)
                                              (PrimE
                                                (DotPrim id)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $job/1)
                                              (PrimE
                                                (DotPrim job)
                                                (VarE $base/2)
                                              )
                                            )
                                            (NewObjE
                                              Object
                                              (job $job/1)
                                              (id $id/1)
                                              (delay $delay/1)
                                              (post $post/1)
                                              (pre $pre/1)
                                              (expire $expire/1)
                                              {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : Null; pre : Null}
                                            )
                                          )
                                        )
                                        (case
                                          (OptP (VarP m))
                                          (BlockE
                                            (LetD
                                              WildP
                                              (PrimE
                                                AssertPrim
                                                (PrimE
                                                  (RelPrim Bool EqOp)
                                                  (PrimE
                                                    (RelPrim Nat64 EqOp)
                                                    (PrimE
                                                      IdxPrim
                                                      (PrimE
                                                        (DotPrim expire)
                                                        (VarE m)
                                                      )
                                                      (LitE (NatLit 0))
                                                    )
                                                    (LitE (Nat64Lit 0))
                                                  )
                                                  (LitE (BoolLit false))
                                                )
                                              )
                                            )
                                            (IfE
                                              (PrimE
                                                (RelPrim Nat64 LtOp)
                                                (VarE expire)
                                                (PrimE
                                                  IdxPrim
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE m)
                                                  )
                                                  (LitE (NatLit 0))
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/4) (VarE m))
                                                (LetD
                                                  (VarP $pre/3)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim pre)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/3)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/3)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/3)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/3)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $post/3)
                                                  (PrimE
                                                    (DotPrim post)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (post $post/3)
                                                  (job $job/3)
                                                  (id $id/3)
                                                  (expire $expire/3)
                                                  (delay $delay/3)
                                                  (pre $pre/3)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/3) (VarE m))
                                                (LetD
                                                  (VarP $post/2)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim post)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/2)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/2)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/2)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/2)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $pre/2)
                                                  (PrimE
                                                    (DotPrim pre)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (pre $pre/2)
                                                  (job $job/2)
                                                  (id $id/2)
                                                  (expire $expire/2)
                                                  (delay $delay/2)
                                                  (post $post/2)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (AssignE
                                    (VarLE @timers)
                                    (PrimE
                                      OptPrim
                                      (PrimE
                                        (CallPrim)
                                        (VarE reinsert)
                                        (PrimE
                                          (CallPrim)
                                          (VarE @prune)
                                          (VarE @timers)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                          )
                          (AssignE
                            (VarLE gathered)
                            (PrimE
                              (BinPrim Nat AddOp)
                              (VarE gathered)
                              (LitE (NatLit 1))
                            )
                          )
                        )
                        (PrimE TupPrim)
                      )
                    )
                    (PrimE
                      (CallPrim)
                      (VarE gatherExpired)
                      (PrimE (DotPrim post) (VarE n))
                    )
                  )
                )
              )
            )
          )
          (LetD WildP (PrimE (CallPrim) (VarE gatherExpired) (VarE @timers)))
          (LetD
            (VarP exp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
          )
          (LetD
            WildP
            (BlockE
              (LetD WildP (PrimE global_timer_set (VarE exp)))
              (PrimE TupPrim)
            )
          )
          (LetD
            WildP
            (IfE
              (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
              (AssignE (VarLE @timers) (LitE NullLit))
              (PrimE TupPrim)
            )
          )
          (BlockE
            (LetD (VarP $arr/2) (VarE thunks))
            (LetD (VarP $last/2) (PrimE GetLastArrayOffset (VarE $arr/2)))
            (VarD $indx/2 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/2) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/6
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP o)
                      (PrimE DerefArrayOffset (VarE $arr/2) (VarE $indx/2))
                    )
                    (LetD
                      WildP
                      (SwitchE
                        (VarE o)
                        (case
                          (OptP (VarP thunk))
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim $@timer_helper__2)
                                (VarE thunk)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE TupPrim)
                          )
                        )
                        (case WildP (PrimE TupPrim))
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/2) (VarE $last/2))
                      (PrimE (BreakPrim $done/6) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/2)
                        (PrimE NextArrayOffset (VarE $indx/2))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        $__263
      )
    )
  )
  (VarD @lastTimerId Nat (LitE (NatLit 0)))
  (LetD
    (VarP @setTimer)
    (FuncE
      @setTimer
      Local
      Returns
      ($__264 Any)
      (params delayNanos recurring job)
      Nat
      (BlockE
        (LetD
          WildP
          (AssignE
            (VarLE @lastTimerId)
            (PrimE (BinPrim Nat AddOp) (VarE @lastTimerId) (LitE (NatLit 1)))
          )
        )
        (LetD (VarP id) (VarE @lastTimerId))
        (LetD (VarP now) (PrimE SystemTimePrim))
        (LetD
          (VarP expire)
          (PrimE (BinPrim Nat64 AddOp) (VarE now) (VarE delayNanos))
        )
        (LetD
          (VarP delay)
          (IfE
            (VarE recurring)
            (PrimE OptPrim (VarE delayNanos))
            (LitE NullLit)
          )
        )
        (LetD
          (VarP insert)
          (FuncE
            insert
            Local
            Returns
            (params n)
            @Node__1
            (SwitchE
              (VarE n)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP $expire/4)
                    (PrimE (ArrayPrim Var Nat64) (VarE expire))
                  )
                  (LetD (VarP $id/4) (VarE id))
                  (LetD (VarP $delay/4) (VarE delay))
                  (LetD (VarP $job/4) (VarE job))
                  (LetD (VarP $pre/4) (LitE NullLit))
                  (LetD (VarP $post/4) (LitE NullLit))
                  (NewObjE
                    Object
                    (post $post/4)
                    (pre $pre/4)
                    (job $job/4)
                    (delay $delay/4)
                    (id $id/4)
                    (expire $expire/4)
                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                  )
                )
              )
              (case
                (OptP (VarP n))
                (BlockE
                  (LetD
                    WildP
                    (PrimE
                      AssertPrim
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (RelPrim Nat64 EqOp)
                          (PrimE
                            IdxPrim
                            (PrimE (DotPrim expire) (VarE n))
                            (LitE (NatLit 0))
                          )
                          (LitE (Nat64Lit 0))
                        )
                        (LitE (BoolLit false))
                      )
                    )
                  )
                  (IfE
                    (PrimE
                      (RelPrim Nat64 LtOp)
                      (VarE expire)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/6) (VarE n))
                      (LetD
                        (VarP $pre/6)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim pre) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/6)
                        (PrimE (DotPrim delay) (VarE $base/6))
                      )
                      (LetD
                        (VarP $expire/6)
                        (PrimE (DotPrim expire) (VarE $base/6))
                      )
                      (LetD (VarP $id/6) (PrimE (DotPrim id) (VarE $base/6)))
                      (LetD (VarP $job/6) (PrimE (DotPrim job) (VarE $base/6)))
                      (LetD
                        (VarP $post/6)
                        (PrimE (DotPrim post) (VarE $base/6))
                      )
                      (NewObjE
                        Object
                        (post $post/6)
                        (job $job/6)
                        (id $id/6)
                        (expire $expire/6)
                        (delay $delay/6)
                        (pre $pre/6)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/5) (VarE n))
                      (LetD
                        (VarP $post/5)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/5)
                        (PrimE (DotPrim delay) (VarE $base/5))
                      )
                      (LetD
                        (VarP $expire/5)
                        (PrimE (DotPrim expire) (VarE $base/5))
                      )
                      (LetD (VarP $id/5) (PrimE (DotPrim id) (VarE $base/5)))
                      (LetD (VarP $job/5) (PrimE (DotPrim job) (VarE $base/5)))
                      (LetD (VarP $pre/5) (PrimE (DotPrim pre) (VarE $base/5)))
                      (NewObjE
                        Object
                        (pre $pre/5)
                        (job $job/5)
                        (id $id/5)
                        (expire $expire/5)
                        (delay $delay/5)
                        (post $post/5)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE
              OptPrim
              (PrimE
                (CallPrim)
                (VarE insert)
                (PrimE (CallPrim) (VarE @prune) (VarE @timers))
              )
            )
          )
        )
        (LetD
          (VarP exp)
          (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
        )
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
            (AssignE (VarLE @timers) (LitE NullLit))
            (PrimE TupPrim)
          )
        )
        (LetD
          WildP
          (BlockE
            (LetD WildP (PrimE global_timer_set (VarE exp)))
            (PrimE TupPrim)
          )
        )
        (VarE id)
      )
    )
  )
  (LetD
    (VarP @cancelTimer)
    (FuncE
      @cancelTimer
      Local
      Returns
      (params id)
      ()
      (BlockE
        (LetD
          (VarP graft)
          (FuncE
            graft
            Local
            Returns
            (params onto branch)
            ?@Node__1
            (SwitchE
              (PrimE TupPrim (VarE onto) (VarE branch))
              (case (TupP (LitP NullLit) (LitP NullLit)) (LitE NullLit))
              (case (TupP (LitP NullLit) WildP) (VarE branch))
              (case (TupP WildP (LitP NullLit)) (VarE onto))
              (case
                (TupP (OptP (VarP onto)) WildP)
                (PrimE
                  OptPrim
                  (BlockE
                    (LetD (VarP $base/7) (VarE onto))
                    (LetD
                      (VarP $post/7)
                      (PrimE
                        (CallPrim)
                        (VarE graft)
                        (PrimE
                          TupPrim
                          (PrimE (DotPrim post) (VarE onto))
                          (VarE branch)
                        )
                      )
                    )
                    (LetD
                      (VarP $delay/7)
                      (PrimE (DotPrim delay) (VarE $base/7))
                    )
                    (LetD
                      (VarP $expire/7)
                      (PrimE (DotPrim expire) (VarE $base/7))
                    )
                    (LetD (VarP $id/7) (PrimE (DotPrim id) (VarE $base/7)))
                    (LetD (VarP $job/7) (PrimE (DotPrim job) (VarE $base/7)))
                    (LetD (VarP $pre/7) (PrimE (DotPrim pre) (VarE $base/7)))
                    (NewObjE
                      Object
                      (pre $pre/7)
                      (job $job/7)
                      (id $id/7)
                      (expire $expire/7)
                      (delay $delay/7)
                      (post $post/7)
                      {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          (VarP hunt)
          (FuncE
            hunt
            Local
            Returns
            (params n)
            ?@Node__1
            (SwitchE
              (VarE n)
              (case (LitP NullLit) (VarE n))
              (case
                (OptP
                  (ObjP (id (VarP node)) (pre (VarP pre)) (post (VarP post)))
                )
                (IfE
                  (PrimE (RelPrim Nat EqOp) (VarE node) (VarE id))
                  (PrimE
                    (CallPrim)
                    (VarE graft)
                    (PrimE TupPrim (VarE pre) (VarE post))
                  )
                  (LabelE
                    !
                    ?@Node__1
                    (PrimE
                      OptPrim
                      (BlockE
                        (LetD
                          (VarP $base/8)
                          (SwitchE
                            (VarE n)
                            (case
                              (LitP NullLit)
                              (PrimE (BreakPrim !) (LitE NullLit))
                            )
                            (case (OptP (VarP $v/1)) (VarE $v/1))
                          )
                        )
                        (LetD
                          (VarP $pre/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE pre))
                        )
                        (LetD
                          (VarP $post/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE post))
                        )
                        (LetD
                          (VarP $delay/8)
                          (PrimE (DotPrim delay) (VarE $base/8))
                        )
                        (LetD
                          (VarP $expire/8)
                          (PrimE (DotPrim expire) (VarE $base/8))
                        )
                        (LetD (VarP $id/8) (PrimE (DotPrim id) (VarE $base/8)))
                        (LetD
                          (VarP $job/8)
                          (PrimE (DotPrim job) (VarE $base/8))
                        )
                        (NewObjE
                          Object
                          (job $job/8)
                          (id $id/8)
                          (expire $expire/8)
                          (delay $delay/8)
                          (post $post/8)
                          (pre $pre/8)
                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE (CallPrim) (VarE hunt) (VarE @timers))
          )
        )
        (IfE
          (PrimE
            (RelPrim Nat64 EqOp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
            (LitE (Nat64Lit 0))
          )
          (BlockE
            (LetD
              WildP
              (BlockE
                (LetD WildP (PrimE global_timer_set (LitE (Nat64Lit 0))))
                (PrimE TupPrim)
              )
            )
            (AssignE (VarLE @timers) (LitE NullLit))
          )
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @set_global_timer)
    (FuncE
      @set_global_timer
      Local
      Returns
      (params time)
      ()
      (BlockE (LetD WildP (PrimE global_timer_set (VarE time))) (PrimE TupPrim))
    )
  )
  (LetD
    (VarP file$@prim)
    (BlockE
      (LetD (VarP Types) (NewObjE Module module {}))
      (LetD
        (VarP abs)
        (FuncE abs Local Returns (params x) Nat (PrimE abs (VarE x)))
      )
      (LetD
        (VarP shiftLeft)
        (FuncE
          shiftLeft
          Local
          Returns
          (params x shift)
          Nat
          (PrimE lsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP shiftRight)
        (FuncE
          shiftRight
          Local
          Returns
          (params x shift)
          Nat
          (PrimE rsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP idlHash)
        (FuncE idlHash Local Returns (params x) Nat32 (PrimE idlHash (VarE x)))
      )
      (LetD
        (VarP debugPrint)
        (FuncE debugPrint Local Returns (params x) () (PrimE print (VarE x)))
      )
      (LetD
        (VarP debugPrintNat)
        (FuncE
          debugPrintNat
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Nat) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintInt)
        (FuncE
          debugPrintInt
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Int) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintChar)
        (FuncE
          debugPrintChar
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE charToText) (VarE x))
          )
        )
      )
      (LetD
        (VarP trap)
        (FuncE trap Local Returns (params x) None__2 (PrimE trap (VarE x)))
      )
      (LetD
        (VarP rts_version)
        (FuncE rts_version Local Returns Text (PrimE rts_version))
      )
      (LetD
        (VarP rts_memory_size)
        (FuncE rts_memory_size Local Returns Nat (PrimE rts_memory_size))
      )
      (LetD
        (VarP rts_heap_size)
        (FuncE rts_heap_size Local Returns Nat (PrimE rts_heap_size))
      )
      (LetD
        (VarP rts_total_allocation)
        (FuncE
          rts_total_allocation
          Local
          Returns
          Nat
          (PrimE rts_total_allocation)
        )
      )
      (LetD
        (VarP rts_reclaimed)
        (FuncE rts_reclaimed Local Returns Nat (PrimE rts_reclaimed))
      )
      (LetD
        (VarP rts_max_live_size)
        (FuncE rts_max_live_size Local Returns Nat (PrimE rts_max_live_size))
      )
      (LetD
        (VarP rts_max_stack_size)
        (FuncE rts_max_stack_size Local Returns Nat (PrimE rts_max_stack_size))
      )
      (LetD
        (VarP rts_callback_table_count)
        (FuncE
          rts_callback_table_count
          Local
          Returns
          Nat
          (PrimE rts_callback_table_count)
        )
      )
      (LetD
        (VarP rts_callback_table_size)
        (FuncE
          rts_callback_table_size
          Local
          Returns
          Nat
          (PrimE rts_callback_table_size)
        )
      )
      (LetD
        (VarP rts_mutator_instructions)
        (FuncE
          rts_mutator_instructions
          Local
          Returns
          Nat
          (PrimE rts_mutator_instructions)
        )
      )
      (LetD
        (VarP rts_collector_instructions)
        (FuncE
          rts_collector_instructions
          Local
          Returns
          Nat
          (PrimE rts_collector_instructions)
        )
      )
      (LetD
        (VarP rts_stable_memory_size)
        (FuncE
          rts_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_stable_memory_size)
        )
      )
      (LetD
        (VarP rts_logical_stable_memory_size)
        (FuncE
          rts_logical_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_logical_stable_memory_size)
        )
      )
      (LetD (VarP int64ToInt) (VarE @int64ToInt))
      (LetD (VarP int32ToInt) (VarE @int32ToInt))
      (LetD (VarP int16ToInt) (VarE @int16ToInt))
      (LetD (VarP int8ToInt) (VarE @int8ToInt))
      (LetD (VarP nat64ToNat) (VarE @nat64ToNat))
      (LetD (VarP nat32ToNat) (VarE @nat32ToNat))
      (LetD (VarP nat16ToNat) (VarE @nat16ToNat))
      (LetD (VarP nat8ToNat) (VarE @nat8ToNat))
      (LetD
        (VarP intToInt64)
        (FuncE
          intToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32)
        (FuncE
          intToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16)
        (FuncE
          intToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8)
        (FuncE
          intToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP natToNat64)
        (FuncE
          natToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat Nat64) (VarE n))
        )
      )
      (LetD
        (VarP natToNat32)
        (FuncE
          natToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat Nat32) (VarE n))
        )
      )
      (LetD
        (VarP natToNat16)
        (FuncE
          natToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat Nat16) (VarE n))
        )
      )
      (LetD
        (VarP natToNat8)
        (FuncE
          natToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat Nat8) (VarE n))
        )
      )
      (LetD
        (VarP intToInt64Wrap)
        (FuncE
          intToInt64Wrap
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32Wrap)
        (FuncE
          intToInt32Wrap
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16Wrap)
        (FuncE
          intToInt16Wrap
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8Wrap)
        (FuncE
          intToInt8Wrap
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP intToNat64Wrap)
        (FuncE
          intToNat64Wrap
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int Nat64) (VarE n))
        )
      )
      (LetD
        (VarP intToNat32Wrap)
        (FuncE
          intToNat32Wrap
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int Nat32) (VarE n))
        )
      )
      (LetD
        (VarP intToNat16Wrap)
        (FuncE
          intToNat16Wrap
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int Nat16) (VarE n))
        )
      )
      (LetD
        (VarP intToNat8Wrap)
        (FuncE
          intToNat8Wrap
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int64ToNat64)
        (FuncE
          int64ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int64 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToInt64)
        (FuncE
          nat64ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Nat64 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int32ToNat32)
        (FuncE
          int32ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int32 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToInt32)
        (FuncE
          nat32ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Nat32 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int16ToNat16)
        (FuncE
          int16ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int16 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToInt16)
        (FuncE
          nat16ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Nat16 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int8ToNat8)
        (FuncE
          int8ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int8 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToInt8)
        (FuncE
          nat8ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Nat8 Int8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToNat16)
        (FuncE
          nat8ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat8 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat32)
        (FuncE
          nat16ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat16 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat64)
        (FuncE
          nat32ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat32 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToNat32)
        (FuncE
          nat64ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat64 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat16)
        (FuncE
          nat32ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat32 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat8)
        (FuncE
          nat16ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat16 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int8ToInt16)
        (FuncE
          int8ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int8 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt32)
        (FuncE
          int16ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int16 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt64)
        (FuncE
          int32ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int32 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int64ToInt32)
        (FuncE
          int64ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int64 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt16)
        (FuncE
          int32ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int32 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt8)
        (FuncE
          int16ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int16 Int8) (VarE n))
        )
      )
      (LetD
        (VarP charToNat32)
        (FuncE
          charToNat32
          Local
          Returns
          (params c)
          Nat32
          (PrimE (NumConvWrapPrim Char Nat32) (VarE c))
        )
      )
      (LetD
        (VarP nat32ToChar)
        (FuncE
          nat32ToChar
          Local
          Returns
          (params w)
          Char
          (PrimE (NumConvTrapPrim Nat32 Char) (VarE w))
        )
      )
      (LetD
        (VarP charToText)
        (FuncE
          charToText
          Local
          Returns
          (params c)
          Text
          (PrimE conv_Char_Text (VarE c))
        )
      )
      (LetD
        (VarP charToUpper)
        (FuncE
          charToUpper
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_upper (VarE c))
        )
      )
      (LetD
        (VarP charToLower)
        (FuncE
          charToLower
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_lower (VarE c))
        )
      )
      (LetD
        (VarP charIsWhitespace)
        (FuncE
          charIsWhitespace
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_whitespace (VarE c))
        )
      )
      (LetD
        (VarP charIsLowercase)
        (FuncE
          charIsLowercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_lowercase (VarE c))
        )
      )
      (LetD
        (VarP charIsUppercase)
        (FuncE
          charIsUppercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_uppercase (VarE c))
        )
      )
      (LetD
        (VarP charIsAlphabetic)
        (FuncE
          charIsAlphabetic
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_alphabetic (VarE c))
        )
      )
      (LetD
        (VarP blobCompare)
        (FuncE
          blobCompare
          Local
          Returns
          (params b1 b2)
          Int8
          (PrimE blob_compare (VarE b1) (VarE b2))
        )
      )
      (LetD
        (VarP hashBlob)
        (FuncE
          hashBlob
          Local
          Returns
          (params b)
          Nat32
          (PrimE crc32Hash (VarE b))
        )
      )
      (LetD
        (VarP decodeUtf8)
        (FuncE
          decodeUtf8
          Local
          Returns
          (params b)
          ?Text
          (PrimE DecodeUtf8 (VarE b))
        )
      )
      (LetD
        (VarP encodeUtf8)
        (FuncE
          encodeUtf8
          Local
          Returns
          (params t)
          Blob
          (PrimE EncodeUtf8 (VarE t))
        )
      )
      (LetD
        (VarP textCompare)
        (FuncE
          textCompare
          Local
          Returns
          (params t1 t2)
          Int8
          (PrimE text_compare (VarE t1) (VarE t2))
        )
      )
      (LetD
        (VarP textLowercase)
        (FuncE
          textLowercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_lowercase (VarE t))
        )
      )
      (LetD
        (VarP textUppercase)
        (FuncE
          textUppercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_uppercase (VarE t))
        )
      )
      (LetD
        (VarP popcntNat8)
        (FuncE
          popcntNat8
          Local
          Returns
          (params w)
          Nat8
          (PrimE popcnt8 (VarE w))
        )
      )
      (LetD
        (VarP clzNat8)
        (FuncE clzNat8 Local Returns (params w) Nat8 (PrimE clz8 (VarE w)))
      )
      (LetD
        (VarP ctzNat8)
        (FuncE ctzNat8 Local Returns (params w) Nat8 (PrimE ctz8 (VarE w)))
      )
      (LetD
        (VarP btstNat8)
        (FuncE
          btstNat8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat8 EqOp)
              (PrimE btst8 (VarE w) (VarE amount))
              (LitE (Nat8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat16)
        (FuncE
          popcntNat16
          Local
          Returns
          (params w)
          Nat16
          (PrimE popcnt16 (VarE w))
        )
      )
      (LetD
        (VarP clzNat16)
        (FuncE clzNat16 Local Returns (params w) Nat16 (PrimE clz16 (VarE w)))
      )
      (LetD
        (VarP ctzNat16)
        (FuncE ctzNat16 Local Returns (params w) Nat16 (PrimE ctz16 (VarE w)))
      )
      (LetD
        (VarP btstNat16)
        (FuncE
          btstNat16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat16 EqOp)
              (PrimE btst16 (VarE w) (VarE amount))
              (LitE (Nat16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat32)
        (FuncE
          popcntNat32
          Local
          Returns
          (params w)
          Nat32
          (PrimE popcnt32 (VarE w))
        )
      )
      (LetD
        (VarP clzNat32)
        (FuncE clzNat32 Local Returns (params w) Nat32 (PrimE clz32 (VarE w)))
      )
      (LetD
        (VarP ctzNat32)
        (FuncE ctzNat32 Local Returns (params w) Nat32 (PrimE ctz32 (VarE w)))
      )
      (LetD
        (VarP btstNat32)
        (FuncE
          btstNat32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat32 EqOp)
              (PrimE btst32 (VarE w) (VarE amount))
              (LitE (Nat32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat64)
        (FuncE
          popcntNat64
          Local
          Returns
          (params w)
          Nat64
          (PrimE popcnt64 (VarE w))
        )
      )
      (LetD
        (VarP clzNat64)
        (FuncE clzNat64 Local Returns (params w) Nat64 (PrimE clz64 (VarE w)))
      )
      (LetD
        (VarP ctzNat64)
        (FuncE ctzNat64 Local Returns (params w) Nat64 (PrimE ctz64 (VarE w)))
      )
      (LetD
        (VarP btstNat64)
        (FuncE
          btstNat64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE btst64 (VarE w) (VarE amount))
              (LitE (Nat64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt8)
        (FuncE
          popcntInt8
          Local
          Returns
          (params w)
          Int8
          (PrimE popcntInt8 (VarE w))
        )
      )
      (LetD
        (VarP clzInt8)
        (FuncE clzInt8 Local Returns (params w) Int8 (PrimE clzInt8 (VarE w)))
      )
      (LetD
        (VarP ctzInt8)
        (FuncE ctzInt8 Local Returns (params w) Int8 (PrimE ctzInt8 (VarE w)))
      )
      (LetD
        (VarP btstInt8)
        (FuncE
          btstInt8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int8 EqOp)
              (PrimE btstInt8 (VarE w) (VarE amount))
              (LitE (Int8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt16)
        (FuncE
          popcntInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE popcntInt16 (VarE w))
        )
      )
      (LetD
        (VarP clzInt16)
        (FuncE
          clzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE clzInt16 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt16)
        (FuncE
          ctzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE ctzInt16 (VarE w))
        )
      )
      (LetD
        (VarP btstInt16)
        (FuncE
          btstInt16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int16 EqOp)
              (PrimE btstInt16 (VarE w) (VarE amount))
              (LitE (Int16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt32)
        (FuncE
          popcntInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE popcntInt32 (VarE w))
        )
      )
      (LetD
        (VarP clzInt32)
        (FuncE
          clzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE clzInt32 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt32)
        (FuncE
          ctzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE ctzInt32 (VarE w))
        )
      )
      (LetD
        (VarP btstInt32)
        (FuncE
          btstInt32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int32 EqOp)
              (PrimE btstInt32 (VarE w) (VarE amount))
              (LitE (Int32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt64)
        (FuncE
          popcntInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE popcntInt64 (VarE w))
        )
      )
      (LetD
        (VarP clzInt64)
        (FuncE
          clzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE clzInt64 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt64)
        (FuncE
          ctzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE ctzInt64 (VarE w))
        )
      )
      (LetD
        (VarP btstInt64)
        (FuncE
          btstInt64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int64 EqOp)
              (PrimE btstInt64 (VarE w) (VarE amount))
              (LitE (Int64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP floatAbs)
        (FuncE floatAbs Local Returns (params f) Float (PrimE fabs (VarE f)))
      )
      (LetD
        (VarP floatSqrt)
        (FuncE floatSqrt Local Returns (params f) Float (PrimE fsqrt (VarE f)))
      )
      (LetD
        (VarP floatCeil)
        (FuncE floatCeil Local Returns (params f) Float (PrimE fceil (VarE f)))
      )
      (LetD
        (VarP floatFloor)
        (FuncE
          floatFloor
          Local
          Returns
          (params f)
          Float
          (PrimE ffloor (VarE f))
        )
      )
      (LetD
        (VarP floatTrunc)
        (FuncE
          floatTrunc
          Local
          Returns
          (params f)
          Float
          (PrimE ftrunc (VarE f))
        )
      )
      (LetD
        (VarP floatNearest)
        (FuncE
          floatNearest
          Local
          Returns
          (params f)
          Float
          (PrimE fnearest (VarE f))
        )
      )
      (LetD
        (VarP floatMin)
        (FuncE
          floatMin
          Local
          Returns
          (params f g)
          Float
          (PrimE fmin (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatMax)
        (FuncE
          floatMax
          Local
          Returns
          (params f g)
          Float
          (PrimE fmax (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatCopySign)
        (FuncE
          floatCopySign
          Local
          Returns
          (params f g)
          Float
          (PrimE fcopysign (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatToInt)
        (FuncE
          floatToInt
          Local
          Returns
          (params f)
          Int
          (PrimE (NumConvTrapPrim Float Int) (VarE f))
        )
      )
      (LetD
        (VarP intToFloat)
        (FuncE
          intToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int Float) (VarE n))
        )
      )
      (LetD
        (VarP floatToInt64)
        (FuncE
          floatToInt64
          Local
          Returns
          (params f)
          Int64
          (PrimE (NumConvTrapPrim Float Int64) (VarE f))
        )
      )
      (LetD
        (VarP int64ToFloat)
        (FuncE
          int64ToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int64 Float) (VarE n))
        )
      )
      (LetD (VarP floatToText) (VarE @text_of_Float))
      (LetD
        (VarP floatToFormattedText)
        (FuncE
          floatToFormattedText
          Local
          Returns
          (params f prec mode)
          Text
          (PrimE fmtFloat->Text (VarE f) (VarE prec) (VarE mode))
        )
      )
      (LetD
        (VarP sin)
        (FuncE sin Local Returns (params f) Float (PrimE fsin (VarE f)))
      )
      (LetD
        (VarP cos)
        (FuncE cos Local Returns (params f) Float (PrimE fcos (VarE f)))
      )
      (LetD
        (VarP tan)
        (FuncE tan Local Returns (params f) Float (PrimE ftan (VarE f)))
      )
      (LetD
        (VarP arcsin)
        (FuncE arcsin Local Returns (params f) Float (PrimE fasin (VarE f)))
      )
      (LetD
        (VarP arccos)
        (FuncE arccos Local Returns (params f) Float (PrimE facos (VarE f)))
      )
      (LetD
        (VarP arctan)
        (FuncE arctan Local Returns (params f) Float (PrimE fatan (VarE f)))
      )
      (LetD
        (VarP arctan2)
        (FuncE
          arctan2
          Local
          Returns
          (params y x)
          Float
          (PrimE fatan2 (VarE y) (VarE x))
        )
      )
      (LetD
        (VarP exp)
        (FuncE exp Local Returns (params f) Float (PrimE fexp (VarE f)))
      )
      (LetD
        (VarP log)
        (FuncE log Local Returns (params f) Float (PrimE flog (VarE f)))
      )
      (LetD
        (VarP Array_init)
        (FuncE
          Array_init
          Local
          Returns
          (T__106 Any)
          (params len x)
          [var T__106]
          (PrimE Array.init (VarE len) (VarE x))
        )
      )
      (LetD
        (VarP Array_tabulate)
        (FuncE
          Array_tabulate
          Local
          Returns
          (T__107 Any)
          (params len gen)
          [T__107]
          (PrimE Array.tabulate (VarE len) (VarE gen))
        )
      )
      (LetD
        (VarP blobToArray)
        (FuncE
          blobToArray
          Local
          Returns
          (params b)
          [Nat8]
          (PrimE blobToArray (VarE b))
        )
      )
      (LetD
        (VarP blobToArrayMut)
        (FuncE
          blobToArrayMut
          Local
          Returns
          (params b)
          [var Nat8]
          (PrimE blobToArrayMut (VarE b))
        )
      )
      (LetD
        (VarP arrayToBlob)
        (FuncE
          arrayToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayToBlob (VarE a))
        )
      )
      (LetD
        (VarP arrayMutToBlob)
        (FuncE
          arrayMutToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayMutToBlob (VarE a))
        )
      )
      (LetD
        (VarP error)
        (FuncE
          error
          Local
          Returns
          (params message)
          Error
          (BlockE
            (LetD
              (VarP e)
              (PrimE
                TupPrim
                (PrimE (TagE canister_reject) (PrimE TupPrim))
                (VarE message)
              )
            )
            (PrimE (CastPrim (ErrorCode__1, Text) Error) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorCode)
        (FuncE
          errorCode
          Local
          Returns
          (params e)
          ErrorCode__1
          (PrimE
            (ProjPrim 0)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorMessage)
        (FuncE
          errorMessage
          Local
          Returns
          (params e)
          Text
          (PrimE
            (ProjPrim 1)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD (VarP time) (FuncE time Local Returns Nat64 (PrimE SystemTimePrim)))
      (LetD
        (VarP blobOfPrincipal)
        (FuncE
          blobOfPrincipal
          Local
          Returns
          (params id)
          Blob
          (PrimE (CastPrim Principal Blob) (VarE id))
        )
      )
      (LetD
        (VarP principalOfBlob)
        (FuncE
          principalOfBlob
          Local
          Returns
          (params act)
          Principal
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE
                  (RelPrim Nat GtOp)
                  (PrimE blob_size (VarE act))
                  (LitE (NatLit 29))
                )
                (PrimE
                  (CallPrim)
                  (VarE trap)
                  (LitE (TextLit blob too long for principal))
                )
                (PrimE TupPrim)
              )
            )
            (PrimE (CastPrim Blob Principal) (VarE act))
          )
        )
      )
      (LetD
        (VarP principalOfActor)
        (FuncE
          principalOfActor
          Local
          Returns
          (params act)
          Principal
          (PrimE (CastPrim actor {} Principal) (VarE act))
        )
      )
      (LetD
        (VarP isController)
        (FuncE
          isController
          Local
          Returns
          (params p)
          Bool
          (PrimE is_controller (VarE p))
        )
      )
      (LetD
        (VarP canisterVersion)
        (FuncE canisterVersion Local Returns Nat64 (PrimE canister_version))
      )
      (LetD (VarP createActor) (VarE @create_actor_helper))
      (LetD
        (VarP cyclesBalance)
        (FuncE cyclesBalance Local Returns Nat (PrimE SystemCyclesBalancePrim))
      )
      (LetD
        (VarP cyclesAvailable)
        (FuncE
          cyclesAvailable
          Local
          Returns
          Nat
          (PrimE SystemCyclesAvailablePrim)
        )
      )
      (LetD
        (VarP cyclesRefunded)
        (FuncE cyclesRefunded Local Returns Nat (VarE @refund))
      )
      (LetD
        (VarP cyclesAccept)
        (FuncE
          cyclesAccept
          Local
          Returns
          ($__265 Any)
          (params amount)
          Nat
          (PrimE SystemCyclesAcceptPrim (VarE amount))
        )
      )
      (LetD
        (VarP cyclesAdd)
        (FuncE
          cyclesAdd
          Local
          Returns
          ($__266 Any)
          (params amount)
          ()
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat EqOp) (VarE amount) (LitE (NatLit 0)))
                (PrimE RetPrim (PrimE TupPrim))
                (PrimE TupPrim)
              )
            )
            (LetD
              WildP
              (AssignE
                (VarLE @cycles)
                (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE amount))
              )
            )
            (IfE
              (PrimE
                (RelPrim Nat GtOp)
                (VarE @cycles)
                (LitE
                  (NatLit 340_282_366_920_938_463_463_374_607_431_768_211_455)
                )
              )
              (PrimE
                (CallPrim)
                (VarE trap)
                (LitE (TextLit cannot add more than 2^128 cycles))
              )
              (PrimE TupPrim)
            )
          )
        )
      )
      (LetD
        (VarP setCertifiedData)
        (FuncE
          setCertifiedData
          Local
          Returns
          (params data)
          ()
          (PrimE SetCertifiedData (VarE data))
        )
      )
      (LetD
        (VarP getCertificate)
        (FuncE getCertificate Local Returns ?Blob (PrimE GetCertificate))
      )
      (LetD
        (VarP stableMemorySize)
        (FuncE stableMemorySize Local Returns Nat64 (PrimE stableMemorySize))
      )
      (LetD
        (VarP stableMemoryGrow)
        (FuncE
          stableMemoryGrow
          Local
          Returns
          (params pages)
          Nat64
          (PrimE stableMemoryGrow (VarE pages))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat32)
        (FuncE
          stableMemoryLoadNat32
          Local
          Returns
          (params offset)
          Nat32
          (PrimE stableMemoryLoadNat32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat32)
        (FuncE
          stableMemoryStoreNat32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat8)
        (FuncE
          stableMemoryLoadNat8
          Local
          Returns
          (params offset)
          Nat8
          (PrimE stableMemoryLoadNat8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat8)
        (FuncE
          stableMemoryStoreNat8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat16)
        (FuncE
          stableMemoryLoadNat16
          Local
          Returns
          (params offset)
          Nat16
          (PrimE stableMemoryLoadNat16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat16)
        (FuncE
          stableMemoryStoreNat16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat64)
        (FuncE
          stableMemoryLoadNat64
          Local
          Returns
          (params offset)
          Nat64
          (PrimE stableMemoryLoadNat64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat64)
        (FuncE
          stableMemoryStoreNat64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt32)
        (FuncE
          stableMemoryLoadInt32
          Local
          Returns
          (params offset)
          Int32
          (PrimE stableMemoryLoadInt32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt32)
        (FuncE
          stableMemoryStoreInt32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt8)
        (FuncE
          stableMemoryLoadInt8
          Local
          Returns
          (params offset)
          Int8
          (PrimE stableMemoryLoadInt8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt8)
        (FuncE
          stableMemoryStoreInt8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt16)
        (FuncE
          stableMemoryLoadInt16
          Local
          Returns
          (params offset)
          Int16
          (PrimE stableMemoryLoadInt16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt16)
        (FuncE
          stableMemoryStoreInt16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt64)
        (FuncE
          stableMemoryLoadInt64
          Local
          Returns
          (params offset)
          Int64
          (PrimE stableMemoryLoadInt64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt64)
        (FuncE
          stableMemoryStoreInt64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadFloat)
        (FuncE
          stableMemoryLoadFloat
          Local
          Returns
          (params offset)
          Float
          (PrimE stableMemoryLoadFloat (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreFloat)
        (FuncE
          stableMemoryStoreFloat
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreFloat (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadBlob)
        (FuncE
          stableMemoryLoadBlob
          Local
          Returns
          (params offset size)
          Blob
          (PrimE stableMemoryLoadBlob (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP stableMemoryStoreBlob)
        (FuncE
          stableMemoryStoreBlob
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreBlob (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableVarQuery)
        (FuncE
          stableVarQuery
          Local
          Returns
          shared query () -> async {size : Nat64}
          (PrimE stableVarQuery)
        )
      )
      (LetD
        (VarP regionNew)
        (FuncE regionNew Local Returns Region (PrimE regionNew))
      )
      (LetD
        (VarP regionId)
        (FuncE regionId Local Returns (params r) Nat (PrimE regionId (VarE r)))
      )
      (LetD
        (VarP regionSize)
        (FuncE
          regionSize
          Local
          Returns
          (params r)
          Nat64
          (PrimE regionSize (VarE r))
        )
      )
      (LetD
        (VarP regionGrow)
        (FuncE
          regionGrow
          Local
          Returns
          (params r pages)
          Nat64
          (PrimE regionGrow (VarE r) (VarE pages))
        )
      )
      (LetD
        (VarP regionLoadNat32)
        (FuncE
          regionLoadNat32
          Local
          Returns
          (params r offset)
          Nat32
          (PrimE regionLoadNat32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat32)
        (FuncE
          regionStoreNat32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat8)
        (FuncE
          regionLoadNat8
          Local
          Returns
          (params r offset)
          Nat8
          (PrimE regionLoadNat8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat8)
        (FuncE
          regionStoreNat8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat16)
        (FuncE
          regionLoadNat16
          Local
          Returns
          (params r offset)
          Nat16
          (PrimE regionLoadNat16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat16)
        (FuncE
          regionStoreNat16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat64)
        (FuncE
          regionLoadNat64
          Local
          Returns
          (params r offset)
          Nat64
          (PrimE regionLoadNat64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat64)
        (FuncE
          regionStoreNat64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt32)
        (FuncE
          regionLoadInt32
          Local
          Returns
          (params r offset)
          Int32
          (PrimE regionLoadInt32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt32)
        (FuncE
          regionStoreInt32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt8)
        (FuncE
          regionLoadInt8
          Local
          Returns
          (params r offset)
          Int8
          (PrimE regionLoadInt8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt8)
        (FuncE
          regionStoreInt8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt16)
        (FuncE
          regionLoadInt16
          Local
          Returns
          (params r offset)
          Int16
          (PrimE regionLoadInt16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt16)
        (FuncE
          regionStoreInt16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt64)
        (FuncE
          regionLoadInt64
          Local
          Returns
          (params r offset)
          Int64
          (PrimE regionLoadInt64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt64)
        (FuncE
          regionStoreInt64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadFloat)
        (FuncE
          regionLoadFloat
          Local
          Returns
          (params r offset)
          Float
          (PrimE regionLoadFloat (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreFloat)
        (FuncE
          regionStoreFloat
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreFloat (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadBlob)
        (FuncE
          regionLoadBlob
          Local
          Returns
          (params r offset size)
          Blob
          (PrimE regionLoadBlob (VarE r) (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP regionStoreBlob)
        (FuncE
          regionStoreBlob
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreBlob (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD (VarP call_raw) (VarE @call_raw))
      (LetD
        (VarP performanceCounter)
        (FuncE
          performanceCounter
          Local
          Returns
          (params counter)
          Nat64
          (PrimE performanceCounter (VarE counter))
        )
      )
      (LetD
        (VarP forall)
        (FuncE
          forall
          Local
          Returns
          (T__108 Any)
          (params f)
          Bool
          (PrimE forall (VarE f))
        )
      )
      (LetD
        (VarP exists)
        (FuncE
          exists
          Local
          Returns
          (T__109 Any)
          (params f)
          Bool
          (PrimE exists (VarE f))
        )
      )
      (LetD
        (VarP Ret)
        (FuncE Ret Local Returns (T__110 Any) T__110 (PrimE viperRet))
      )
      (LetD (VarP setTimer) (VarE @setTimer))
      (LetD (VarP cancelTimer) (VarE @cancelTimer))
      (NewObjE
        Module
        (trap trap)
        (time time)
        (textUppercase textUppercase)
        (textLowercase textLowercase)
        (textCompare textCompare)
        (tan tan)
        (stableVarQuery stableVarQuery)
        (stableMemoryStoreNat8 stableMemoryStoreNat8)
        (stableMemoryStoreNat64 stableMemoryStoreNat64)
        (stableMemoryStoreNat32 stableMemoryStoreNat32)
        (stableMemoryStoreNat16 stableMemoryStoreNat16)
        (stableMemoryStoreInt8 stableMemoryStoreInt8)
        (stableMemoryStoreInt64 stableMemoryStoreInt64)
        (stableMemoryStoreInt32 stableMemoryStoreInt32)
        (stableMemoryStoreInt16 stableMemoryStoreInt16)
        (stableMemoryStoreFloat stableMemoryStoreFloat)
        (stableMemoryStoreBlob stableMemoryStoreBlob)
        (stableMemorySize stableMemorySize)
        (stableMemoryLoadNat8 stableMemoryLoadNat8)
        (stableMemoryLoadNat64 stableMemoryLoadNat64)
        (stableMemoryLoadNat32 stableMemoryLoadNat32)
        (stableMemoryLoadNat16 stableMemoryLoadNat16)
        (stableMemoryLoadInt8 stableMemoryLoadInt8)
        (stableMemoryLoadInt64 stableMemoryLoadInt64)
        (stableMemoryLoadInt32 stableMemoryLoadInt32)
        (stableMemoryLoadInt16 stableMemoryLoadInt16)
        (stableMemoryLoadFloat stableMemoryLoadFloat)
        (stableMemoryLoadBlob stableMemoryLoadBlob)
        (stableMemoryGrow stableMemoryGrow)
        (sin sin)
        (shiftRight shiftRight)
        (shiftLeft shiftLeft)
        (setTimer setTimer)
        (setCertifiedData setCertifiedData)
        (rts_version rts_version)
        (rts_total_allocation rts_total_allocation)
        (rts_stable_memory_size rts_stable_memory_size)
        (rts_reclaimed rts_reclaimed)
        (rts_mutator_instructions rts_mutator_instructions)
        (rts_memory_size rts_memory_size)
        (rts_max_stack_size rts_max_stack_size)
        (rts_max_live_size rts_max_live_size)
        (rts_logical_stable_memory_size rts_logical_stable_memory_size)
        (rts_heap_size rts_heap_size)
        (rts_collector_instructions rts_collector_instructions)
        (rts_callback_table_size rts_callback_table_size)
        (rts_callback_table_count rts_callback_table_count)
        (regionStoreNat8 regionStoreNat8)
        (regionStoreNat64 regionStoreNat64)
        (regionStoreNat32 regionStoreNat32)
        (regionStoreNat16 regionStoreNat16)
        (regionStoreInt8 regionStoreInt8)
        (regionStoreInt64 regionStoreInt64)
        (regionStoreInt32 regionStoreInt32)
        (regionStoreInt16 regionStoreInt16)
        (regionStoreFloat regionStoreFloat)
        (regionStoreBlob regionStoreBlob)
        (regionSize regionSize)
        (regionNew regionNew)
        (regionLoadNat8 regionLoadNat8)
        (regionLoadNat64 regionLoadNat64)
        (regionLoadNat32 regionLoadNat32)
        (regionLoadNat16 regionLoadNat16)
        (regionLoadInt8 regionLoadInt8)
        (regionLoadInt64 regionLoadInt64)
        (regionLoadInt32 regionLoadInt32)
        (regionLoadInt16 regionLoadInt16)
        (regionLoadFloat regionLoadFloat)
        (regionLoadBlob regionLoadBlob)
        (regionId regionId)
        (regionGrow regionGrow)
        (principalOfBlob principalOfBlob)
        (principalOfActor principalOfActor)
        (popcntNat8 popcntNat8)
        (popcntNat64 popcntNat64)
        (popcntNat32 popcntNat32)
        (popcntNat16 popcntNat16)
        (popcntInt8 popcntInt8)
        (popcntInt64 popcntInt64)
        (popcntInt32 popcntInt32)
        (popcntInt16 popcntInt16)
        (performanceCounter performanceCounter)
        (natToNat8 natToNat8)
        (natToNat64 natToNat64)
        (natToNat32 natToNat32)
        (natToNat16 natToNat16)
        (nat8ToNat16 nat8ToNat16)
        (nat8ToNat nat8ToNat)
        (nat8ToInt8 nat8ToInt8)
        (nat64ToNat32 nat64ToNat32)
        (nat64ToNat nat64ToNat)
        (nat64ToInt64 nat64ToInt64)
        (nat32ToNat64 nat32ToNat64)
        (nat32ToNat16 nat32ToNat16)
        (nat32ToNat nat32ToNat)
        (nat32ToInt32 nat32ToInt32)
        (nat32ToChar nat32ToChar)
        (nat16ToNat8 nat16ToNat8)
        (nat16ToNat32 nat16ToNat32)
        (nat16ToNat nat16ToNat)
        (nat16ToInt16 nat16ToInt16)
        (log log)
        (isController isController)
        (intToNat8Wrap intToNat8Wrap)
        (intToNat64Wrap intToNat64Wrap)
        (intToNat32Wrap intToNat32Wrap)
        (intToNat16Wrap intToNat16Wrap)
        (intToInt8Wrap intToInt8Wrap)
        (intToInt8 intToInt8)
        (intToInt64Wrap intToInt64Wrap)
        (intToInt64 intToInt64)
        (intToInt32Wrap intToInt32Wrap)
        (intToInt32 intToInt32)
        (intToInt16Wrap intToInt16Wrap)
        (intToInt16 intToInt16)
        (intToFloat intToFloat)
        (int8ToNat8 int8ToNat8)
        (int8ToInt16 int8ToInt16)
        (int8ToInt int8ToInt)
        (int64ToNat64 int64ToNat64)
        (int64ToInt32 int64ToInt32)
        (int64ToInt int64ToInt)
        (int64ToFloat int64ToFloat)
        (int32ToNat32 int32ToNat32)
        (int32ToInt64 int32ToInt64)
        (int32ToInt16 int32ToInt16)
        (int32ToInt int32ToInt)
        (int16ToNat16 int16ToNat16)
        (int16ToInt8 int16ToInt8)
        (int16ToInt32 int16ToInt32)
        (int16ToInt int16ToInt)
        (idlHash idlHash)
        (hashBlob hashBlob)
        (getCertificate getCertificate)
        (forall forall)
        (floatTrunc floatTrunc)
        (floatToText floatToText)
        (floatToInt64 floatToInt64)
        (floatToInt floatToInt)
        (floatToFormattedText floatToFormattedText)
        (floatSqrt floatSqrt)
        (floatNearest floatNearest)
        (floatMin floatMin)
        (floatMax floatMax)
        (floatFloor floatFloor)
        (floatCopySign floatCopySign)
        (floatCeil floatCeil)
        (floatAbs floatAbs)
        (exp exp)
        (exists exists)
        (errorMessage errorMessage)
        (errorCode errorCode)
        (error error)
        (encodeUtf8 encodeUtf8)
        (decodeUtf8 decodeUtf8)
        (debugPrintNat debugPrintNat)
        (debugPrintInt debugPrintInt)
        (debugPrintChar debugPrintChar)
        (debugPrint debugPrint)
        (cyclesRefunded cyclesRefunded)
        (cyclesBalance cyclesBalance)
        (cyclesAvailable cyclesAvailable)
        (cyclesAdd cyclesAdd)
        (cyclesAccept cyclesAccept)
        (ctzNat8 ctzNat8)
        (ctzNat64 ctzNat64)
        (ctzNat32 ctzNat32)
        (ctzNat16 ctzNat16)
        (ctzInt8 ctzInt8)
        (ctzInt64 ctzInt64)
        (ctzInt32 ctzInt32)
        (ctzInt16 ctzInt16)
        (createActor createActor)
        (cos cos)
        (clzNat8 clzNat8)
        (clzNat64 clzNat64)
        (clzNat32 clzNat32)
        (clzNat16 clzNat16)
        (clzInt8 clzInt8)
        (clzInt64 clzInt64)
        (clzInt32 clzInt32)
        (clzInt16 clzInt16)
        (charToUpper charToUpper)
        (charToText charToText)
        (charToNat32 charToNat32)
        (charToLower charToLower)
        (charIsWhitespace charIsWhitespace)
        (charIsUppercase charIsUppercase)
        (charIsLowercase charIsLowercase)
        (charIsAlphabetic charIsAlphabetic)
        (canisterVersion canisterVersion)
        (cancelTimer cancelTimer)
        (call_raw call_raw)
        (btstNat8 btstNat8)
        (btstNat64 btstNat64)
        (btstNat32 btstNat32)
        (btstNat16 btstNat16)
        (btstInt8 btstInt8)
        (btstInt64 btstInt64)
        (btstInt32 btstInt32)
        (btstInt16 btstInt16)
        (blobToArrayMut blobToArrayMut)
        (blobToArray blobToArray)
        (blobOfPrincipal blobOfPrincipal)
        (blobCompare blobCompare)
        (arrayToBlob arrayToBlob)
        (arrayMutToBlob arrayMutToBlob)
        (arctan2 arctan2)
        (arctan arctan)
        (arcsin arcsin)
        (arccos arccos)
        (abs abs)
        (Types Types)
        (Ret Ret)
        (Array_tabulate Array_tabulate)
        (Array_init Array_init)
        module {Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; Ret : <T>() -> T; Types : module {}; abs : Int -> Nat; arccos : Float -> Float; arcsin : Float -> Float; arctan : Float -> Float; arctan2 : (Float, Float) -> Float; arrayMutToBlob : [var Nat8] -> Blob; arrayToBlob : [Nat8] -> Blob; blobCompare : (Blob, Blob) -> Int8; blobOfPrincipal : Principal -> Blob; blobToArray : Blob -> [Nat8]; blobToArrayMut : Blob -> [var Nat8]; btstInt16 : (Int16, Int16) -> Bool; btstInt32 : (Int32, Int32) -> Bool; btstInt64 : (Int64, Int64) -> Bool; btstInt8 : (Int8, Int8) -> Bool; btstNat16 : (Nat16, Nat16) -> Bool; btstNat32 : (Nat32, Nat32) -> Bool; btstNat64 : (Nat64, Nat64) -> Bool; btstNat8 : (Nat8, Nat8) -> Bool; call_raw : (Principal, Text, Blob) -> async Blob; cancelTimer : Nat -> (); canisterVersion : () -> Nat64; charIsAlphabetic : Char -> Bool; charIsLowercase : Char -> Bool; charIsUppercase : Char -> Bool; charIsWhitespace : Char -> Bool; charToLower : Char -> Char; charToNat32 : Char -> Nat32; charToText : Char -> Text; charToUpper : Char -> Char; clzInt16 : Int16 -> Int16; clzInt32 : Int32 -> Int32; clzInt64 : Int64 -> Int64; clzInt8 : Int8 -> Int8; clzNat16 : Nat16 -> Nat16; clzNat32 : Nat32 -> Nat32; clzNat64 : Nat64 -> Nat64; clzNat8 : Nat8 -> Nat8; cos : Float -> Float; createActor : (Blob, Blob) -> async Principal; ctzInt16 : Int16 -> Int16; ctzInt32 : Int32 -> Int32; ctzInt64 : Int64 -> Int64; ctzInt8 : Int8 -> Int8; ctzNat16 : Nat16 -> Nat16; ctzNat32 : Nat32 -> Nat32; ctzNat64 : Nat64 -> Nat64; ctzNat8 : Nat8 -> Nat8; cyclesAccept : <system>Nat -> Nat; cyclesAdd : <system>Nat -> (); cyclesAvailable : () -> Nat; cyclesBalance : () -> Nat; cyclesRefunded : () -> Nat; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); decodeUtf8 : Blob -> ?Text; encodeUtf8 : Text -> Blob; error : Text -> Error; errorCode : Error -> ErrorCode__1; errorMessage : Error -> Text; exists : <T>(T -> Bool) -> Bool; exp : Float -> Float; floatAbs : Float -> Float; floatCeil : Float -> Float; floatCopySign : (Float, Float) -> Float; floatFloor : Float -> Float; floatMax : (Float, Float) -> Float; floatMin : (Float, Float) -> Float; floatNearest : Float -> Float; floatSqrt : Float -> Float; floatToFormattedText : (Float, Nat8, Nat8) -> Text; floatToInt : Float -> Int; floatToInt64 : Float -> Int64; floatToText : Float -> Text; floatTrunc : Float -> Float; forall : <T>(T -> Bool) -> Bool; getCertificate : () -> ?Blob; hashBlob : Blob -> Nat32; idlHash : Text -> Nat32; int16ToInt : Int16 -> Int; int16ToInt32 : Int16 -> Int32; int16ToInt8 : Int16 -> Int8; int16ToNat16 : Int16 -> Nat16; int32ToInt : Int32 -> Int; int32ToInt16 : Int32 -> Int16; int32ToInt64 : Int32 -> Int64; int32ToNat32 : Int32 -> Nat32; int64ToFloat : Int64 -> Float; int64ToInt : Int64 -> Int; int64ToInt32 : Int64 -> Int32; int64ToNat64 : Int64 -> Nat64; int8ToInt : Int8 -> Int; int8ToInt16 : Int8 -> Int16; int8ToNat8 : Int8 -> Nat8; intToFloat : Int -> Float; intToInt16 : Int -> Int16; intToInt16Wrap : Int -> Int16; intToInt32 : Int -> Int32; intToInt32Wrap : Int -> Int32; intToInt64 : Int -> Int64; intToInt64Wrap : Int -> Int64; intToInt8 : Int -> Int8; intToInt8Wrap : Int -> Int8; intToNat16Wrap : Int -> Nat16; intToNat32Wrap : Int -> Nat32; intToNat64Wrap : Int -> Nat64; intToNat8Wrap : Int -> Nat8; isController : Principal -> Bool; log : Float -> Float; nat16ToInt16 : Nat16 -> Int16; nat16ToNat : Nat16 -> Nat; nat16ToNat32 : Nat16 -> Nat32; nat16ToNat8 : Nat16 -> Nat8; nat32ToChar : Nat32 -> Char; nat32ToInt32 : Nat32 -> Int32; nat32ToNat : Nat32 -> Nat; nat32ToNat16 : Nat32 -> Nat16; nat32ToNat64 : Nat32 -> Nat64; nat64ToInt64 : Nat64 -> Int64; nat64ToNat : Nat64 -> Nat; nat64ToNat32 : Nat64 -> Nat32; nat8ToInt8 : Nat8 -> Int8; nat8ToNat : Nat8 -> Nat; nat8ToNat16 : Nat8 -> Nat16; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; performanceCounter : Nat32 -> Nat64; popcntInt16 : Int16 -> Int16; popcntInt32 : Int32 -> Int32; popcntInt64 : Int64 -> Int64; popcntInt8 : Int8 -> Int8; popcntNat16 : Nat16 -> Nat16; popcntNat32 : Nat32 -> Nat32; popcntNat64 : Nat64 -> Nat64; popcntNat8 : Nat8 -> Nat8; principalOfActor : (actor {}) -> Principal; principalOfBlob : Blob -> Principal; regionGrow : (Region, Nat64) -> Nat64; regionId : Region -> Nat; regionLoadBlob : (Region, Nat64, Nat) -> Blob; regionLoadFloat : (Region, Nat64) -> Float; regionLoadInt16 : (Region, Nat64) -> Int16; regionLoadInt32 : (Region, Nat64) -> Int32; regionLoadInt64 : (Region, Nat64) -> Int64; regionLoadInt8 : (Region, Nat64) -> Int8; regionLoadNat16 : (Region, Nat64) -> Nat16; regionLoadNat32 : (Region, Nat64) -> Nat32; regionLoadNat64 : (Region, Nat64) -> Nat64; regionLoadNat8 : (Region, Nat64) -> Nat8; regionNew : () -> Region; regionSize : Region -> Nat64; regionStoreBlob : (Region, Nat64, Blob) -> (); regionStoreFloat : (Region, Nat64, Float) -> (); regionStoreInt16 : (Region, Nat64, Int16) -> (); regionStoreInt32 : (Region, Nat64, Int32) -> (); regionStoreInt64 : (Region, Nat64, Int64) -> (); regionStoreInt8 : (Region, Nat64, Int8) -> (); regionStoreNat16 : (Region, Nat64, Nat16) -> (); regionStoreNat32 : (Region, Nat64, Nat32) -> (); regionStoreNat64 : (Region, Nat64, Nat64) -> (); regionStoreNat8 : (Region, Nat64, Nat8) -> (); rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_collector_instructions : () -> Nat; rts_heap_size : () -> Nat; rts_logical_stable_memory_size : () -> Nat; rts_max_live_size : () -> Nat; rts_max_stack_size : () -> Nat; rts_memory_size : () -> Nat; rts_mutator_instructions : () -> Nat; rts_reclaimed : () -> Nat; rts_stable_memory_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; setCertifiedData : Blob -> (); setTimer : <system>(Nat64, Bool, () -> async ()) -> Nat; shiftLeft : (Nat, Nat32) -> Nat; shiftRight : (Nat, Nat32) -> Nat; sin : Float -> Float; stableMemoryGrow : Nat64 -> Nat64; stableMemoryLoadBlob : (Nat64, Nat) -> Blob; stableMemoryLoadFloat : Nat64 -> Float; stableMemoryLoadInt16 : Nat64 -> Int16; stableMemoryLoadInt32 : Nat64 -> Int32; stableMemoryLoadInt64 : Nat64 -> Int64; stableMemoryLoadInt8 : Nat64 -> Int8; stableMemoryLoadNat16 : Nat64 -> Nat16; stableMemoryLoadNat32 : Nat64 -> Nat32; stableMemoryLoadNat64 : Nat64 -> Nat64; stableMemoryLoadNat8 : Nat64 -> Nat8; stableMemorySize : () -> Nat64; stableMemoryStoreBlob : (Nat64, Blob) -> (); stableMemoryStoreFloat : (Nat64, Float) -> (); stableMemoryStoreInt16 : (Nat64, Int16) -> (); stableMemoryStoreInt32 : (Nat64, Int32) -> (); stableMemoryStoreInt64 : (Nat64, Int64) -> (); stableMemoryStoreInt8 : (Nat64, Int8) -> (); stableMemoryStoreNat16 : (Nat64, Nat16) -> (); stableMemoryStoreNat32 : (Nat64, Nat32) -> (); stableMemoryStoreNat64 : (Nat64, Nat64) -> (); stableMemoryStoreNat8 : (Nat64, Nat8) -> (); stableVarQuery : () -> shared query () -> async {size : Nat64}; tan : Float -> Float; textCompare : (Text, Text) -> Int8; textLowercase : Text -> Text; textUppercase : Text -> Text; time : () -> Nat64; trap : Text -> None__2}
      )
    )
  )
  (LetD
    (ObjP
      (debugPrint (VarP debugPrint))
      (error (VarP error))
      (errorMessage (VarP errorMessage))
      (call_raw (VarP call_raw))
      (principalOfActor (VarP principalOfActor))
    )
    (VarE file$@prim)
  )
  (LetD
    (VarP $__motoko_stable_var_info)
    (FuncE
      $__motoko_stable_var_info
      Shared Query
      Promises
      (T1__4 Any)
      {size : Nat64}
      (AsyncE
        (T2__2 Any)
        (BlockE
          (LetD (VarP $caller/0) (PrimE ICCallerPrim))
          (LetD
            WildP
            (PrimE
              AssertPrim
              (IfE
                (PrimE
                  (RelPrim Principal EqOp)
                  (VarE $caller/0)
                  (PrimE (SelfRef Principal))
                )
                (LitE (BoolLit true))
                (PrimE is_controller (VarE $caller/0))
              )
            )
          )
          (LetD
            (VarP $size/0)
            (PrimE (ICStableSize memory {}) (NewObjE Memory memory {}))
          )
          (NewObjE Object (size $size/0) {size : Nat64})
        )
        T1__4
      )
    )
  )
  (VarD $state/0 ?(memory {}) (PrimE OptPrim (PrimE (ICStableRead memory {}))))
  (LetD
    (VarP $getState/0)
    (FuncE
      $getState/0
      Local
      Returns
      memory {}
      (SwitchE
        (VarE $state/0)
        (case (LitP NullLit) (LoopE (PrimE TupPrim)))
        (case (OptP (VarP $v/0)) (VarE $v/0))
      )
    )
  )
  (LetD
    (VarP foo)
    (FuncE
      foo
      Shared
      Returns
      ($__267 Any)
      ()
      (BlockE
        (LetD
          WildP
          (AsyncE
            ($foo__2 Any)
            (BlockE
              (LetD
                (VarP $thunk/0)
                (FuncE
                  $cleanup
                  Local
                  Returns
                  ()
                  (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT0)))
                )
              )
              (TryE
                (BlockE
                  (LetD
                    (VarP $thunk/1)
                    (FuncE
                      $cleanup
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT1)))
                    )
                  )
                  (TryE
                    (BlockE
                      (LetD
                        (VarP $thunk/2)
                        (FuncE
                          $cleanup
                          Local
                          Returns
                          ()
                          (PrimE
                            (CallPrim)
                            (VarE debugPrint)
                            (LitE (TextLit OUT2))
                          )
                        )
                      )
                      (TryE
                        (BlockE
                          (LetD
                            WildP
                            (PrimE
                              AwaitPrim
                              (AsyncE
                                ($@anon-async-8.29__2 Any)
                                (PrimE TupPrim)
                                $foo__2
                              )
                            )
                          )
                          (IfE
                            (LitE (BoolLit true))
                            (PrimE RetPrim (PrimE TupPrim))
                            (PrimE RetPrim (PrimE TupPrim))
                          )
                        )
                        ;
                        $thunk/2
                      )
                    )
                    ;
                    $thunk/1
                  )
                )
                ;
                $thunk/0
              )
            )
            $__267
          )
        )
        (PrimE TupPrim)
      )
    )
  )
  (LetD WildP (AssignE (VarLE $state/0) (LitE NullLit)))
  (foo foo)
  (__motoko_stable_var_info $__motoko_stable_var_info)
  (System
    (Pre (PrimE (ICStableWrite memory {}) (NewObjE Memory memory {})))
    (Post (PrimE TupPrim))
    (Heartbeat (PrimE TupPrim))
    (Timer
      (BlockE
        (LetD WildP (PrimE (CallPrim ()) (VarE @timer_helper) (PrimE TupPrim)))
        (PrimE TupPrim)
      )
    )
    (Inspect (PrimE TupPrim))
  )
  actor {foo : shared () -> ()}
)
(ActorU
  (VarD @cycles Nat (LitE (NatLit 0)))
  (LetD
    (VarP @add_cycles)
    (FuncE
      @add_cycles
      Local
      Returns
      ($__259 Any)
      ()
      (BlockE
        (LetD (VarP cycles) (VarE @cycles))
        (LetD WildP (PrimE (CallPrim) (VarE @reset_cycles) (PrimE TupPrim)))
        (IfE
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
          (PrimE SystemCyclesAddPrim (VarE cycles))
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @reset_cycles)
    (FuncE
      @reset_cycles
      Local
      Returns
      ()
      (AssignE (VarLE @cycles) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @immut_array_get)
    (FuncE
      @immut_array_get
      Local
      Returns
      (A__45 Any)
      (params xs)
      Nat -> A__45
      (FuncE
        @anon-func-39.3
        Local
        Returns
        (params n)
        A__45
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @mut_array_get)
    (FuncE
      @mut_array_get
      Local
      Returns
      (A__46 Any)
      (params xs)
      Nat -> A__46
      (FuncE
        @anon-func-41.3
        Local
        Returns
        (params n)
        A__46
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @immut_array_size)
    (FuncE
      @immut_array_size
      Local
      Returns
      (A__47 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-43.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_size)
    (FuncE
      @mut_array_size
      Local
      Returns
      (A__48 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-45.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_put)
    (FuncE
      @mut_array_put
      Local
      Returns
      (A__49 Any)
      (params xs)
      (Nat, A__49) -> ()
      (FuncE
        @anon-func-47.3
        Local
        Returns
        (params n x)
        ()
        (AssignE (IdxLE (VarE xs) (VarE n)) (VarE x))
      )
    )
  )
  (LetD
    (VarP @immut_array_keys)
    (FuncE
      @immut_array_keys
      Local
      Returns
      (A__50 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-49.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_keys)
    (FuncE
      @mut_array_keys
      Local
      Returns
      (A__51 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-55.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @immut_array_vals)
    (FuncE
      @immut_array_vals
      Local
      Returns
      (A__52 Any)
      (params xs)
      () -> @Iter__1<A__52>
      (FuncE
        @anon-func-61.3
        Local
        Returns
        @Iter__1<A__52>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__52
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__52})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_vals)
    (FuncE
      @mut_array_vals
      Local
      Returns
      (A__53 Any)
      (params xs)
      () -> @Iter__1<A__53>
      (FuncE
        @anon-func-67.3
        Local
        Returns
        @Iter__1<A__53>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__53
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__53})
        )
      )
    )
  )
  (LetD
    (VarP @blob_size)
    (FuncE
      @blob_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-73.3 Local Returns Nat (PrimE blob_size (VarE xs)))
    )
  )
  (LetD
    (VarP @blob_vals)
    (FuncE
      @blob_vals
      Local
      Returns
      (params xs)
      () -> @Iter__1<Nat8>
      (FuncE
        @anon-func-75.3
        Local
        Returns
        @Iter__1<Nat8>
        (BlockE
          (LetD (VarP i) (PrimE blob_vals_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat8
              (IfE
                (PrimE blob_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE blob_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat8})
        )
      )
    )
  )
  (LetD
    (VarP @text_size)
    (FuncE
      @text_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-86.3 Local Returns Nat (PrimE text_len (VarE xs)))
    )
  )
  (LetD
    (VarP @text_chars)
    (FuncE
      @text_chars
      Local
      Returns
      (params xs)
      () -> @Iter__1<Char>
      (FuncE
        @anon-func-88.3
        Local
        Returns
        @Iter__1<Char>
        (BlockE
          (LetD (VarP i) (PrimE text_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Char
              (IfE
                (PrimE text_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE text_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Char})
        )
      )
    )
  )
  (LetD
    (VarP @text_of_num)
    (FuncE
      @text_of_num
      Local
      Returns
      (params x base sep digits)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit )))
        (VarD n Nat (VarE x))
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat EqOp) (VarE n) (LitE (NatLit 0)))
            (PrimE RetPrim (LitE (TextLit 0)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD
          WildP
          (LabelE
            $done/0
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat GtOp) (VarE n) (LitE (NatLit 0)))
                (BlockE
                  (LetD
                    (VarP rem)
                    (PrimE (BinPrim Nat ModOp) (VarE n) (VarE base))
                  )
                  (LetD
                    WildP
                    (IfE
                      (IfE
                        (PrimE (RelPrim Nat GtOp) (VarE sep) (LitE (NatLit 0)))
                        (PrimE (RelPrim Nat EqOp) (VarE i) (VarE sep))
                        (LitE (BoolLit false))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE text)
                            (PrimE
                              (BinPrim Text CatOp)
                              (LitE (TextLit _))
                              (VarE text)
                            )
                          )
                        )
                        (AssignE (VarLE i) (LitE (NatLit 0)))
                      )
                      (PrimE TupPrim)
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE text)
                      (PrimE
                        (BinPrim Text CatOp)
                        (PrimE (CallPrim) (VarE digits) (VarE rem))
                        (VarE text)
                      )
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE n)
                      (PrimE (BinPrim Nat DivOp) (VarE n) (VarE base))
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/0) (PrimE TupPrim))
              )
            )
          )
        )
        (VarE text)
      )
    )
  )
  (LetD
    (VarP @left_pad)
    (FuncE
      @left_pad
      Local
      Returns
      (params pad char t)
      Text
      (IfE
        (PrimE (RelPrim Nat GtOp) (VarE pad) (PrimE text_len (VarE t)))
        (BlockE
          (VarD
            i
            Nat
            (PrimE (BinPrim Nat SubOp) (VarE pad) (PrimE text_len (VarE t)))
          )
          (VarD text Text (VarE t))
          (LetD
            WildP
            (LabelE
              $done/1
              ()
              (LoopE
                (IfE
                  (PrimE (RelPrim Nat GtOp) (VarE i) (LitE (NatLit 0)))
                  (BlockE
                    (LetD
                      WildP
                      (AssignE
                        (VarLE text)
                        (PrimE (BinPrim Text CatOp) (VarE char) (VarE text))
                      )
                    )
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat SubOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE (BreakPrim $done/1) (PrimE TupPrim))
                )
              )
            )
          )
          (VarE text)
        )
        (VarE t)
      )
    )
  )
  (LetD
    (VarP @digits_dec)
    (FuncE
      @digits_dec
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE (BinPrim Int AddOp) (VarE x) (LitE (IntLit 48)))
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Nat)
    (FuncE
      @text_of_Nat
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_num)
        (PrimE
          TupPrim
          (VarE x)
          (LitE (NatLit 10))
          (LitE (NatLit 3))
          (VarE @digits_dec)
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Int)
    (FuncE
      @text_of_Int
      Local
      Returns
      (params x)
      Text
      (IfE
        (PrimE (RelPrim Int EqOp) (VarE x) (LitE (IntLit 0)))
        (LitE (TextLit 0))
        (PrimE
          (BinPrim Text CatOp)
          (IfE
            (PrimE (RelPrim Int LtOp) (VarE x) (LitE (IntLit 0)))
            (LitE (TextLit -))
            (LitE (TextLit +))
          )
          (PrimE (CallPrim) (VarE @text_of_Nat) (PrimE abs (VarE x)))
        )
      )
    )
  )
  (LetD
    (VarP @digits_hex)
    (FuncE
      @digits_hex
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE
              (BinPrim Int AddOp)
              (VarE x)
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE x) (LitE (NatLit 10)))
                (LitE (IntLit 48))
                (LitE (IntLit 55))
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @int64ToInt)
    (FuncE
      @int64ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int64 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int32ToInt)
    (FuncE
      @int32ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int32 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int16ToInt)
    (FuncE
      @int16ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int16 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int8ToInt)
    (FuncE
      @int8ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int8 Int) (VarE n))
    )
  )
  (LetD
    (VarP @nat64ToNat)
    (FuncE
      @nat64ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat64 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat32ToNat)
    (FuncE
      @nat32ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat32 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat16ToNat)
    (FuncE
      @nat16ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat16 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat8ToNat)
    (FuncE
      @nat8ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat8 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @text_of_Nat8)
    (FuncE
      @text_of_Nat8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat8ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat16)
    (FuncE
      @text_of_Nat16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat16ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat32)
    (FuncE
      @text_of_Nat32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat32ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat64)
    (FuncE
      @text_of_Nat64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat64ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int8)
    (FuncE
      @text_of_Int8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int8ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int16)
    (FuncE
      @text_of_Int16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int16ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int32)
    (FuncE
      @text_of_Int32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int32ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int64)
    (FuncE
      @text_of_Int64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int64ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Float)
    (FuncE
      @text_of_Float
      Local
      Returns
      (params x)
      Text
      (PrimE Float->Text (VarE x))
    )
  )
  (LetD
    (VarP @text_of_Bool)
    (FuncE
      @text_of_Bool
      Local
      Returns
      (params b)
      Text
      (IfE (VarE b) (LitE (TextLit true)) (LitE (TextLit false)))
    )
  )
  (LetD
    (VarP @text_of_Text)
    (FuncE
      @text_of_Text
      Local
      Returns
      (params t)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE (BinPrim Text CatOp) (LitE (TextLit ")) (VarE t))
        (LitE (TextLit "))
      )
    )
  )
  (LetD
    (VarP @text_of_Char)
    (FuncE
      @text_of_Char
      Local
      Returns
      (params c)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE
          (BinPrim Text CatOp)
          (LitE (TextLit '))
          (PrimE conv_Char_Text (VarE c))
        )
        (LitE (TextLit '))
      )
    )
  )
  (LetD
    (VarP @text_of_Blob)
    (FuncE
      @text_of_Blob
      Local
      Returns
      (params blob)
      Text
      (BlockE
        (VarD t Text (LitE (TextLit ")))
        (LetD
          WildP
          (BlockE
            (LetD
              (VarP $nxt/0)
              (PrimE
                (DotPrim next)
                (PrimE
                  (CallPrim)
                  (PrimE (CallPrim) (VarE @blob_vals) (VarE blob))
                  (PrimE TupPrim)
                )
              )
            )
            (LabelE
              $done/2
              ()
              (LoopE
                (SwitchE
                  (PrimE (CallPrim) (VarE $nxt/0) (PrimE TupPrim))
                  (case
                    (LitP NullLit)
                    (PrimE (BreakPrim $done/2) (PrimE TupPrim))
                  )
                  (case
                    (OptP (VarP b))
                    (AssignE
                      (VarLE t)
                      (PrimE
                        (BinPrim Text CatOp)
                        (VarE t)
                        (PrimE
                          (BinPrim Text CatOp)
                          (LitE (TextLit \))
                          (PrimE
                            (CallPrim)
                            (VarE @left_pad)
                            (PrimE
                              TupPrim
                              (LitE (NatLit 2))
                              (LitE (TextLit 0))
                              (PrimE
                                (CallPrim)
                                (VarE @text_of_num)
                                (PrimE
                                  TupPrim
                                  (PrimE (CallPrim) (VarE @nat8ToNat) (VarE b))
                                  (LitE (NatLit 16))
                                  (LitE (NatLit 0))
                                  (VarE @digits_hex)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE t)
            (PrimE (BinPrim Text CatOp) (VarE t) (LitE (TextLit ")))
          )
        )
        (PrimE RetPrim (VarE t))
      )
    )
  )
  (LetD
    (VarP @text_has_parens)
    (FuncE
      @text_has_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case (OptP (LitP (CharLit 40))) (LitE (BoolLit true)))
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_needs_parens)
    (FuncE
      @text_needs_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case
          (OptP
            (AltP
              (AltP
                (AltP (LitP (CharLit 43)) (LitP (CharLit 45)))
                (LitP (CharLit 63))
              )
              (LitP (CharLit 35))
            )
          )
          (LitE (BoolLit true))
        )
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_of_option)
    (FuncE
      @text_of_option
      Local
      Returns
      (T__99 Any)
      (params f x)
      Text
      (SwitchE
        (VarE x)
        (case
          (OptP (VarP y))
          (BlockE
            (LetD (VarP fy) (PrimE (CallPrim) (VarE f) (VarE y)))
            (IfE
              (PrimE (CallPrim) (VarE @text_needs_parens) (VarE fy))
              (PrimE
                (BinPrim Text CatOp)
                (PrimE (BinPrim Text CatOp) (LitE (TextLit ?()) (VarE fy))
                (LitE (TextLit )))
              )
              (PrimE (BinPrim Text CatOp) (LitE (TextLit ?)) (VarE fy))
            )
          )
        )
        (case (LitP NullLit) (LitE (TextLit null)))
      )
    )
  )
  (LetD
    (VarP @text_of_variant)
    (FuncE
      @text_of_variant
      Local
      Returns
      (T__100 Any)
      (params l f x)
      Text
      (BlockE
        (LetD (VarP fx) (PrimE (CallPrim) (VarE f) (VarE x)))
        (IfE
          (PrimE (RelPrim Text EqOp) (VarE fx) (LitE (TextLit ())))
          (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
          (IfE
            (PrimE (CallPrim) (VarE @text_has_parens) (VarE fx))
            (PrimE
              (BinPrim Text CatOp)
              (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
              (VarE fx)
            )
            (PrimE
              (BinPrim Text CatOp)
              (PrimE
                (BinPrim Text CatOp)
                (PrimE
                  (BinPrim Text CatOp)
                  (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
                  (LitE (TextLit ())
                )
                (VarE fx)
              )
              (LitE (TextLit )))
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_array)
    (FuncE
      @text_of_array
      Local
      Returns
      (T__101 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/0) (VarE xs))
            (LetD (VarP $last/0) (PrimE GetLastArrayOffset (VarE $arr/0)))
            (VarD $indx/0 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/0) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/3
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/0) (VarE $indx/0))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (AssignE (VarLE first) (LitE (BoolLit false)))
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/0) (VarE $last/0))
                      (PrimE (BreakPrim $done/3) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/0)
                        (PrimE NextArrayOffset (VarE $indx/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @text_of_array_mut)
    (FuncE
      @text_of_array_mut
      Local
      Returns
      (T__102 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [var)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/1) (VarE xs))
            (LetD (VarP $last/1) (PrimE GetLastArrayOffset (VarE $arr/1)))
            (VarD $indx/1 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/1) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/4
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/1) (VarE $indx/1))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (BlockE
                              (LetD
                                WildP
                                (AssignE (VarLE first) (LitE (BoolLit false)))
                              )
                              (AssignE
                                (VarLE text)
                                (PrimE
                                  (BinPrim Text CatOp)
                                  (VarE text)
                                  (LitE (TextLit  ))
                                )
                              )
                            )
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/1) (VarE $last/1))
                      (PrimE (BreakPrim $done/4) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/1)
                        (PrimE NextArrayOffset (VarE $indx/1))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @equal_array)
    (FuncE
      @equal_array
      Local
      Returns
      (T__103 Any)
      (params eq a b)
      Bool
      (BlockE
        (LetD
          WildP
          (IfE
            (PrimE
              (RelPrim Bool EqOp)
              (PrimE
                (RelPrim Nat EqOp)
                (PrimE array_len (VarE a))
                (PrimE array_len (VarE b))
              )
              (LitE (BoolLit false))
            )
            (PrimE RetPrim (LitE (BoolLit false)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD (VarP s) (PrimE array_len (VarE a)))
        (LetD
          WildP
          (LabelE
            $done/5
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE i) (VarE s))
                (BlockE
                  (LetD
                    WildP
                    (IfE
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (CallPrim)
                          (VarE eq)
                          (PrimE
                            TupPrim
                            (PrimE IdxPrim (VarE a) (VarE i))
                            (PrimE IdxPrim (VarE b) (VarE i))
                          )
                        )
                        (LitE (BoolLit false))
                      )
                      (PrimE RetPrim (LitE (BoolLit false)))
                      (PrimE TupPrim)
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/5) (PrimE TupPrim))
              )
            )
          )
        )
        (PrimE RetPrim (LitE (BoolLit true)))
      )
    )
  )
  (VarD @refund Nat (LitE (NatLit 0)))
  (LetD
    (VarP @reset_refund)
    (FuncE
      @reset_refund
      Local
      Returns
      ()
      (AssignE (VarLE @refund) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @getSystemRefund)
    (FuncE
      @getSystemRefund
      Local
      Returns
      @Refund__1
      (PrimE RetPrim (PrimE SystemCyclesRefundedPrim))
    )
  )
  (LetD (VarP @cleanup) (FuncE @cleanup Local Returns () (PrimE TupPrim)))
  (LetD
    (VarP @new_async)
    (FuncE
      @new_async
      Local
      Returns
      (T__104 Any__2)
      (@Async__1<T__104>, @Cont__1<T__104>, @Cont__1<Error>, @CleanCont__1)
      (BlockE
        (LetD
          (VarP w_null)
          (FuncE
            @anon-func-317.16
            Local
            Returns
            (params r t)
            ()
            (PrimE TupPrim)
          )
        )
        (LetD
          (VarP r_null)
          (FuncE
            @anon-func-318.16
            Local
            Returns
            (params $ignored0/0)
            ()
            (PrimE TupPrim)
          )
        )
        (VarD result ?@Result__1<T__104> (LitE NullLit))
        (VarD ws (@Refund__1, T__104) -> () (VarE w_null))
        (VarD rs Error -> () (VarE r_null))
        (LetD
          (VarP getRefund)
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE @cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
        )
        (LetD
          (VarP fulfill)
          (FuncE
            fulfill
            Local
            Returns
            (params t)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP refund)
                    (IfE
                      (VarE getRefund)
                      (PrimE (CallPrim) (VarE @getSystemRefund) (PrimE TupPrim))
                      (LitE (NatLit 0))
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE
                        OptPrim
                        (PrimE (TagE ok) (PrimE TupPrim (VarE refund) (VarE t)))
                      )
                    )
                  )
                  (LetD (VarP ws_) (VarE ws))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE
                    (CallPrim)
                    (VarE ws_)
                    (PrimE TupPrim (VarE refund) (VarE t))
                  )
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (LetD
          (VarP fail)
          (FuncE
            fail
            Local
            Returns
            (params e)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE OptPrim (PrimE (TagE error) (VarE e)))
                    )
                  )
                  (LetD (VarP rs_) (VarE rs))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE (CallPrim) (VarE rs_) (VarE e))
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (VarD cleanup () -> () (VarE @cleanup))
        (LetD
          (VarP clean)
          (FuncE
            clean
            Local
            Returns
            ()
            (PrimE (CallPrim) (VarE cleanup) (PrimE TupPrim))
          )
        )
        (LetD
          (VarP enqueue)
          (FuncE
            enqueue
            Local
            Returns
            (params k r b)
            {#schedule : () -> (); #suspend}
            (BlockE
              (LetD WildP (AssignE (VarLE cleanup) (VarE b)))
              (SwitchE
                (VarE result)
                (case
                  (LitP NullLit)
                  (BlockE
                    (LetD (VarP ws_) (VarE ws))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE ws)
                        (FuncE
                          @anon-func-365.15
                          Local
                          Returns
                          (params r t)
                          ()
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE ws_)
                                (PrimE TupPrim (VarE r) (VarE t))
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                            (PrimE (CallPrim) (VarE k) (VarE t))
                          )
                        )
                      )
                    )
                    (LetD (VarP rs_) (VarE rs))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE rs)
                        (FuncE
                          @anon-func-372.15
                          Local
                          Returns
                          (params e)
                          ()
                          (BlockE
                            (LetD WildP (PrimE (CallPrim) (VarE rs_) (VarE e)))
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_refund)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE (CallPrim) (VarE r) (VarE e))
                          )
                        )
                      )
                    )
                    (PrimE (TagE suspend) (PrimE TupPrim))
                  )
                )
                (case
                  (OptP (TagP ok (TupP (VarP r) (VarP t))))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-381.20
                      Local
                      Returns
                      ()
                      (BlockE
                        (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                        (PrimE (CallPrim) (VarE k) (VarE t))
                      )
                    )
                  )
                )
                (case
                  (OptP (TagP error (VarP e)))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-384.20
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE r) (VarE e))
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim (VarE enqueue) (VarE fulfill) (VarE fail) (VarE clean))
      )
    )
  )
  (LetD (VarP @ManagementCanister) (NewObjE Module module {}))
  (LetD
    (VarP @ic00)
    (PrimE
      (ActorOfIdBlob
        actor {create_canister : shared {sender_canister_version : ?Nat64; settings : ?canister_settings__1} -> async {canister_id : Principal}; install_code : shared {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1} -> async ()}
      )
      (PrimE BlobOfIcUrl (LitE (TextLit aaaaa-aa)))
    )
  )
  (LetD
    (VarP @install_actor_helper)
    (FuncE
      @install_actor_helper
      Local
      Returns
      ($__260 Any)
      (params install_arg wasm_module arg)
      async*<$__260> Principal
      (AsyncE*
        ($@anon-async*-427.24__2 Any)
        (BlockE
          (LetD
            (TupP (VarP mode) (VarP canister_id))
            (SwitchE
              (VarE install_arg)
              (case
                (TagP new (VarP settings))
                (BlockE
                  (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
                  (LetD
                    (VarP accepted)
                    (PrimE SystemCyclesAcceptPrim (VarE available))
                  )
                  (LetD
                    (VarP sender_canister_version)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE @cycles)
                      (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
                    )
                  )
                  (LetD
                    (ObjP (canister_id (VarP canister_id)))
                    (PrimE
                      AwaitPrim
                      (PrimE
                        (CallPrim $@anon-async*-427.24__2)
                        (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                        (BlockE
                          (LetD (VarP $base/0) (VarE settings))
                          (LetD
                            (VarP $sender_canister_version/0)
                            (VarE sender_canister_version)
                          )
                          (LetD
                            (VarP $settings/0)
                            (PrimE (DotPrim settings) (VarE $base/0))
                          )
                          (NewObjE
                            Object
                            (settings $settings/0)
                            (sender_canister_version $sender_canister_version/0)
                            {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                          )
                        )
                      )
                    )
                  )
                  (PrimE
                    TupPrim
                    (PrimE (TagE install) (PrimE TupPrim))
                    (VarE canister_id)
                  )
                )
              )
              (case
                (TagP install (VarP principal1))
                (PrimE
                  TupPrim
                  (PrimE (TagE install) (PrimE TupPrim))
                  (VarE principal1)
                )
              )
              (case
                (TagP reinstall (VarP actor1))
                (PrimE
                  TupPrim
                  (PrimE (TagE reinstall) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor1))
                )
              )
              (case
                (TagP upgrade (VarP actor2))
                (PrimE
                  TupPrim
                  (PrimE (TagE upgrade) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor2))
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async*-427.24__2)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/0) (VarE mode))
                  (LetD (VarP $canister_id/0) (VarE canister_id))
                  (LetD (VarP $wasm_module/0) (VarE wasm_module))
                  (LetD (VarP $arg/0) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/1)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/1)
                    (arg $arg/0)
                    (wasm_module $wasm_module/0)
                    (canister_id $canister_id/0)
                    (mode $mode/0)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__260
      )
    )
  )
  (LetD
    (VarP @create_actor_helper)
    (FuncE
      @create_actor_helper
      Local
      Returns
      ($__261 Any)
      (params wasm_module arg)
      async<$__261> Principal
      (AsyncE
        ($@anon-async-463.79__2 Any)
        (BlockE
          (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
          (LetD (VarP accepted) (PrimE SystemCyclesAcceptPrim (VarE available)))
          (LetD
            (VarP sender_canister_version)
            (PrimE OptPrim (PrimE canister_version))
          )
          (LetD
            WildP
            (AssignE
              (VarLE @cycles)
              (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
            )
          )
          (LetD
            (ObjP (canister_id (VarP canister_id)))
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79__2)
                (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                (BlockE
                  (LetD (VarP $settings/1) (LitE NullLit))
                  (LetD
                    (VarP $sender_canister_version/2)
                    (VarE sender_canister_version)
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/2)
                    (settings $settings/1)
                    {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                  )
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79__2)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/1) (PrimE (TagE install) (PrimE TupPrim)))
                  (LetD (VarP $canister_id/1) (VarE canister_id))
                  (LetD (VarP $wasm_module/1) (VarE wasm_module))
                  (LetD (VarP $arg/1) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/3)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/3)
                    (arg $arg/1)
                    (wasm_module $wasm_module/1)
                    (canister_id $canister_id/1)
                    (mode $mode/1)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__261
      )
    )
  )
  (LetD
    (VarP @call_raw)
    (FuncE
      @call_raw
      Local
      Returns
      ($__262 Any)
      (params p m a)
      async<$__262> Blob
      (AsyncE
        ($@call_raw__2 Any)
        (PrimE AwaitPrim (PrimE call_raw (VarE p) (VarE m) (VarE a)))
        $__262
      )
    )
  )
  (LetD
    (VarP @call_succeeded)
    (FuncE
      @call_succeeded
      Local
      Returns
      Bool
      (PrimE
        (RelPrim Nat32 EqOp)
        (PrimE call_perform_status)
        (LitE (Nat32Lit 0))
      )
    )
  )
  (LetD
    (VarP @call_error)
    (FuncE
      @call_error
      Local
      Returns
      Error
      (BlockE
        (LetD (VarP status) (PrimE call_perform_status))
        (LetD (VarP message) (PrimE call_perform_message))
        (LetD
          (VarP code)
          (PrimE
            (TagE call_error)
            (BlockE
              (LetD (VarP $err_code/0) (VarE status))
              (NewObjE Object (err_code $err_code/0) {err_code : Nat32})
            )
          )
        )
        (PrimE
          (CastPrim ({#call_error : {err_code : Nat32}}, Text) Error)
          (PrimE TupPrim (VarE code) (VarE message))
        )
      )
    )
  )
  (VarD @timers ?@Node__1 (LitE NullLit))
  (LetD
    (VarP @prune)
    (FuncE
      @prune
      Local
      Returns
      (params n)
      ?@Node__1
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE NullLit))
        (case
          (OptP (VarP n))
          (IfE
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE
                IdxPrim
                (PrimE (DotPrim expire) (VarE n))
                (LitE (NatLit 0))
              )
              (LitE (Nat64Lit 0))
            )
            (PrimE (CallPrim) (VarE @prune) (PrimE (DotPrim post) (VarE n)))
            (PrimE
              OptPrim
              (BlockE
                (LetD (VarP $base/1) (VarE n))
                (LetD
                  (VarP $pre/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim pre) (VarE n))
                  )
                )
                (LetD
                  (VarP $post/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim post) (VarE n))
                  )
                )
                (LetD (VarP $delay/0) (PrimE (DotPrim delay) (VarE $base/1)))
                (LetD (VarP $expire/0) (PrimE (DotPrim expire) (VarE $base/1)))
                (LetD (VarP $id/0) (PrimE (DotPrim id) (VarE $base/1)))
                (LetD (VarP $job/0) (PrimE (DotPrim job) (VarE $base/1)))
                (NewObjE
                  Object
                  (job $job/0)
                  (id $id/0)
                  (expire $expire/0)
                  (delay $delay/0)
                  (post $post/0)
                  (pre $pre/0)
                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @nextExpiration)
    (FuncE
      @nextExpiration
      Local
      Returns
      (params n)
      Nat64
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE (Nat64Lit 0)))
        (case
          (OptP (VarP n))
          (BlockE
            (VarD
              exp
              Nat64
              (PrimE
                (CallPrim)
                (VarE @nextExpiration)
                (PrimE (DotPrim pre) (VarE n))
              )
            )
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                  )
                  (IfE
                    (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        (CallPrim)
                        (VarE @nextExpiration)
                        (PrimE (DotPrim post) (VarE n))
                      )
                    )
                    (PrimE TupPrim)
                  )
                )
                (PrimE TupPrim)
              )
            )
            (VarE exp)
          )
        )
      )
    )
  )
  (LetD
    (VarP @timer_helper)
    (FuncE
      @timer_helper
      Local
      Returns
      ($__263 Any)
      async<$__263> ()
      (AsyncE
        ($@timer_helper__2 Any)
        (BlockE
          (LetD
            (VarP Array_init)
            (FuncE
              Array_init
              Local
              Returns
              (T__105 Any)
              (params len x)
              [var T__105]
              (PrimE Array.init (VarE len) (VarE x))
            )
          )
          (LetD (VarP now) (PrimE SystemTimePrim))
          (VarD gathered Nat (LitE (NatLit 0)))
          (LetD
            (VarP thunks)
            (PrimE
              (CallPrim ?(() -> async ()))
              (VarE Array_init)
              (PrimE TupPrim (LitE (NatLit 10)) (LitE NullLit))
            )
          )
          (LetD
            (VarP gatherExpired)
            (FuncE
              gatherExpired
              Local
              Returns
              (params n)
              ()
              (SwitchE
                (VarE n)
                (case (LitP NullLit) (PrimE TupPrim))
                (case
                  (OptP (VarP n))
                  (BlockE
                    (LetD
                      WildP
                      (PrimE
                        (CallPrim)
                        (VarE gatherExpired)
                        (PrimE (DotPrim pre) (VarE n))
                      )
                    )
                    (LetD
                      WildP
                      (IfE
                        (IfE
                          (IfE
                            (PrimE
                              (RelPrim Nat64 GtOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                            (PrimE
                              (RelPrim Nat64 LeOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (VarE now)
                            )
                            (LitE (BoolLit false))
                          )
                          (PrimE
                            (RelPrim Nat LtOp)
                            (VarE gathered)
                            (PrimE array_len (VarE thunks))
                          )
                          (LitE (BoolLit false))
                        )
                        (BlockE
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE (VarE thunks) (VarE gathered))
                              (PrimE OptPrim (PrimE (DotPrim job) (VarE n)))
                            )
                          )
                          (LetD
                            WildP
                            (SwitchE
                              (PrimE (DotPrim delay) (VarE n))
                              (case
                                (AltP (LitP NullLit) (OptP (LitP (Nat64Lit 0))))
                                (PrimE TupPrim)
                              )
                              (case
                                (OptP (VarP delay))
                                (BlockE
                                  (LetD
                                    (VarP expire)
                                    (PrimE
                                      (BinPrim Nat64 AddOp)
                                      (PrimE
                                        IdxPrim
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (PrimE
                                        (BinPrim Nat64 MulOp)
                                        (VarE delay)
                                        (PrimE
                                          (BinPrim Nat64 AddOp)
                                          (LitE (Nat64Lit 1))
                                          (PrimE
                                            (BinPrim Nat64 DivOp)
                                            (PrimE
                                              (BinPrim Nat64 SubOp)
                                              (VarE now)
                                              (PrimE
                                                IdxPrim
                                                (PrimE
                                                  (DotPrim expire)
                                                  (VarE n)
                                                )
                                                (LitE (NatLit 0))
                                              )
                                            )
                                            (VarE delay)
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (LetD
                                    WildP
                                    (AssignE
                                      (IdxLE
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (LitE (Nat64Lit 0))
                                    )
                                  )
                                  (LetD
                                    (VarP reinsert)
                                    (FuncE
                                      reinsert
                                      Local
                                      Returns
                                      (params m)
                                      @Node__1
                                      (SwitchE
                                        (VarE m)
                                        (case
                                          (LitP NullLit)
                                          (BlockE
                                            (LetD (VarP $base/2) (VarE n))
                                            (LetD
                                              (VarP $expire/1)
                                              (PrimE
                                                (ArrayPrim Var Nat64)
                                                (VarE expire)
                                              )
                                            )
                                            (LetD (VarP $pre/1) (LitE NullLit))
                                            (LetD (VarP $post/1) (LitE NullLit))
                                            (LetD
                                              (VarP $delay/1)
                                              (PrimE
                                                (DotPrim delay)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $id/1)
                                              (PrimE
                                                (DotPrim id)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $job/1)
                                              (PrimE
                                                (DotPrim job)
                                                (VarE $base/2)
                                              )
                                            )
                                            (NewObjE
                                              Object
                                              (job $job/1)
                                              (id $id/1)
                                              (delay $delay/1)
                                              (post $post/1)
                                              (pre $pre/1)
                                              (expire $expire/1)
                                              {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : Null; pre : Null}
                                            )
                                          )
                                        )
                                        (case
                                          (OptP (VarP m))
                                          (BlockE
                                            (LetD
                                              WildP
                                              (PrimE
                                                AssertPrim
                                                (PrimE
                                                  (RelPrim Bool EqOp)
                                                  (PrimE
                                                    (RelPrim Nat64 EqOp)
                                                    (PrimE
                                                      IdxPrim
                                                      (PrimE
                                                        (DotPrim expire)
                                                        (VarE m)
                                                      )
                                                      (LitE (NatLit 0))
                                                    )
                                                    (LitE (Nat64Lit 0))
                                                  )
                                                  (LitE (BoolLit false))
                                                )
                                              )
                                            )
                                            (IfE
                                              (PrimE
                                                (RelPrim Nat64 LtOp)
                                                (VarE expire)
                                                (PrimE
                                                  IdxPrim
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE m)
                                                  )
                                                  (LitE (NatLit 0))
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/4) (VarE m))
                                                (LetD
                                                  (VarP $pre/3)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim pre)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/3)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/3)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/3)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/3)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $post/3)
                                                  (PrimE
                                                    (DotPrim post)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (post $post/3)
                                                  (job $job/3)
                                                  (id $id/3)
                                                  (expire $expire/3)
                                                  (delay $delay/3)
                                                  (pre $pre/3)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/3) (VarE m))
                                                (LetD
                                                  (VarP $post/2)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim post)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/2)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/2)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/2)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/2)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $pre/2)
                                                  (PrimE
                                                    (DotPrim pre)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (pre $pre/2)
                                                  (job $job/2)
                                                  (id $id/2)
                                                  (expire $expire/2)
                                                  (delay $delay/2)
                                                  (post $post/2)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (AssignE
                                    (VarLE @timers)
                                    (PrimE
                                      OptPrim
                                      (PrimE
                                        (CallPrim)
                                        (VarE reinsert)
                                        (PrimE
                                          (CallPrim)
                                          (VarE @prune)
                                          (VarE @timers)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                          )
                          (AssignE
                            (VarLE gathered)
                            (PrimE
                              (BinPrim Nat AddOp)
                              (VarE gathered)
                              (LitE (NatLit 1))
                            )
                          )
                        )
                        (PrimE TupPrim)
                      )
                    )
                    (PrimE
                      (CallPrim)
                      (VarE gatherExpired)
                      (PrimE (DotPrim post) (VarE n))
                    )
                  )
                )
              )
            )
          )
          (LetD WildP (PrimE (CallPrim) (VarE gatherExpired) (VarE @timers)))
          (LetD
            (VarP exp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
          )
          (LetD
            WildP
            (BlockE
              (LetD WildP (PrimE global_timer_set (VarE exp)))
              (PrimE TupPrim)
            )
          )
          (LetD
            WildP
            (IfE
              (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
              (AssignE (VarLE @timers) (LitE NullLit))
              (PrimE TupPrim)
            )
          )
          (BlockE
            (LetD (VarP $arr/2) (VarE thunks))
            (LetD (VarP $last/2) (PrimE GetLastArrayOffset (VarE $arr/2)))
            (VarD $indx/2 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/2) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/6
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP o)
                      (PrimE DerefArrayOffset (VarE $arr/2) (VarE $indx/2))
                    )
                    (LetD
                      WildP
                      (SwitchE
                        (VarE o)
                        (case
                          (OptP (VarP thunk))
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim $@timer_helper__2)
                                (VarE thunk)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE TupPrim)
                          )
                        )
                        (case WildP (PrimE TupPrim))
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/2) (VarE $last/2))
                      (PrimE (BreakPrim $done/6) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/2)
                        (PrimE NextArrayOffset (VarE $indx/2))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        $__263
      )
    )
  )
  (VarD @lastTimerId Nat (LitE (NatLit 0)))
  (LetD
    (VarP @setTimer)
    (FuncE
      @setTimer
      Local
      Returns
      ($__264 Any)
      (params delayNanos recurring job)
      Nat
      (BlockE
        (LetD
          WildP
          (AssignE
            (VarLE @lastTimerId)
            (PrimE (BinPrim Nat AddOp) (VarE @lastTimerId) (LitE (NatLit 1)))
          )
        )
        (LetD (VarP id) (VarE @lastTimerId))
        (LetD (VarP now) (PrimE SystemTimePrim))
        (LetD
          (VarP expire)
          (PrimE (BinPrim Nat64 AddOp) (VarE now) (VarE delayNanos))
        )
        (LetD
          (VarP delay)
          (IfE
            (VarE recurring)
            (PrimE OptPrim (VarE delayNanos))
            (LitE NullLit)
          )
        )
        (LetD
          (VarP insert)
          (FuncE
            insert
            Local
            Returns
            (params n)
            @Node__1
            (SwitchE
              (VarE n)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP $expire/4)
                    (PrimE (ArrayPrim Var Nat64) (VarE expire))
                  )
                  (LetD (VarP $id/4) (VarE id))
                  (LetD (VarP $delay/4) (VarE delay))
                  (LetD (VarP $job/4) (VarE job))
                  (LetD (VarP $pre/4) (LitE NullLit))
                  (LetD (VarP $post/4) (LitE NullLit))
                  (NewObjE
                    Object
                    (post $post/4)
                    (pre $pre/4)
                    (job $job/4)
                    (delay $delay/4)
                    (id $id/4)
                    (expire $expire/4)
                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                  )
                )
              )
              (case
                (OptP (VarP n))
                (BlockE
                  (LetD
                    WildP
                    (PrimE
                      AssertPrim
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (RelPrim Nat64 EqOp)
                          (PrimE
                            IdxPrim
                            (PrimE (DotPrim expire) (VarE n))
                            (LitE (NatLit 0))
                          )
                          (LitE (Nat64Lit 0))
                        )
                        (LitE (BoolLit false))
                      )
                    )
                  )
                  (IfE
                    (PrimE
                      (RelPrim Nat64 LtOp)
                      (VarE expire)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/6) (VarE n))
                      (LetD
                        (VarP $pre/6)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim pre) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/6)
                        (PrimE (DotPrim delay) (VarE $base/6))
                      )
                      (LetD
                        (VarP $expire/6)
                        (PrimE (DotPrim expire) (VarE $base/6))
                      )
                      (LetD (VarP $id/6) (PrimE (DotPrim id) (VarE $base/6)))
                      (LetD (VarP $job/6) (PrimE (DotPrim job) (VarE $base/6)))
                      (LetD
                        (VarP $post/6)
                        (PrimE (DotPrim post) (VarE $base/6))
                      )
                      (NewObjE
                        Object
                        (post $post/6)
                        (job $job/6)
                        (id $id/6)
                        (expire $expire/6)
                        (delay $delay/6)
                        (pre $pre/6)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/5) (VarE n))
                      (LetD
                        (VarP $post/5)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/5)
                        (PrimE (DotPrim delay) (VarE $base/5))
                      )
                      (LetD
                        (VarP $expire/5)
                        (PrimE (DotPrim expire) (VarE $base/5))
                      )
                      (LetD (VarP $id/5) (PrimE (DotPrim id) (VarE $base/5)))
                      (LetD (VarP $job/5) (PrimE (DotPrim job) (VarE $base/5)))
                      (LetD (VarP $pre/5) (PrimE (DotPrim pre) (VarE $base/5)))
                      (NewObjE
                        Object
                        (pre $pre/5)
                        (job $job/5)
                        (id $id/5)
                        (expire $expire/5)
                        (delay $delay/5)
                        (post $post/5)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE
              OptPrim
              (PrimE
                (CallPrim)
                (VarE insert)
                (PrimE (CallPrim) (VarE @prune) (VarE @timers))
              )
            )
          )
        )
        (LetD
          (VarP exp)
          (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
        )
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
            (AssignE (VarLE @timers) (LitE NullLit))
            (PrimE TupPrim)
          )
        )
        (LetD
          WildP
          (BlockE
            (LetD WildP (PrimE global_timer_set (VarE exp)))
            (PrimE TupPrim)
          )
        )
        (VarE id)
      )
    )
  )
  (LetD
    (VarP @cancelTimer)
    (FuncE
      @cancelTimer
      Local
      Returns
      (params id)
      ()
      (BlockE
        (LetD
          (VarP graft)
          (FuncE
            graft
            Local
            Returns
            (params onto branch)
            ?@Node__1
            (SwitchE
              (PrimE TupPrim (VarE onto) (VarE branch))
              (case (TupP (LitP NullLit) (LitP NullLit)) (LitE NullLit))
              (case (TupP (LitP NullLit) WildP) (VarE branch))
              (case (TupP WildP (LitP NullLit)) (VarE onto))
              (case
                (TupP (OptP (VarP onto)) WildP)
                (PrimE
                  OptPrim
                  (BlockE
                    (LetD (VarP $base/7) (VarE onto))
                    (LetD
                      (VarP $post/7)
                      (PrimE
                        (CallPrim)
                        (VarE graft)
                        (PrimE
                          TupPrim
                          (PrimE (DotPrim post) (VarE onto))
                          (VarE branch)
                        )
                      )
                    )
                    (LetD
                      (VarP $delay/7)
                      (PrimE (DotPrim delay) (VarE $base/7))
                    )
                    (LetD
                      (VarP $expire/7)
                      (PrimE (DotPrim expire) (VarE $base/7))
                    )
                    (LetD (VarP $id/7) (PrimE (DotPrim id) (VarE $base/7)))
                    (LetD (VarP $job/7) (PrimE (DotPrim job) (VarE $base/7)))
                    (LetD (VarP $pre/7) (PrimE (DotPrim pre) (VarE $base/7)))
                    (NewObjE
                      Object
                      (pre $pre/7)
                      (job $job/7)
                      (id $id/7)
                      (expire $expire/7)
                      (delay $delay/7)
                      (post $post/7)
                      {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          (VarP hunt)
          (FuncE
            hunt
            Local
            Returns
            (params n)
            ?@Node__1
            (SwitchE
              (VarE n)
              (case (LitP NullLit) (VarE n))
              (case
                (OptP
                  (ObjP (id (VarP node)) (pre (VarP pre)) (post (VarP post)))
                )
                (IfE
                  (PrimE (RelPrim Nat EqOp) (VarE node) (VarE id))
                  (PrimE
                    (CallPrim)
                    (VarE graft)
                    (PrimE TupPrim (VarE pre) (VarE post))
                  )
                  (LabelE
                    !
                    ?@Node__1
                    (PrimE
                      OptPrim
                      (BlockE
                        (LetD
                          (VarP $base/8)
                          (SwitchE
                            (VarE n)
                            (case
                              (LitP NullLit)
                              (PrimE (BreakPrim !) (LitE NullLit))
                            )
                            (case (OptP (VarP $v/1)) (VarE $v/1))
                          )
                        )
                        (LetD
                          (VarP $pre/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE pre))
                        )
                        (LetD
                          (VarP $post/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE post))
                        )
                        (LetD
                          (VarP $delay/8)
                          (PrimE (DotPrim delay) (VarE $base/8))
                        )
                        (LetD
                          (VarP $expire/8)
                          (PrimE (DotPrim expire) (VarE $base/8))
                        )
                        (LetD (VarP $id/8) (PrimE (DotPrim id) (VarE $base/8)))
                        (LetD
                          (VarP $job/8)
                          (PrimE (DotPrim job) (VarE $base/8))
                        )
                        (NewObjE
                          Object
                          (job $job/8)
                          (id $id/8)
                          (expire $expire/8)
                          (delay $delay/8)
                          (post $post/8)
                          (pre $pre/8)
                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE (CallPrim) (VarE hunt) (VarE @timers))
          )
        )
        (IfE
          (PrimE
            (RelPrim Nat64 EqOp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
            (LitE (Nat64Lit 0))
          )
          (BlockE
            (LetD
              WildP
              (BlockE
                (LetD WildP (PrimE global_timer_set (LitE (Nat64Lit 0))))
                (PrimE TupPrim)
              )
            )
            (AssignE (VarLE @timers) (LitE NullLit))
          )
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @set_global_timer)
    (FuncE
      @set_global_timer
      Local
      Returns
      (params time)
      ()
      (BlockE (LetD WildP (PrimE global_timer_set (VarE time))) (PrimE TupPrim))
    )
  )
  (LetD
    (VarP file$@prim)
    (BlockE
      (LetD (VarP Types) (NewObjE Module module {}))
      (LetD
        (VarP abs)
        (FuncE abs Local Returns (params x) Nat (PrimE abs (VarE x)))
      )
      (LetD
        (VarP shiftLeft)
        (FuncE
          shiftLeft
          Local
          Returns
          (params x shift)
          Nat
          (PrimE lsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP shiftRight)
        (FuncE
          shiftRight
          Local
          Returns
          (params x shift)
          Nat
          (PrimE rsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP idlHash)
        (FuncE idlHash Local Returns (params x) Nat32 (PrimE idlHash (VarE x)))
      )
      (LetD
        (VarP debugPrint)
        (FuncE debugPrint Local Returns (params x) () (PrimE print (VarE x)))
      )
      (LetD
        (VarP debugPrintNat)
        (FuncE
          debugPrintNat
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Nat) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintInt)
        (FuncE
          debugPrintInt
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Int) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintChar)
        (FuncE
          debugPrintChar
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE charToText) (VarE x))
          )
        )
      )
      (LetD
        (VarP trap)
        (FuncE trap Local Returns (params x) None__2 (PrimE trap (VarE x)))
      )
      (LetD
        (VarP rts_version)
        (FuncE rts_version Local Returns Text (PrimE rts_version))
      )
      (LetD
        (VarP rts_memory_size)
        (FuncE rts_memory_size Local Returns Nat (PrimE rts_memory_size))
      )
      (LetD
        (VarP rts_heap_size)
        (FuncE rts_heap_size Local Returns Nat (PrimE rts_heap_size))
      )
      (LetD
        (VarP rts_total_allocation)
        (FuncE
          rts_total_allocation
          Local
          Returns
          Nat
          (PrimE rts_total_allocation)
        )
      )
      (LetD
        (VarP rts_reclaimed)
        (FuncE rts_reclaimed Local Returns Nat (PrimE rts_reclaimed))
      )
      (LetD
        (VarP rts_max_live_size)
        (FuncE rts_max_live_size Local Returns Nat (PrimE rts_max_live_size))
      )
      (LetD
        (VarP rts_max_stack_size)
        (FuncE rts_max_stack_size Local Returns Nat (PrimE rts_max_stack_size))
      )
      (LetD
        (VarP rts_callback_table_count)
        (FuncE
          rts_callback_table_count
          Local
          Returns
          Nat
          (PrimE rts_callback_table_count)
        )
      )
      (LetD
        (VarP rts_callback_table_size)
        (FuncE
          rts_callback_table_size
          Local
          Returns
          Nat
          (PrimE rts_callback_table_size)
        )
      )
      (LetD
        (VarP rts_mutator_instructions)
        (FuncE
          rts_mutator_instructions
          Local
          Returns
          Nat
          (PrimE rts_mutator_instructions)
        )
      )
      (LetD
        (VarP rts_collector_instructions)
        (FuncE
          rts_collector_instructions
          Local
          Returns
          Nat
          (PrimE rts_collector_instructions)
        )
      )
      (LetD
        (VarP rts_stable_memory_size)
        (FuncE
          rts_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_stable_memory_size)
        )
      )
      (LetD
        (VarP rts_logical_stable_memory_size)
        (FuncE
          rts_logical_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_logical_stable_memory_size)
        )
      )
      (LetD (VarP int64ToInt) (VarE @int64ToInt))
      (LetD (VarP int32ToInt) (VarE @int32ToInt))
      (LetD (VarP int16ToInt) (VarE @int16ToInt))
      (LetD (VarP int8ToInt) (VarE @int8ToInt))
      (LetD (VarP nat64ToNat) (VarE @nat64ToNat))
      (LetD (VarP nat32ToNat) (VarE @nat32ToNat))
      (LetD (VarP nat16ToNat) (VarE @nat16ToNat))
      (LetD (VarP nat8ToNat) (VarE @nat8ToNat))
      (LetD
        (VarP intToInt64)
        (FuncE
          intToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32)
        (FuncE
          intToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16)
        (FuncE
          intToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8)
        (FuncE
          intToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP natToNat64)
        (FuncE
          natToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat Nat64) (VarE n))
        )
      )
      (LetD
        (VarP natToNat32)
        (FuncE
          natToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat Nat32) (VarE n))
        )
      )
      (LetD
        (VarP natToNat16)
        (FuncE
          natToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat Nat16) (VarE n))
        )
      )
      (LetD
        (VarP natToNat8)
        (FuncE
          natToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat Nat8) (VarE n))
        )
      )
      (LetD
        (VarP intToInt64Wrap)
        (FuncE
          intToInt64Wrap
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32Wrap)
        (FuncE
          intToInt32Wrap
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16Wrap)
        (FuncE
          intToInt16Wrap
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8Wrap)
        (FuncE
          intToInt8Wrap
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP intToNat64Wrap)
        (FuncE
          intToNat64Wrap
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int Nat64) (VarE n))
        )
      )
      (LetD
        (VarP intToNat32Wrap)
        (FuncE
          intToNat32Wrap
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int Nat32) (VarE n))
        )
      )
      (LetD
        (VarP intToNat16Wrap)
        (FuncE
          intToNat16Wrap
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int Nat16) (VarE n))
        )
      )
      (LetD
        (VarP intToNat8Wrap)
        (FuncE
          intToNat8Wrap
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int64ToNat64)
        (FuncE
          int64ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int64 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToInt64)
        (FuncE
          nat64ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Nat64 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int32ToNat32)
        (FuncE
          int32ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int32 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToInt32)
        (FuncE
          nat32ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Nat32 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int16ToNat16)
        (FuncE
          int16ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int16 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToInt16)
        (FuncE
          nat16ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Nat16 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int8ToNat8)
        (FuncE
          int8ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int8 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToInt8)
        (FuncE
          nat8ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Nat8 Int8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToNat16)
        (FuncE
          nat8ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat8 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat32)
        (FuncE
          nat16ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat16 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat64)
        (FuncE
          nat32ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat32 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToNat32)
        (FuncE
          nat64ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat64 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat16)
        (FuncE
          nat32ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat32 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat8)
        (FuncE
          nat16ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat16 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int8ToInt16)
        (FuncE
          int8ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int8 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt32)
        (FuncE
          int16ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int16 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt64)
        (FuncE
          int32ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int32 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int64ToInt32)
        (FuncE
          int64ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int64 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt16)
        (FuncE
          int32ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int32 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt8)
        (FuncE
          int16ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int16 Int8) (VarE n))
        )
      )
      (LetD
        (VarP charToNat32)
        (FuncE
          charToNat32
          Local
          Returns
          (params c)
          Nat32
          (PrimE (NumConvWrapPrim Char Nat32) (VarE c))
        )
      )
      (LetD
        (VarP nat32ToChar)
        (FuncE
          nat32ToChar
          Local
          Returns
          (params w)
          Char
          (PrimE (NumConvTrapPrim Nat32 Char) (VarE w))
        )
      )
      (LetD
        (VarP charToText)
        (FuncE
          charToText
          Local
          Returns
          (params c)
          Text
          (PrimE conv_Char_Text (VarE c))
        )
      )
      (LetD
        (VarP charToUpper)
        (FuncE
          charToUpper
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_upper (VarE c))
        )
      )
      (LetD
        (VarP charToLower)
        (FuncE
          charToLower
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_lower (VarE c))
        )
      )
      (LetD
        (VarP charIsWhitespace)
        (FuncE
          charIsWhitespace
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_whitespace (VarE c))
        )
      )
      (LetD
        (VarP charIsLowercase)
        (FuncE
          charIsLowercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_lowercase (VarE c))
        )
      )
      (LetD
        (VarP charIsUppercase)
        (FuncE
          charIsUppercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_uppercase (VarE c))
        )
      )
      (LetD
        (VarP charIsAlphabetic)
        (FuncE
          charIsAlphabetic
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_alphabetic (VarE c))
        )
      )
      (LetD
        (VarP blobCompare)
        (FuncE
          blobCompare
          Local
          Returns
          (params b1 b2)
          Int8
          (PrimE blob_compare (VarE b1) (VarE b2))
        )
      )
      (LetD
        (VarP hashBlob)
        (FuncE
          hashBlob
          Local
          Returns
          (params b)
          Nat32
          (PrimE crc32Hash (VarE b))
        )
      )
      (LetD
        (VarP decodeUtf8)
        (FuncE
          decodeUtf8
          Local
          Returns
          (params b)
          ?Text
          (PrimE DecodeUtf8 (VarE b))
        )
      )
      (LetD
        (VarP encodeUtf8)
        (FuncE
          encodeUtf8
          Local
          Returns
          (params t)
          Blob
          (PrimE EncodeUtf8 (VarE t))
        )
      )
      (LetD
        (VarP textCompare)
        (FuncE
          textCompare
          Local
          Returns
          (params t1 t2)
          Int8
          (PrimE text_compare (VarE t1) (VarE t2))
        )
      )
      (LetD
        (VarP textLowercase)
        (FuncE
          textLowercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_lowercase (VarE t))
        )
      )
      (LetD
        (VarP textUppercase)
        (FuncE
          textUppercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_uppercase (VarE t))
        )
      )
      (LetD
        (VarP popcntNat8)
        (FuncE
          popcntNat8
          Local
          Returns
          (params w)
          Nat8
          (PrimE popcnt8 (VarE w))
        )
      )
      (LetD
        (VarP clzNat8)
        (FuncE clzNat8 Local Returns (params w) Nat8 (PrimE clz8 (VarE w)))
      )
      (LetD
        (VarP ctzNat8)
        (FuncE ctzNat8 Local Returns (params w) Nat8 (PrimE ctz8 (VarE w)))
      )
      (LetD
        (VarP btstNat8)
        (FuncE
          btstNat8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat8 EqOp)
              (PrimE btst8 (VarE w) (VarE amount))
              (LitE (Nat8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat16)
        (FuncE
          popcntNat16
          Local
          Returns
          (params w)
          Nat16
          (PrimE popcnt16 (VarE w))
        )
      )
      (LetD
        (VarP clzNat16)
        (FuncE clzNat16 Local Returns (params w) Nat16 (PrimE clz16 (VarE w)))
      )
      (LetD
        (VarP ctzNat16)
        (FuncE ctzNat16 Local Returns (params w) Nat16 (PrimE ctz16 (VarE w)))
      )
      (LetD
        (VarP btstNat16)
        (FuncE
          btstNat16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat16 EqOp)
              (PrimE btst16 (VarE w) (VarE amount))
              (LitE (Nat16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat32)
        (FuncE
          popcntNat32
          Local
          Returns
          (params w)
          Nat32
          (PrimE popcnt32 (VarE w))
        )
      )
      (LetD
        (VarP clzNat32)
        (FuncE clzNat32 Local Returns (params w) Nat32 (PrimE clz32 (VarE w)))
      )
      (LetD
        (VarP ctzNat32)
        (FuncE ctzNat32 Local Returns (params w) Nat32 (PrimE ctz32 (VarE w)))
      )
      (LetD
        (VarP btstNat32)
        (FuncE
          btstNat32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat32 EqOp)
              (PrimE btst32 (VarE w) (VarE amount))
              (LitE (Nat32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat64)
        (FuncE
          popcntNat64
          Local
          Returns
          (params w)
          Nat64
          (PrimE popcnt64 (VarE w))
        )
      )
      (LetD
        (VarP clzNat64)
        (FuncE clzNat64 Local Returns (params w) Nat64 (PrimE clz64 (VarE w)))
      )
      (LetD
        (VarP ctzNat64)
        (FuncE ctzNat64 Local Returns (params w) Nat64 (PrimE ctz64 (VarE w)))
      )
      (LetD
        (VarP btstNat64)
        (FuncE
          btstNat64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE btst64 (VarE w) (VarE amount))
              (LitE (Nat64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt8)
        (FuncE
          popcntInt8
          Local
          Returns
          (params w)
          Int8
          (PrimE popcntInt8 (VarE w))
        )
      )
      (LetD
        (VarP clzInt8)
        (FuncE clzInt8 Local Returns (params w) Int8 (PrimE clzInt8 (VarE w)))
      )
      (LetD
        (VarP ctzInt8)
        (FuncE ctzInt8 Local Returns (params w) Int8 (PrimE ctzInt8 (VarE w)))
      )
      (LetD
        (VarP btstInt8)
        (FuncE
          btstInt8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int8 EqOp)
              (PrimE btstInt8 (VarE w) (VarE amount))
              (LitE (Int8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt16)
        (FuncE
          popcntInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE popcntInt16 (VarE w))
        )
      )
      (LetD
        (VarP clzInt16)
        (FuncE
          clzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE clzInt16 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt16)
        (FuncE
          ctzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE ctzInt16 (VarE w))
        )
      )
      (LetD
        (VarP btstInt16)
        (FuncE
          btstInt16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int16 EqOp)
              (PrimE btstInt16 (VarE w) (VarE amount))
              (LitE (Int16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt32)
        (FuncE
          popcntInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE popcntInt32 (VarE w))
        )
      )
      (LetD
        (VarP clzInt32)
        (FuncE
          clzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE clzInt32 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt32)
        (FuncE
          ctzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE ctzInt32 (VarE w))
        )
      )
      (LetD
        (VarP btstInt32)
        (FuncE
          btstInt32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int32 EqOp)
              (PrimE btstInt32 (VarE w) (VarE amount))
              (LitE (Int32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt64)
        (FuncE
          popcntInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE popcntInt64 (VarE w))
        )
      )
      (LetD
        (VarP clzInt64)
        (FuncE
          clzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE clzInt64 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt64)
        (FuncE
          ctzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE ctzInt64 (VarE w))
        )
      )
      (LetD
        (VarP btstInt64)
        (FuncE
          btstInt64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int64 EqOp)
              (PrimE btstInt64 (VarE w) (VarE amount))
              (LitE (Int64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP floatAbs)
        (FuncE floatAbs Local Returns (params f) Float (PrimE fabs (VarE f)))
      )
      (LetD
        (VarP floatSqrt)
        (FuncE floatSqrt Local Returns (params f) Float (PrimE fsqrt (VarE f)))
      )
      (LetD
        (VarP floatCeil)
        (FuncE floatCeil Local Returns (params f) Float (PrimE fceil (VarE f)))
      )
      (LetD
        (VarP floatFloor)
        (FuncE
          floatFloor
          Local
          Returns
          (params f)
          Float
          (PrimE ffloor (VarE f))
        )
      )
      (LetD
        (VarP floatTrunc)
        (FuncE
          floatTrunc
          Local
          Returns
          (params f)
          Float
          (PrimE ftrunc (VarE f))
        )
      )
      (LetD
        (VarP floatNearest)
        (FuncE
          floatNearest
          Local
          Returns
          (params f)
          Float
          (PrimE fnearest (VarE f))
        )
      )
      (LetD
        (VarP floatMin)
        (FuncE
          floatMin
          Local
          Returns
          (params f g)
          Float
          (PrimE fmin (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatMax)
        (FuncE
          floatMax
          Local
          Returns
          (params f g)
          Float
          (PrimE fmax (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatCopySign)
        (FuncE
          floatCopySign
          Local
          Returns
          (params f g)
          Float
          (PrimE fcopysign (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatToInt)
        (FuncE
          floatToInt
          Local
          Returns
          (params f)
          Int
          (PrimE (NumConvTrapPrim Float Int) (VarE f))
        )
      )
      (LetD
        (VarP intToFloat)
        (FuncE
          intToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int Float) (VarE n))
        )
      )
      (LetD
        (VarP floatToInt64)
        (FuncE
          floatToInt64
          Local
          Returns
          (params f)
          Int64
          (PrimE (NumConvTrapPrim Float Int64) (VarE f))
        )
      )
      (LetD
        (VarP int64ToFloat)
        (FuncE
          int64ToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int64 Float) (VarE n))
        )
      )
      (LetD (VarP floatToText) (VarE @text_of_Float))
      (LetD
        (VarP floatToFormattedText)
        (FuncE
          floatToFormattedText
          Local
          Returns
          (params f prec mode)
          Text
          (PrimE fmtFloat->Text (VarE f) (VarE prec) (VarE mode))
        )
      )
      (LetD
        (VarP sin)
        (FuncE sin Local Returns (params f) Float (PrimE fsin (VarE f)))
      )
      (LetD
        (VarP cos)
        (FuncE cos Local Returns (params f) Float (PrimE fcos (VarE f)))
      )
      (LetD
        (VarP tan)
        (FuncE tan Local Returns (params f) Float (PrimE ftan (VarE f)))
      )
      (LetD
        (VarP arcsin)
        (FuncE arcsin Local Returns (params f) Float (PrimE fasin (VarE f)))
      )
      (LetD
        (VarP arccos)
        (FuncE arccos Local Returns (params f) Float (PrimE facos (VarE f)))
      )
      (LetD
        (VarP arctan)
        (FuncE arctan Local Returns (params f) Float (PrimE fatan (VarE f)))
      )
      (LetD
        (VarP arctan2)
        (FuncE
          arctan2
          Local
          Returns
          (params y x)
          Float
          (PrimE fatan2 (VarE y) (VarE x))
        )
      )
      (LetD
        (VarP exp)
        (FuncE exp Local Returns (params f) Float (PrimE fexp (VarE f)))
      )
      (LetD
        (VarP log)
        (FuncE log Local Returns (params f) Float (PrimE flog (VarE f)))
      )
      (LetD
        (VarP Array_init)
        (FuncE
          Array_init
          Local
          Returns
          (T__106 Any)
          (params len x)
          [var T__106]
          (PrimE Array.init (VarE len) (VarE x))
        )
      )
      (LetD
        (VarP Array_tabulate)
        (FuncE
          Array_tabulate
          Local
          Returns
          (T__107 Any)
          (params len gen)
          [T__107]
          (PrimE Array.tabulate (VarE len) (VarE gen))
        )
      )
      (LetD
        (VarP blobToArray)
        (FuncE
          blobToArray
          Local
          Returns
          (params b)
          [Nat8]
          (PrimE blobToArray (VarE b))
        )
      )
      (LetD
        (VarP blobToArrayMut)
        (FuncE
          blobToArrayMut
          Local
          Returns
          (params b)
          [var Nat8]
          (PrimE blobToArrayMut (VarE b))
        )
      )
      (LetD
        (VarP arrayToBlob)
        (FuncE
          arrayToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayToBlob (VarE a))
        )
      )
      (LetD
        (VarP arrayMutToBlob)
        (FuncE
          arrayMutToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayMutToBlob (VarE a))
        )
      )
      (LetD
        (VarP error)
        (FuncE
          error
          Local
          Returns
          (params message)
          Error
          (BlockE
            (LetD
              (VarP e)
              (PrimE
                TupPrim
                (PrimE (TagE canister_reject) (PrimE TupPrim))
                (VarE message)
              )
            )
            (PrimE (CastPrim (ErrorCode__1, Text) Error) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorCode)
        (FuncE
          errorCode
          Local
          Returns
          (params e)
          ErrorCode__1
          (PrimE
            (ProjPrim 0)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorMessage)
        (FuncE
          errorMessage
          Local
          Returns
          (params e)
          Text
          (PrimE
            (ProjPrim 1)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD (VarP time) (FuncE time Local Returns Nat64 (PrimE SystemTimePrim)))
      (LetD
        (VarP blobOfPrincipal)
        (FuncE
          blobOfPrincipal
          Local
          Returns
          (params id)
          Blob
          (PrimE (CastPrim Principal Blob) (VarE id))
        )
      )
      (LetD
        (VarP principalOfBlob)
        (FuncE
          principalOfBlob
          Local
          Returns
          (params act)
          Principal
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE
                  (RelPrim Nat GtOp)
                  (PrimE blob_size (VarE act))
                  (LitE (NatLit 29))
                )
                (PrimE
                  (CallPrim)
                  (VarE trap)
                  (LitE (TextLit blob too long for principal))
                )
                (PrimE TupPrim)
              )
            )
            (PrimE (CastPrim Blob Principal) (VarE act))
          )
        )
      )
      (LetD
        (VarP principalOfActor)
        (FuncE
          principalOfActor
          Local
          Returns
          (params act)
          Principal
          (PrimE (CastPrim actor {} Principal) (VarE act))
        )
      )
      (LetD
        (VarP isController)
        (FuncE
          isController
          Local
          Returns
          (params p)
          Bool
          (PrimE is_controller (VarE p))
        )
      )
      (LetD
        (VarP canisterVersion)
        (FuncE canisterVersion Local Returns Nat64 (PrimE canister_version))
      )
      (LetD (VarP createActor) (VarE @create_actor_helper))
      (LetD
        (VarP cyclesBalance)
        (FuncE cyclesBalance Local Returns Nat (PrimE SystemCyclesBalancePrim))
      )
      (LetD
        (VarP cyclesAvailable)
        (FuncE
          cyclesAvailable
          Local
          Returns
          Nat
          (PrimE SystemCyclesAvailablePrim)
        )
      )
      (LetD
        (VarP cyclesRefunded)
        (FuncE cyclesRefunded Local Returns Nat (VarE @refund))
      )
      (LetD
        (VarP cyclesAccept)
        (FuncE
          cyclesAccept
          Local
          Returns
          ($__265 Any)
          (params amount)
          Nat
          (PrimE SystemCyclesAcceptPrim (VarE amount))
        )
      )
      (LetD
        (VarP cyclesAdd)
        (FuncE
          cyclesAdd
          Local
          Returns
          ($__266 Any)
          (params amount)
          ()
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat EqOp) (VarE amount) (LitE (NatLit 0)))
                (PrimE RetPrim (PrimE TupPrim))
                (PrimE TupPrim)
              )
            )
            (LetD
              WildP
              (AssignE
                (VarLE @cycles)
                (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE amount))
              )
            )
            (IfE
              (PrimE
                (RelPrim Nat GtOp)
                (VarE @cycles)
                (LitE
                  (NatLit 340_282_366_920_938_463_463_374_607_431_768_211_455)
                )
              )
              (PrimE
                (CallPrim)
                (VarE trap)
                (LitE (TextLit cannot add more than 2^128 cycles))
              )
              (PrimE TupPrim)
            )
          )
        )
      )
      (LetD
        (VarP setCertifiedData)
        (FuncE
          setCertifiedData
          Local
          Returns
          (params data)
          ()
          (PrimE SetCertifiedData (VarE data))
        )
      )
      (LetD
        (VarP getCertificate)
        (FuncE getCertificate Local Returns ?Blob (PrimE GetCertificate))
      )
      (LetD
        (VarP stableMemorySize)
        (FuncE stableMemorySize Local Returns Nat64 (PrimE stableMemorySize))
      )
      (LetD
        (VarP stableMemoryGrow)
        (FuncE
          stableMemoryGrow
          Local
          Returns
          (params pages)
          Nat64
          (PrimE stableMemoryGrow (VarE pages))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat32)
        (FuncE
          stableMemoryLoadNat32
          Local
          Returns
          (params offset)
          Nat32
          (PrimE stableMemoryLoadNat32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat32)
        (FuncE
          stableMemoryStoreNat32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat8)
        (FuncE
          stableMemoryLoadNat8
          Local
          Returns
          (params offset)
          Nat8
          (PrimE stableMemoryLoadNat8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat8)
        (FuncE
          stableMemoryStoreNat8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat16)
        (FuncE
          stableMemoryLoadNat16
          Local
          Returns
          (params offset)
          Nat16
          (PrimE stableMemoryLoadNat16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat16)
        (FuncE
          stableMemoryStoreNat16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat64)
        (FuncE
          stableMemoryLoadNat64
          Local
          Returns
          (params offset)
          Nat64
          (PrimE stableMemoryLoadNat64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat64)
        (FuncE
          stableMemoryStoreNat64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt32)
        (FuncE
          stableMemoryLoadInt32
          Local
          Returns
          (params offset)
          Int32
          (PrimE stableMemoryLoadInt32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt32)
        (FuncE
          stableMemoryStoreInt32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt8)
        (FuncE
          stableMemoryLoadInt8
          Local
          Returns
          (params offset)
          Int8
          (PrimE stableMemoryLoadInt8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt8)
        (FuncE
          stableMemoryStoreInt8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt16)
        (FuncE
          stableMemoryLoadInt16
          Local
          Returns
          (params offset)
          Int16
          (PrimE stableMemoryLoadInt16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt16)
        (FuncE
          stableMemoryStoreInt16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt64)
        (FuncE
          stableMemoryLoadInt64
          Local
          Returns
          (params offset)
          Int64
          (PrimE stableMemoryLoadInt64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt64)
        (FuncE
          stableMemoryStoreInt64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadFloat)
        (FuncE
          stableMemoryLoadFloat
          Local
          Returns
          (params offset)
          Float
          (PrimE stableMemoryLoadFloat (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreFloat)
        (FuncE
          stableMemoryStoreFloat
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreFloat (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadBlob)
        (FuncE
          stableMemoryLoadBlob
          Local
          Returns
          (params offset size)
          Blob
          (PrimE stableMemoryLoadBlob (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP stableMemoryStoreBlob)
        (FuncE
          stableMemoryStoreBlob
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreBlob (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableVarQuery)
        (FuncE
          stableVarQuery
          Local
          Returns
          shared query () -> async {size : Nat64}
          (PrimE stableVarQuery)
        )
      )
      (LetD
        (VarP regionNew)
        (FuncE regionNew Local Returns Region (PrimE regionNew))
      )
      (LetD
        (VarP regionId)
        (FuncE regionId Local Returns (params r) Nat (PrimE regionId (VarE r)))
      )
      (LetD
        (VarP regionSize)
        (FuncE
          regionSize
          Local
          Returns
          (params r)
          Nat64
          (PrimE regionSize (VarE r))
        )
      )
      (LetD
        (VarP regionGrow)
        (FuncE
          regionGrow
          Local
          Returns
          (params r pages)
          Nat64
          (PrimE regionGrow (VarE r) (VarE pages))
        )
      )
      (LetD
        (VarP regionLoadNat32)
        (FuncE
          regionLoadNat32
          Local
          Returns
          (params r offset)
          Nat32
          (PrimE regionLoadNat32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat32)
        (FuncE
          regionStoreNat32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat8)
        (FuncE
          regionLoadNat8
          Local
          Returns
          (params r offset)
          Nat8
          (PrimE regionLoadNat8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat8)
        (FuncE
          regionStoreNat8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat16)
        (FuncE
          regionLoadNat16
          Local
          Returns
          (params r offset)
          Nat16
          (PrimE regionLoadNat16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat16)
        (FuncE
          regionStoreNat16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat64)
        (FuncE
          regionLoadNat64
          Local
          Returns
          (params r offset)
          Nat64
          (PrimE regionLoadNat64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat64)
        (FuncE
          regionStoreNat64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt32)
        (FuncE
          regionLoadInt32
          Local
          Returns
          (params r offset)
          Int32
          (PrimE regionLoadInt32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt32)
        (FuncE
          regionStoreInt32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt8)
        (FuncE
          regionLoadInt8
          Local
          Returns
          (params r offset)
          Int8
          (PrimE regionLoadInt8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt8)
        (FuncE
          regionStoreInt8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt16)
        (FuncE
          regionLoadInt16
          Local
          Returns
          (params r offset)
          Int16
          (PrimE regionLoadInt16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt16)
        (FuncE
          regionStoreInt16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt64)
        (FuncE
          regionLoadInt64
          Local
          Returns
          (params r offset)
          Int64
          (PrimE regionLoadInt64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt64)
        (FuncE
          regionStoreInt64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadFloat)
        (FuncE
          regionLoadFloat
          Local
          Returns
          (params r offset)
          Float
          (PrimE regionLoadFloat (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreFloat)
        (FuncE
          regionStoreFloat
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreFloat (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadBlob)
        (FuncE
          regionLoadBlob
          Local
          Returns
          (params r offset size)
          Blob
          (PrimE regionLoadBlob (VarE r) (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP regionStoreBlob)
        (FuncE
          regionStoreBlob
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreBlob (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD (VarP call_raw) (VarE @call_raw))
      (LetD
        (VarP performanceCounter)
        (FuncE
          performanceCounter
          Local
          Returns
          (params counter)
          Nat64
          (PrimE performanceCounter (VarE counter))
        )
      )
      (LetD
        (VarP forall)
        (FuncE
          forall
          Local
          Returns
          (T__108 Any)
          (params f)
          Bool
          (PrimE forall (VarE f))
        )
      )
      (LetD
        (VarP exists)
        (FuncE
          exists
          Local
          Returns
          (T__109 Any)
          (params f)
          Bool
          (PrimE exists (VarE f))
        )
      )
      (LetD
        (VarP Ret)
        (FuncE Ret Local Returns (T__110 Any) T__110 (PrimE viperRet))
      )
      (LetD (VarP setTimer) (VarE @setTimer))
      (LetD (VarP cancelTimer) (VarE @cancelTimer))
      (NewObjE
        Module
        (trap trap)
        (time time)
        (textUppercase textUppercase)
        (textLowercase textLowercase)
        (textCompare textCompare)
        (tan tan)
        (stableVarQuery stableVarQuery)
        (stableMemoryStoreNat8 stableMemoryStoreNat8)
        (stableMemoryStoreNat64 stableMemoryStoreNat64)
        (stableMemoryStoreNat32 stableMemoryStoreNat32)
        (stableMemoryStoreNat16 stableMemoryStoreNat16)
        (stableMemoryStoreInt8 stableMemoryStoreInt8)
        (stableMemoryStoreInt64 stableMemoryStoreInt64)
        (stableMemoryStoreInt32 stableMemoryStoreInt32)
        (stableMemoryStoreInt16 stableMemoryStoreInt16)
        (stableMemoryStoreFloat stableMemoryStoreFloat)
        (stableMemoryStoreBlob stableMemoryStoreBlob)
        (stableMemorySize stableMemorySize)
        (stableMemoryLoadNat8 stableMemoryLoadNat8)
        (stableMemoryLoadNat64 stableMemoryLoadNat64)
        (stableMemoryLoadNat32 stableMemoryLoadNat32)
        (stableMemoryLoadNat16 stableMemoryLoadNat16)
        (stableMemoryLoadInt8 stableMemoryLoadInt8)
        (stableMemoryLoadInt64 stableMemoryLoadInt64)
        (stableMemoryLoadInt32 stableMemoryLoadInt32)
        (stableMemoryLoadInt16 stableMemoryLoadInt16)
        (stableMemoryLoadFloat stableMemoryLoadFloat)
        (stableMemoryLoadBlob stableMemoryLoadBlob)
        (stableMemoryGrow stableMemoryGrow)
        (sin sin)
        (shiftRight shiftRight)
        (shiftLeft shiftLeft)
        (setTimer setTimer)
        (setCertifiedData setCertifiedData)
        (rts_version rts_version)
        (rts_total_allocation rts_total_allocation)
        (rts_stable_memory_size rts_stable_memory_size)
        (rts_reclaimed rts_reclaimed)
        (rts_mutator_instructions rts_mutator_instructions)
        (rts_memory_size rts_memory_size)
        (rts_max_stack_size rts_max_stack_size)
        (rts_max_live_size rts_max_live_size)
        (rts_logical_stable_memory_size rts_logical_stable_memory_size)
        (rts_heap_size rts_heap_size)
        (rts_collector_instructions rts_collector_instructions)
        (rts_callback_table_size rts_callback_table_size)
        (rts_callback_table_count rts_callback_table_count)
        (regionStoreNat8 regionStoreNat8)
        (regionStoreNat64 regionStoreNat64)
        (regionStoreNat32 regionStoreNat32)
        (regionStoreNat16 regionStoreNat16)
        (regionStoreInt8 regionStoreInt8)
        (regionStoreInt64 regionStoreInt64)
        (regionStoreInt32 regionStoreInt32)
        (regionStoreInt16 regionStoreInt16)
        (regionStoreFloat regionStoreFloat)
        (regionStoreBlob regionStoreBlob)
        (regionSize regionSize)
        (regionNew regionNew)
        (regionLoadNat8 regionLoadNat8)
        (regionLoadNat64 regionLoadNat64)
        (regionLoadNat32 regionLoadNat32)
        (regionLoadNat16 regionLoadNat16)
        (regionLoadInt8 regionLoadInt8)
        (regionLoadInt64 regionLoadInt64)
        (regionLoadInt32 regionLoadInt32)
        (regionLoadInt16 regionLoadInt16)
        (regionLoadFloat regionLoadFloat)
        (regionLoadBlob regionLoadBlob)
        (regionId regionId)
        (regionGrow regionGrow)
        (principalOfBlob principalOfBlob)
        (principalOfActor principalOfActor)
        (popcntNat8 popcntNat8)
        (popcntNat64 popcntNat64)
        (popcntNat32 popcntNat32)
        (popcntNat16 popcntNat16)
        (popcntInt8 popcntInt8)
        (popcntInt64 popcntInt64)
        (popcntInt32 popcntInt32)
        (popcntInt16 popcntInt16)
        (performanceCounter performanceCounter)
        (natToNat8 natToNat8)
        (natToNat64 natToNat64)
        (natToNat32 natToNat32)
        (natToNat16 natToNat16)
        (nat8ToNat16 nat8ToNat16)
        (nat8ToNat nat8ToNat)
        (nat8ToInt8 nat8ToInt8)
        (nat64ToNat32 nat64ToNat32)
        (nat64ToNat nat64ToNat)
        (nat64ToInt64 nat64ToInt64)
        (nat32ToNat64 nat32ToNat64)
        (nat32ToNat16 nat32ToNat16)
        (nat32ToNat nat32ToNat)
        (nat32ToInt32 nat32ToInt32)
        (nat32ToChar nat32ToChar)
        (nat16ToNat8 nat16ToNat8)
        (nat16ToNat32 nat16ToNat32)
        (nat16ToNat nat16ToNat)
        (nat16ToInt16 nat16ToInt16)
        (log log)
        (isController isController)
        (intToNat8Wrap intToNat8Wrap)
        (intToNat64Wrap intToNat64Wrap)
        (intToNat32Wrap intToNat32Wrap)
        (intToNat16Wrap intToNat16Wrap)
        (intToInt8Wrap intToInt8Wrap)
        (intToInt8 intToInt8)
        (intToInt64Wrap intToInt64Wrap)
        (intToInt64 intToInt64)
        (intToInt32Wrap intToInt32Wrap)
        (intToInt32 intToInt32)
        (intToInt16Wrap intToInt16Wrap)
        (intToInt16 intToInt16)
        (intToFloat intToFloat)
        (int8ToNat8 int8ToNat8)
        (int8ToInt16 int8ToInt16)
        (int8ToInt int8ToInt)
        (int64ToNat64 int64ToNat64)
        (int64ToInt32 int64ToInt32)
        (int64ToInt int64ToInt)
        (int64ToFloat int64ToFloat)
        (int32ToNat32 int32ToNat32)
        (int32ToInt64 int32ToInt64)
        (int32ToInt16 int32ToInt16)
        (int32ToInt int32ToInt)
        (int16ToNat16 int16ToNat16)
        (int16ToInt8 int16ToInt8)
        (int16ToInt32 int16ToInt32)
        (int16ToInt int16ToInt)
        (idlHash idlHash)
        (hashBlob hashBlob)
        (getCertificate getCertificate)
        (forall forall)
        (floatTrunc floatTrunc)
        (floatToText floatToText)
        (floatToInt64 floatToInt64)
        (floatToInt floatToInt)
        (floatToFormattedText floatToFormattedText)
        (floatSqrt floatSqrt)
        (floatNearest floatNearest)
        (floatMin floatMin)
        (floatMax floatMax)
        (floatFloor floatFloor)
        (floatCopySign floatCopySign)
        (floatCeil floatCeil)
        (floatAbs floatAbs)
        (exp exp)
        (exists exists)
        (errorMessage errorMessage)
        (errorCode errorCode)
        (error error)
        (encodeUtf8 encodeUtf8)
        (decodeUtf8 decodeUtf8)
        (debugPrintNat debugPrintNat)
        (debugPrintInt debugPrintInt)
        (debugPrintChar debugPrintChar)
        (debugPrint debugPrint)
        (cyclesRefunded cyclesRefunded)
        (cyclesBalance cyclesBalance)
        (cyclesAvailable cyclesAvailable)
        (cyclesAdd cyclesAdd)
        (cyclesAccept cyclesAccept)
        (ctzNat8 ctzNat8)
        (ctzNat64 ctzNat64)
        (ctzNat32 ctzNat32)
        (ctzNat16 ctzNat16)
        (ctzInt8 ctzInt8)
        (ctzInt64 ctzInt64)
        (ctzInt32 ctzInt32)
        (ctzInt16 ctzInt16)
        (createActor createActor)
        (cos cos)
        (clzNat8 clzNat8)
        (clzNat64 clzNat64)
        (clzNat32 clzNat32)
        (clzNat16 clzNat16)
        (clzInt8 clzInt8)
        (clzInt64 clzInt64)
        (clzInt32 clzInt32)
        (clzInt16 clzInt16)
        (charToUpper charToUpper)
        (charToText charToText)
        (charToNat32 charToNat32)
        (charToLower charToLower)
        (charIsWhitespace charIsWhitespace)
        (charIsUppercase charIsUppercase)
        (charIsLowercase charIsLowercase)
        (charIsAlphabetic charIsAlphabetic)
        (canisterVersion canisterVersion)
        (cancelTimer cancelTimer)
        (call_raw call_raw)
        (btstNat8 btstNat8)
        (btstNat64 btstNat64)
        (btstNat32 btstNat32)
        (btstNat16 btstNat16)
        (btstInt8 btstInt8)
        (btstInt64 btstInt64)
        (btstInt32 btstInt32)
        (btstInt16 btstInt16)
        (blobToArrayMut blobToArrayMut)
        (blobToArray blobToArray)
        (blobOfPrincipal blobOfPrincipal)
        (blobCompare blobCompare)
        (arrayToBlob arrayToBlob)
        (arrayMutToBlob arrayMutToBlob)
        (arctan2 arctan2)
        (arctan arctan)
        (arcsin arcsin)
        (arccos arccos)
        (abs abs)
        (Types Types)
        (Ret Ret)
        (Array_tabulate Array_tabulate)
        (Array_init Array_init)
        module {Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; Ret : <T>() -> T; Types : module {}; abs : Int -> Nat; arccos : Float -> Float; arcsin : Float -> Float; arctan : Float -> Float; arctan2 : (Float, Float) -> Float; arrayMutToBlob : [var Nat8] -> Blob; arrayToBlob : [Nat8] -> Blob; blobCompare : (Blob, Blob) -> Int8; blobOfPrincipal : Principal -> Blob; blobToArray : Blob -> [Nat8]; blobToArrayMut : Blob -> [var Nat8]; btstInt16 : (Int16, Int16) -> Bool; btstInt32 : (Int32, Int32) -> Bool; btstInt64 : (Int64, Int64) -> Bool; btstInt8 : (Int8, Int8) -> Bool; btstNat16 : (Nat16, Nat16) -> Bool; btstNat32 : (Nat32, Nat32) -> Bool; btstNat64 : (Nat64, Nat64) -> Bool; btstNat8 : (Nat8, Nat8) -> Bool; call_raw : (Principal, Text, Blob) -> async Blob; cancelTimer : Nat -> (); canisterVersion : () -> Nat64; charIsAlphabetic : Char -> Bool; charIsLowercase : Char -> Bool; charIsUppercase : Char -> Bool; charIsWhitespace : Char -> Bool; charToLower : Char -> Char; charToNat32 : Char -> Nat32; charToText : Char -> Text; charToUpper : Char -> Char; clzInt16 : Int16 -> Int16; clzInt32 : Int32 -> Int32; clzInt64 : Int64 -> Int64; clzInt8 : Int8 -> Int8; clzNat16 : Nat16 -> Nat16; clzNat32 : Nat32 -> Nat32; clzNat64 : Nat64 -> Nat64; clzNat8 : Nat8 -> Nat8; cos : Float -> Float; createActor : (Blob, Blob) -> async Principal; ctzInt16 : Int16 -> Int16; ctzInt32 : Int32 -> Int32; ctzInt64 : Int64 -> Int64; ctzInt8 : Int8 -> Int8; ctzNat16 : Nat16 -> Nat16; ctzNat32 : Nat32 -> Nat32; ctzNat64 : Nat64 -> Nat64; ctzNat8 : Nat8 -> Nat8; cyclesAccept : <system>Nat -> Nat; cyclesAdd : <system>Nat -> (); cyclesAvailable : () -> Nat; cyclesBalance : () -> Nat; cyclesRefunded : () -> Nat; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); decodeUtf8 : Blob -> ?Text; encodeUtf8 : Text -> Blob; error : Text -> Error; errorCode : Error -> ErrorCode__1; errorMessage : Error -> Text; exists : <T>(T -> Bool) -> Bool; exp : Float -> Float; floatAbs : Float -> Float; floatCeil : Float -> Float; floatCopySign : (Float, Float) -> Float; floatFloor : Float -> Float; floatMax : (Float, Float) -> Float; floatMin : (Float, Float) -> Float; floatNearest : Float -> Float; floatSqrt : Float -> Float; floatToFormattedText : (Float, Nat8, Nat8) -> Text; floatToInt : Float -> Int; floatToInt64 : Float -> Int64; floatToText : Float -> Text; floatTrunc : Float -> Float; forall : <T>(T -> Bool) -> Bool; getCertificate : () -> ?Blob; hashBlob : Blob -> Nat32; idlHash : Text -> Nat32; int16ToInt : Int16 -> Int; int16ToInt32 : Int16 -> Int32; int16ToInt8 : Int16 -> Int8; int16ToNat16 : Int16 -> Nat16; int32ToInt : Int32 -> Int; int32ToInt16 : Int32 -> Int16; int32ToInt64 : Int32 -> Int64; int32ToNat32 : Int32 -> Nat32; int64ToFloat : Int64 -> Float; int64ToInt : Int64 -> Int; int64ToInt32 : Int64 -> Int32; int64ToNat64 : Int64 -> Nat64; int8ToInt : Int8 -> Int; int8ToInt16 : Int8 -> Int16; int8ToNat8 : Int8 -> Nat8; intToFloat : Int -> Float; intToInt16 : Int -> Int16; intToInt16Wrap : Int -> Int16; intToInt32 : Int -> Int32; intToInt32Wrap : Int -> Int32; intToInt64 : Int -> Int64; intToInt64Wrap : Int -> Int64; intToInt8 : Int -> Int8; intToInt8Wrap : Int -> Int8; intToNat16Wrap : Int -> Nat16; intToNat32Wrap : Int -> Nat32; intToNat64Wrap : Int -> Nat64; intToNat8Wrap : Int -> Nat8; isController : Principal -> Bool; log : Float -> Float; nat16ToInt16 : Nat16 -> Int16; nat16ToNat : Nat16 -> Nat; nat16ToNat32 : Nat16 -> Nat32; nat16ToNat8 : Nat16 -> Nat8; nat32ToChar : Nat32 -> Char; nat32ToInt32 : Nat32 -> Int32; nat32ToNat : Nat32 -> Nat; nat32ToNat16 : Nat32 -> Nat16; nat32ToNat64 : Nat32 -> Nat64; nat64ToInt64 : Nat64 -> Int64; nat64ToNat : Nat64 -> Nat; nat64ToNat32 : Nat64 -> Nat32; nat8ToInt8 : Nat8 -> Int8; nat8ToNat : Nat8 -> Nat; nat8ToNat16 : Nat8 -> Nat16; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; performanceCounter : Nat32 -> Nat64; popcntInt16 : Int16 -> Int16; popcntInt32 : Int32 -> Int32; popcntInt64 : Int64 -> Int64; popcntInt8 : Int8 -> Int8; popcntNat16 : Nat16 -> Nat16; popcntNat32 : Nat32 -> Nat32; popcntNat64 : Nat64 -> Nat64; popcntNat8 : Nat8 -> Nat8; principalOfActor : (actor {}) -> Principal; principalOfBlob : Blob -> Principal; regionGrow : (Region, Nat64) -> Nat64; regionId : Region -> Nat; regionLoadBlob : (Region, Nat64, Nat) -> Blob; regionLoadFloat : (Region, Nat64) -> Float; regionLoadInt16 : (Region, Nat64) -> Int16; regionLoadInt32 : (Region, Nat64) -> Int32; regionLoadInt64 : (Region, Nat64) -> Int64; regionLoadInt8 : (Region, Nat64) -> Int8; regionLoadNat16 : (Region, Nat64) -> Nat16; regionLoadNat32 : (Region, Nat64) -> Nat32; regionLoadNat64 : (Region, Nat64) -> Nat64; regionLoadNat8 : (Region, Nat64) -> Nat8; regionNew : () -> Region; regionSize : Region -> Nat64; regionStoreBlob : (Region, Nat64, Blob) -> (); regionStoreFloat : (Region, Nat64, Float) -> (); regionStoreInt16 : (Region, Nat64, Int16) -> (); regionStoreInt32 : (Region, Nat64, Int32) -> (); regionStoreInt64 : (Region, Nat64, Int64) -> (); regionStoreInt8 : (Region, Nat64, Int8) -> (); regionStoreNat16 : (Region, Nat64, Nat16) -> (); regionStoreNat32 : (Region, Nat64, Nat32) -> (); regionStoreNat64 : (Region, Nat64, Nat64) -> (); regionStoreNat8 : (Region, Nat64, Nat8) -> (); rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_collector_instructions : () -> Nat; rts_heap_size : () -> Nat; rts_logical_stable_memory_size : () -> Nat; rts_max_live_size : () -> Nat; rts_max_stack_size : () -> Nat; rts_memory_size : () -> Nat; rts_mutator_instructions : () -> Nat; rts_reclaimed : () -> Nat; rts_stable_memory_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; setCertifiedData : Blob -> (); setTimer : <system>(Nat64, Bool, () -> async ()) -> Nat; shiftLeft : (Nat, Nat32) -> Nat; shiftRight : (Nat, Nat32) -> Nat; sin : Float -> Float; stableMemoryGrow : Nat64 -> Nat64; stableMemoryLoadBlob : (Nat64, Nat) -> Blob; stableMemoryLoadFloat : Nat64 -> Float; stableMemoryLoadInt16 : Nat64 -> Int16; stableMemoryLoadInt32 : Nat64 -> Int32; stableMemoryLoadInt64 : Nat64 -> Int64; stableMemoryLoadInt8 : Nat64 -> Int8; stableMemoryLoadNat16 : Nat64 -> Nat16; stableMemoryLoadNat32 : Nat64 -> Nat32; stableMemoryLoadNat64 : Nat64 -> Nat64; stableMemoryLoadNat8 : Nat64 -> Nat8; stableMemorySize : () -> Nat64; stableMemoryStoreBlob : (Nat64, Blob) -> (); stableMemoryStoreFloat : (Nat64, Float) -> (); stableMemoryStoreInt16 : (Nat64, Int16) -> (); stableMemoryStoreInt32 : (Nat64, Int32) -> (); stableMemoryStoreInt64 : (Nat64, Int64) -> (); stableMemoryStoreInt8 : (Nat64, Int8) -> (); stableMemoryStoreNat16 : (Nat64, Nat16) -> (); stableMemoryStoreNat32 : (Nat64, Nat32) -> (); stableMemoryStoreNat64 : (Nat64, Nat64) -> (); stableMemoryStoreNat8 : (Nat64, Nat8) -> (); stableVarQuery : () -> shared query () -> async {size : Nat64}; tan : Float -> Float; textCompare : (Text, Text) -> Int8; textLowercase : Text -> Text; textUppercase : Text -> Text; time : () -> Nat64; trap : Text -> None__2}
      )
    )
  )
  (LetD
    (ObjP
      (debugPrint (VarP debugPrint))
      (error (VarP error))
      (errorMessage (VarP errorMessage))
      (call_raw (VarP call_raw))
      (principalOfActor (VarP principalOfActor))
    )
    (VarE file$@prim)
  )
  (LetD
    (VarP $__motoko_stable_var_info)
    (FuncE
      $__motoko_stable_var_info
      Shared Query
      Promises
      (T1__4 Any)
      {size : Nat64}
      (AsyncE
        (T2__2 Any)
        (BlockE
          (LetD (VarP $caller/0) (PrimE ICCallerPrim))
          (LetD
            WildP
            (PrimE
              AssertPrim
              (IfE
                (PrimE
                  (RelPrim Principal EqOp)
                  (VarE $caller/0)
                  (PrimE (SelfRef Principal))
                )
                (LitE (BoolLit true))
                (PrimE is_controller (VarE $caller/0))
              )
            )
          )
          (LetD
            (VarP $size/0)
            (PrimE (ICStableSize memory {}) (NewObjE Memory memory {}))
          )
          (NewObjE Object (size $size/0) {size : Nat64})
        )
        T1__4
      )
    )
  )
  (VarD $state/0 ?(memory {}) (PrimE OptPrim (PrimE (ICStableRead memory {}))))
  (LetD
    (VarP $getState/0)
    (FuncE
      $getState/0
      Local
      Returns
      memory {}
      (SwitchE
        (VarE $state/0)
        (case (LitP NullLit) (LoopE (PrimE TupPrim)))
        (case (OptP (VarP $v/0)) (VarE $v/0))
      )
    )
  )
  (LetD
    (VarP foo)
    (FuncE
      foo
      Shared
      Returns
      ($__267 Any)
      ()
      (BlockE
        (LetD
          WildP
          (AsyncE
            ($foo__2 Any)
            (BlockE
              (LetD
                (VarP $thunk/0)
                (FuncE
                  $cleanup
                  Local
                  Returns
                  ()
                  (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT0)))
                )
              )
              (TryE
                (BlockE
                  (LetD
                    (VarP $thunk/1)
                    (FuncE
                      $cleanup
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT1)))
                    )
                  )
                  (TryE
                    (BlockE
                      (LetD
                        (VarP $thunk/2)
                        (FuncE
                          $cleanup
                          Local
                          Returns
                          ()
                          (PrimE
                            (CallPrim)
                            (VarE debugPrint)
                            (LitE (TextLit OUT2))
                          )
                        )
                      )
                      (TryE
                        (BlockE
                          (LetD
                            WildP
                            (PrimE
                              AwaitPrim
                              (AsyncE
                                ($@anon-async-8.29__2 Any)
                                (PrimE TupPrim)
                                $foo__2
                              )
                            )
                          )
                          (IfE
                            (LitE (BoolLit true))
                            (PrimE RetPrim (PrimE TupPrim))
                            (PrimE RetPrim (PrimE TupPrim))
                          )
                        )
                        ;
                        $thunk/2
                      )
                    )
                    ;
                    $thunk/1
                  )
                )
                ;
                $thunk/0
              )
            )
            $__267
          )
        )
        (PrimE TupPrim)
      )
    )
  )
  (LetD WildP (AssignE (VarLE $state/0) (LitE NullLit)))
  (foo foo)
  (__motoko_stable_var_info $__motoko_stable_var_info)
  (System
    (Pre (PrimE (ICStableWrite memory {}) (NewObjE Memory memory {})))
    (Post (PrimE TupPrim))
    (Heartbeat (PrimE TupPrim))
    (Timer
      (BlockE
        (LetD WildP (PrimE (CallPrim ()) (VarE @timer_helper) (PrimE TupPrim)))
        (PrimE TupPrim)
      )
    )
    (Inspect (PrimE TupPrim))
  )
  actor {foo : shared () -> ()}
)
(ActorU
  (VarD @cycles Nat (LitE (NatLit 0)))
  (LetD
    (VarP @add_cycles)
    (FuncE
      @add_cycles
      Local
      Returns
      ($__259 Any)
      ()
      (BlockE
        (LetD (VarP cycles) (VarE @cycles))
        (LetD WildP (PrimE (CallPrim) (VarE @reset_cycles) (PrimE TupPrim)))
        (IfE
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
          (PrimE SystemCyclesAddPrim (VarE cycles))
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @reset_cycles)
    (FuncE
      @reset_cycles
      Local
      Returns
      ()
      (AssignE (VarLE @cycles) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @immut_array_get)
    (FuncE
      @immut_array_get
      Local
      Returns
      (A__45 Any)
      (params xs)
      Nat -> A__45
      (FuncE
        @anon-func-39.3
        Local
        Returns
        (params n)
        A__45
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @mut_array_get)
    (FuncE
      @mut_array_get
      Local
      Returns
      (A__46 Any)
      (params xs)
      Nat -> A__46
      (FuncE
        @anon-func-41.3
        Local
        Returns
        (params n)
        A__46
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @immut_array_size)
    (FuncE
      @immut_array_size
      Local
      Returns
      (A__47 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-43.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_size)
    (FuncE
      @mut_array_size
      Local
      Returns
      (A__48 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-45.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_put)
    (FuncE
      @mut_array_put
      Local
      Returns
      (A__49 Any)
      (params xs)
      (Nat, A__49) -> ()
      (FuncE
        @anon-func-47.3
        Local
        Returns
        (params n x)
        ()
        (AssignE (IdxLE (VarE xs) (VarE n)) (VarE x))
      )
    )
  )
  (LetD
    (VarP @immut_array_keys)
    (FuncE
      @immut_array_keys
      Local
      Returns
      (A__50 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-49.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_keys)
    (FuncE
      @mut_array_keys
      Local
      Returns
      (A__51 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-55.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @immut_array_vals)
    (FuncE
      @immut_array_vals
      Local
      Returns
      (A__52 Any)
      (params xs)
      () -> @Iter__1<A__52>
      (FuncE
        @anon-func-61.3
        Local
        Returns
        @Iter__1<A__52>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__52
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__52})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_vals)
    (FuncE
      @mut_array_vals
      Local
      Returns
      (A__53 Any)
      (params xs)
      () -> @Iter__1<A__53>
      (FuncE
        @anon-func-67.3
        Local
        Returns
        @Iter__1<A__53>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__53
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__53})
        )
      )
    )
  )
  (LetD
    (VarP @blob_size)
    (FuncE
      @blob_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-73.3 Local Returns Nat (PrimE blob_size (VarE xs)))
    )
  )
  (LetD
    (VarP @blob_vals)
    (FuncE
      @blob_vals
      Local
      Returns
      (params xs)
      () -> @Iter__1<Nat8>
      (FuncE
        @anon-func-75.3
        Local
        Returns
        @Iter__1<Nat8>
        (BlockE
          (LetD (VarP i) (PrimE blob_vals_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat8
              (IfE
                (PrimE blob_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE blob_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat8})
        )
      )
    )
  )
  (LetD
    (VarP @text_size)
    (FuncE
      @text_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-86.3 Local Returns Nat (PrimE text_len (VarE xs)))
    )
  )
  (LetD
    (VarP @text_chars)
    (FuncE
      @text_chars
      Local
      Returns
      (params xs)
      () -> @Iter__1<Char>
      (FuncE
        @anon-func-88.3
        Local
        Returns
        @Iter__1<Char>
        (BlockE
          (LetD (VarP i) (PrimE text_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Char
              (IfE
                (PrimE text_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE text_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Char})
        )
      )
    )
  )
  (LetD
    (VarP @text_of_num)
    (FuncE
      @text_of_num
      Local
      Returns
      (params x base sep digits)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit )))
        (VarD n Nat (VarE x))
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat EqOp) (VarE n) (LitE (NatLit 0)))
            (PrimE RetPrim (LitE (TextLit 0)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD
          WildP
          (LabelE
            $done/0
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat GtOp) (VarE n) (LitE (NatLit 0)))
                (BlockE
                  (LetD
                    (VarP rem)
                    (PrimE (BinPrim Nat ModOp) (VarE n) (VarE base))
                  )
                  (LetD
                    WildP
                    (IfE
                      (IfE
                        (PrimE (RelPrim Nat GtOp) (VarE sep) (LitE (NatLit 0)))
                        (PrimE (RelPrim Nat EqOp) (VarE i) (VarE sep))
                        (LitE (BoolLit false))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE text)
                            (PrimE
                              (BinPrim Text CatOp)
                              (LitE (TextLit _))
                              (VarE text)
                            )
                          )
                        )
                        (AssignE (VarLE i) (LitE (NatLit 0)))
                      )
                      (PrimE TupPrim)
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE text)
                      (PrimE
                        (BinPrim Text CatOp)
                        (PrimE (CallPrim) (VarE digits) (VarE rem))
                        (VarE text)
                      )
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE n)
                      (PrimE (BinPrim Nat DivOp) (VarE n) (VarE base))
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/0) (PrimE TupPrim))
              )
            )
          )
        )
        (VarE text)
      )
    )
  )
  (LetD
    (VarP @left_pad)
    (FuncE
      @left_pad
      Local
      Returns
      (params pad char t)
      Text
      (IfE
        (PrimE (RelPrim Nat GtOp) (VarE pad) (PrimE text_len (VarE t)))
        (BlockE
          (VarD
            i
            Nat
            (PrimE (BinPrim Nat SubOp) (VarE pad) (PrimE text_len (VarE t)))
          )
          (VarD text Text (VarE t))
          (LetD
            WildP
            (LabelE
              $done/1
              ()
              (LoopE
                (IfE
                  (PrimE (RelPrim Nat GtOp) (VarE i) (LitE (NatLit 0)))
                  (BlockE
                    (LetD
                      WildP
                      (AssignE
                        (VarLE text)
                        (PrimE (BinPrim Text CatOp) (VarE char) (VarE text))
                      )
                    )
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat SubOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE (BreakPrim $done/1) (PrimE TupPrim))
                )
              )
            )
          )
          (VarE text)
        )
        (VarE t)
      )
    )
  )
  (LetD
    (VarP @digits_dec)
    (FuncE
      @digits_dec
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE (BinPrim Int AddOp) (VarE x) (LitE (IntLit 48)))
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Nat)
    (FuncE
      @text_of_Nat
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_num)
        (PrimE
          TupPrim
          (VarE x)
          (LitE (NatLit 10))
          (LitE (NatLit 3))
          (VarE @digits_dec)
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Int)
    (FuncE
      @text_of_Int
      Local
      Returns
      (params x)
      Text
      (IfE
        (PrimE (RelPrim Int EqOp) (VarE x) (LitE (IntLit 0)))
        (LitE (TextLit 0))
        (PrimE
          (BinPrim Text CatOp)
          (IfE
            (PrimE (RelPrim Int LtOp) (VarE x) (LitE (IntLit 0)))
            (LitE (TextLit -))
            (LitE (TextLit +))
          )
          (PrimE (CallPrim) (VarE @text_of_Nat) (PrimE abs (VarE x)))
        )
      )
    )
  )
  (LetD
    (VarP @digits_hex)
    (FuncE
      @digits_hex
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE
              (BinPrim Int AddOp)
              (VarE x)
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE x) (LitE (NatLit 10)))
                (LitE (IntLit 48))
                (LitE (IntLit 55))
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @int64ToInt)
    (FuncE
      @int64ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int64 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int32ToInt)
    (FuncE
      @int32ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int32 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int16ToInt)
    (FuncE
      @int16ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int16 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int8ToInt)
    (FuncE
      @int8ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int8 Int) (VarE n))
    )
  )
  (LetD
    (VarP @nat64ToNat)
    (FuncE
      @nat64ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat64 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat32ToNat)
    (FuncE
      @nat32ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat32 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat16ToNat)
    (FuncE
      @nat16ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat16 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat8ToNat)
    (FuncE
      @nat8ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat8 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @text_of_Nat8)
    (FuncE
      @text_of_Nat8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat8ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat16)
    (FuncE
      @text_of_Nat16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat16ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat32)
    (FuncE
      @text_of_Nat32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat32ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat64)
    (FuncE
      @text_of_Nat64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat64ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int8)
    (FuncE
      @text_of_Int8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int8ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int16)
    (FuncE
      @text_of_Int16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int16ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int32)
    (FuncE
      @text_of_Int32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int32ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int64)
    (FuncE
      @text_of_Int64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int64ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Float)
    (FuncE
      @text_of_Float
      Local
      Returns
      (params x)
      Text
      (PrimE Float->Text (VarE x))
    )
  )
  (LetD
    (VarP @text_of_Bool)
    (FuncE
      @text_of_Bool
      Local
      Returns
      (params b)
      Text
      (IfE (VarE b) (LitE (TextLit true)) (LitE (TextLit false)))
    )
  )
  (LetD
    (VarP @text_of_Text)
    (FuncE
      @text_of_Text
      Local
      Returns
      (params t)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE (BinPrim Text CatOp) (LitE (TextLit ")) (VarE t))
        (LitE (TextLit "))
      )
    )
  )
  (LetD
    (VarP @text_of_Char)
    (FuncE
      @text_of_Char
      Local
      Returns
      (params c)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE
          (BinPrim Text CatOp)
          (LitE (TextLit '))
          (PrimE conv_Char_Text (VarE c))
        )
        (LitE (TextLit '))
      )
    )
  )
  (LetD
    (VarP @text_of_Blob)
    (FuncE
      @text_of_Blob
      Local
      Returns
      (params blob)
      Text
      (BlockE
        (VarD t Text (LitE (TextLit ")))
        (LetD
          WildP
          (BlockE
            (LetD
              (VarP $nxt/0)
              (PrimE
                (DotPrim next)
                (PrimE
                  (CallPrim)
                  (PrimE (CallPrim) (VarE @blob_vals) (VarE blob))
                  (PrimE TupPrim)
                )
              )
            )
            (LabelE
              $done/2
              ()
              (LoopE
                (SwitchE
                  (PrimE (CallPrim) (VarE $nxt/0) (PrimE TupPrim))
                  (case
                    (LitP NullLit)
                    (PrimE (BreakPrim $done/2) (PrimE TupPrim))
                  )
                  (case
                    (OptP (VarP b))
                    (AssignE
                      (VarLE t)
                      (PrimE
                        (BinPrim Text CatOp)
                        (VarE t)
                        (PrimE
                          (BinPrim Text CatOp)
                          (LitE (TextLit \))
                          (PrimE
                            (CallPrim)
                            (VarE @left_pad)
                            (PrimE
                              TupPrim
                              (LitE (NatLit 2))
                              (LitE (TextLit 0))
                              (PrimE
                                (CallPrim)
                                (VarE @text_of_num)
                                (PrimE
                                  TupPrim
                                  (PrimE (CallPrim) (VarE @nat8ToNat) (VarE b))
                                  (LitE (NatLit 16))
                                  (LitE (NatLit 0))
                                  (VarE @digits_hex)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE t)
            (PrimE (BinPrim Text CatOp) (VarE t) (LitE (TextLit ")))
          )
        )
        (PrimE RetPrim (VarE t))
      )
    )
  )
  (LetD
    (VarP @text_has_parens)
    (FuncE
      @text_has_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case (OptP (LitP (CharLit 40))) (LitE (BoolLit true)))
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_needs_parens)
    (FuncE
      @text_needs_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case
          (OptP
            (AltP
              (AltP
                (AltP (LitP (CharLit 43)) (LitP (CharLit 45)))
                (LitP (CharLit 63))
              )
              (LitP (CharLit 35))
            )
          )
          (LitE (BoolLit true))
        )
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_of_option)
    (FuncE
      @text_of_option
      Local
      Returns
      (T__99 Any)
      (params f x)
      Text
      (SwitchE
        (VarE x)
        (case
          (OptP (VarP y))
          (BlockE
            (LetD (VarP fy) (PrimE (CallPrim) (VarE f) (VarE y)))
            (IfE
              (PrimE (CallPrim) (VarE @text_needs_parens) (VarE fy))
              (PrimE
                (BinPrim Text CatOp)
                (PrimE (BinPrim Text CatOp) (LitE (TextLit ?()) (VarE fy))
                (LitE (TextLit )))
              )
              (PrimE (BinPrim Text CatOp) (LitE (TextLit ?)) (VarE fy))
            )
          )
        )
        (case (LitP NullLit) (LitE (TextLit null)))
      )
    )
  )
  (LetD
    (VarP @text_of_variant)
    (FuncE
      @text_of_variant
      Local
      Returns
      (T__100 Any)
      (params l f x)
      Text
      (BlockE
        (LetD (VarP fx) (PrimE (CallPrim) (VarE f) (VarE x)))
        (IfE
          (PrimE (RelPrim Text EqOp) (VarE fx) (LitE (TextLit ())))
          (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
          (IfE
            (PrimE (CallPrim) (VarE @text_has_parens) (VarE fx))
            (PrimE
              (BinPrim Text CatOp)
              (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
              (VarE fx)
            )
            (PrimE
              (BinPrim Text CatOp)
              (PrimE
                (BinPrim Text CatOp)
                (PrimE
                  (BinPrim Text CatOp)
                  (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
                  (LitE (TextLit ())
                )
                (VarE fx)
              )
              (LitE (TextLit )))
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_array)
    (FuncE
      @text_of_array
      Local
      Returns
      (T__101 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/0) (VarE xs))
            (LetD (VarP $last/0) (PrimE GetLastArrayOffset (VarE $arr/0)))
            (VarD $indx/0 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/0) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/3
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/0) (VarE $indx/0))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (AssignE (VarLE first) (LitE (BoolLit false)))
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/0) (VarE $last/0))
                      (PrimE (BreakPrim $done/3) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/0)
                        (PrimE NextArrayOffset (VarE $indx/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @text_of_array_mut)
    (FuncE
      @text_of_array_mut
      Local
      Returns
      (T__102 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [var)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/1) (VarE xs))
            (LetD (VarP $last/1) (PrimE GetLastArrayOffset (VarE $arr/1)))
            (VarD $indx/1 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/1) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/4
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/1) (VarE $indx/1))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (BlockE
                              (LetD
                                WildP
                                (AssignE (VarLE first) (LitE (BoolLit false)))
                              )
                              (AssignE
                                (VarLE text)
                                (PrimE
                                  (BinPrim Text CatOp)
                                  (VarE text)
                                  (LitE (TextLit  ))
                                )
                              )
                            )
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/1) (VarE $last/1))
                      (PrimE (BreakPrim $done/4) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/1)
                        (PrimE NextArrayOffset (VarE $indx/1))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @equal_array)
    (FuncE
      @equal_array
      Local
      Returns
      (T__103 Any)
      (params eq a b)
      Bool
      (BlockE
        (LetD
          WildP
          (IfE
            (PrimE
              (RelPrim Bool EqOp)
              (PrimE
                (RelPrim Nat EqOp)
                (PrimE array_len (VarE a))
                (PrimE array_len (VarE b))
              )
              (LitE (BoolLit false))
            )
            (PrimE RetPrim (LitE (BoolLit false)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD (VarP s) (PrimE array_len (VarE a)))
        (LetD
          WildP
          (LabelE
            $done/5
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE i) (VarE s))
                (BlockE
                  (LetD
                    WildP
                    (IfE
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (CallPrim)
                          (VarE eq)
                          (PrimE
                            TupPrim
                            (PrimE IdxPrim (VarE a) (VarE i))
                            (PrimE IdxPrim (VarE b) (VarE i))
                          )
                        )
                        (LitE (BoolLit false))
                      )
                      (PrimE RetPrim (LitE (BoolLit false)))
                      (PrimE TupPrim)
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/5) (PrimE TupPrim))
              )
            )
          )
        )
        (PrimE RetPrim (LitE (BoolLit true)))
      )
    )
  )
  (VarD @refund Nat (LitE (NatLit 0)))
  (LetD
    (VarP @reset_refund)
    (FuncE
      @reset_refund
      Local
      Returns
      ()
      (AssignE (VarLE @refund) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @getSystemRefund)
    (FuncE
      @getSystemRefund
      Local
      Returns
      @Refund__1
      (PrimE RetPrim (PrimE SystemCyclesRefundedPrim))
    )
  )
  (LetD (VarP @cleanup) (FuncE @cleanup Local Returns () (PrimE TupPrim)))
  (LetD
    (VarP @new_async)
    (FuncE
      @new_async
      Local
      Returns
      (T__104 Any__2)
      (@Async__1<T__104>, @Cont__1<T__104>, @Cont__1<Error>, @CleanCont__1)
      (BlockE
        (LetD
          (VarP w_null)
          (FuncE
            @anon-func-317.16
            Local
            Returns
            (params r t)
            ()
            (PrimE TupPrim)
          )
        )
        (LetD
          (VarP r_null)
          (FuncE
            @anon-func-318.16
            Local
            Returns
            (params $ignored0/0)
            ()
            (PrimE TupPrim)
          )
        )
        (VarD result ?@Result__1<T__104> (LitE NullLit))
        (VarD ws (@Refund__1, T__104) -> () (VarE w_null))
        (VarD rs Error -> () (VarE r_null))
        (LetD
          (VarP getRefund)
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE @cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
        )
        (LetD
          (VarP fulfill)
          (FuncE
            fulfill
            Local
            Returns
            (params t)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP refund)
                    (IfE
                      (VarE getRefund)
                      (PrimE (CallPrim) (VarE @getSystemRefund) (PrimE TupPrim))
                      (LitE (NatLit 0))
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE
                        OptPrim
                        (PrimE (TagE ok) (PrimE TupPrim (VarE refund) (VarE t)))
                      )
                    )
                  )
                  (LetD (VarP ws_) (VarE ws))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE
                    (CallPrim)
                    (VarE ws_)
                    (PrimE TupPrim (VarE refund) (VarE t))
                  )
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (LetD
          (VarP fail)
          (FuncE
            fail
            Local
            Returns
            (params e)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE OptPrim (PrimE (TagE error) (VarE e)))
                    )
                  )
                  (LetD (VarP rs_) (VarE rs))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE (CallPrim) (VarE rs_) (VarE e))
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (VarD cleanup () -> () (VarE @cleanup))
        (LetD
          (VarP clean)
          (FuncE
            clean
            Local
            Returns
            ()
            (PrimE (CallPrim) (VarE cleanup) (PrimE TupPrim))
          )
        )
        (LetD
          (VarP enqueue)
          (FuncE
            enqueue
            Local
            Returns
            (params k r b)
            {#schedule : () -> (); #suspend}
            (BlockE
              (LetD WildP (AssignE (VarLE cleanup) (VarE b)))
              (SwitchE
                (VarE result)
                (case
                  (LitP NullLit)
                  (BlockE
                    (LetD (VarP ws_) (VarE ws))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE ws)
                        (FuncE
                          @anon-func-365.15
                          Local
                          Returns
                          (params r t)
                          ()
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE ws_)
                                (PrimE TupPrim (VarE r) (VarE t))
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                            (PrimE (CallPrim) (VarE k) (VarE t))
                          )
                        )
                      )
                    )
                    (LetD (VarP rs_) (VarE rs))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE rs)
                        (FuncE
                          @anon-func-372.15
                          Local
                          Returns
                          (params e)
                          ()
                          (BlockE
                            (LetD WildP (PrimE (CallPrim) (VarE rs_) (VarE e)))
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_refund)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE (CallPrim) (VarE r) (VarE e))
                          )
                        )
                      )
                    )
                    (PrimE (TagE suspend) (PrimE TupPrim))
                  )
                )
                (case
                  (OptP (TagP ok (TupP (VarP r) (VarP t))))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-381.20
                      Local
                      Returns
                      ()
                      (BlockE
                        (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                        (PrimE (CallPrim) (VarE k) (VarE t))
                      )
                    )
                  )
                )
                (case
                  (OptP (TagP error (VarP e)))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-384.20
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE r) (VarE e))
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim (VarE enqueue) (VarE fulfill) (VarE fail) (VarE clean))
      )
    )
  )
  (LetD (VarP @ManagementCanister) (NewObjE Module module {}))
  (LetD
    (VarP @ic00)
    (PrimE
      (ActorOfIdBlob
        actor {create_canister : shared {sender_canister_version : ?Nat64; settings : ?canister_settings__1} -> async {canister_id : Principal}; install_code : shared {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1} -> async ()}
      )
      (PrimE BlobOfIcUrl (LitE (TextLit aaaaa-aa)))
    )
  )
  (LetD
    (VarP @install_actor_helper)
    (FuncE
      @install_actor_helper
      Local
      Returns
      ($__260 Any)
      (params install_arg wasm_module arg)
      async*<$__260> Principal
      (AsyncE*
        ($@anon-async*-427.24__2 Any)
        (BlockE
          (LetD
            (TupP (VarP mode) (VarP canister_id))
            (SwitchE
              (VarE install_arg)
              (case
                (TagP new (VarP settings))
                (BlockE
                  (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
                  (LetD
                    (VarP accepted)
                    (PrimE SystemCyclesAcceptPrim (VarE available))
                  )
                  (LetD
                    (VarP sender_canister_version)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE @cycles)
                      (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
                    )
                  )
                  (LetD
                    (ObjP (canister_id (VarP canister_id)))
                    (PrimE
                      AwaitPrim
                      (PrimE
                        (CallPrim $@anon-async*-427.24__2)
                        (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                        (BlockE
                          (LetD (VarP $base/0) (VarE settings))
                          (LetD
                            (VarP $sender_canister_version/0)
                            (VarE sender_canister_version)
                          )
                          (LetD
                            (VarP $settings/0)
                            (PrimE (DotPrim settings) (VarE $base/0))
                          )
                          (NewObjE
                            Object
                            (settings $settings/0)
                            (sender_canister_version $sender_canister_version/0)
                            {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                          )
                        )
                      )
                    )
                  )
                  (PrimE
                    TupPrim
                    (PrimE (TagE install) (PrimE TupPrim))
                    (VarE canister_id)
                  )
                )
              )
              (case
                (TagP install (VarP principal1))
                (PrimE
                  TupPrim
                  (PrimE (TagE install) (PrimE TupPrim))
                  (VarE principal1)
                )
              )
              (case
                (TagP reinstall (VarP actor1))
                (PrimE
                  TupPrim
                  (PrimE (TagE reinstall) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor1))
                )
              )
              (case
                (TagP upgrade (VarP actor2))
                (PrimE
                  TupPrim
                  (PrimE (TagE upgrade) (PrimE TupPrim))
                  (PrimE (CastPrim actor {} Principal) (VarE actor2))
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async*-427.24__2)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/0) (VarE mode))
                  (LetD (VarP $canister_id/0) (VarE canister_id))
                  (LetD (VarP $wasm_module/0) (VarE wasm_module))
                  (LetD (VarP $arg/0) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/1)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/1)
                    (arg $arg/0)
                    (wasm_module $wasm_module/0)
                    (canister_id $canister_id/0)
                    (mode $mode/0)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__260
      )
    )
  )
  (LetD
    (VarP @create_actor_helper)
    (FuncE
      @create_actor_helper
      Local
      Returns
      ($__261 Any)
      (params wasm_module arg)
      async<$__261> Principal
      (AsyncE
        ($@anon-async-463.79__2 Any)
        (BlockE
          (LetD (VarP available) (PrimE SystemCyclesAvailablePrim))
          (LetD (VarP accepted) (PrimE SystemCyclesAcceptPrim (VarE available)))
          (LetD
            (VarP sender_canister_version)
            (PrimE OptPrim (PrimE canister_version))
          )
          (LetD
            WildP
            (AssignE
              (VarLE @cycles)
              (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE accepted))
            )
          )
          (LetD
            (ObjP (canister_id (VarP canister_id)))
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79__2)
                (PrimE (ActorDotPrim create_canister) (VarE @ic00))
                (BlockE
                  (LetD (VarP $settings/1) (LitE NullLit))
                  (LetD
                    (VarP $sender_canister_version/2)
                    (VarE sender_canister_version)
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/2)
                    (settings $settings/1)
                    {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                  )
                )
              )
            )
          )
          (LetD
            WildP
            (PrimE
              AwaitPrim
              (PrimE
                (CallPrim $@anon-async-463.79__2)
                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                (BlockE
                  (LetD (VarP $mode/1) (PrimE (TagE install) (PrimE TupPrim)))
                  (LetD (VarP $canister_id/1) (VarE canister_id))
                  (LetD (VarP $wasm_module/1) (VarE wasm_module))
                  (LetD (VarP $arg/1) (VarE arg))
                  (LetD
                    (VarP $sender_canister_version/3)
                    (PrimE OptPrim (PrimE canister_version))
                  )
                  (NewObjE
                    Object
                    (sender_canister_version $sender_canister_version/3)
                    (arg $arg/1)
                    (wasm_module $wasm_module/1)
                    (canister_id $canister_id/1)
                    (mode $mode/1)
                    {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                  )
                )
              )
            )
          )
          (PrimE RetPrim (VarE canister_id))
        )
        $__261
      )
    )
  )
  (LetD
    (VarP @call_raw)
    (FuncE
      @call_raw
      Local
      Returns
      ($__262 Any)
      (params p m a)
      async<$__262> Blob
      (AsyncE
        ($@call_raw__2 Any)
        (PrimE AwaitPrim (PrimE call_raw (VarE p) (VarE m) (VarE a)))
        $__262
      )
    )
  )
  (LetD
    (VarP @call_succeeded)
    (FuncE
      @call_succeeded
      Local
      Returns
      Bool
      (PrimE
        (RelPrim Nat32 EqOp)
        (PrimE call_perform_status)
        (LitE (Nat32Lit 0))
      )
    )
  )
  (LetD
    (VarP @call_error)
    (FuncE
      @call_error
      Local
      Returns
      Error
      (BlockE
        (LetD (VarP status) (PrimE call_perform_status))
        (LetD (VarP message) (PrimE call_perform_message))
        (LetD
          (VarP code)
          (PrimE
            (TagE call_error)
            (BlockE
              (LetD (VarP $err_code/0) (VarE status))
              (NewObjE Object (err_code $err_code/0) {err_code : Nat32})
            )
          )
        )
        (PrimE
          (CastPrim ({#call_error : {err_code : Nat32}}, Text) Error)
          (PrimE TupPrim (VarE code) (VarE message))
        )
      )
    )
  )
  (VarD @timers ?@Node__1 (LitE NullLit))
  (LetD
    (VarP @prune)
    (FuncE
      @prune
      Local
      Returns
      (params n)
      ?@Node__1
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE NullLit))
        (case
          (OptP (VarP n))
          (IfE
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE
                IdxPrim
                (PrimE (DotPrim expire) (VarE n))
                (LitE (NatLit 0))
              )
              (LitE (Nat64Lit 0))
            )
            (PrimE (CallPrim) (VarE @prune) (PrimE (DotPrim post) (VarE n)))
            (PrimE
              OptPrim
              (BlockE
                (LetD (VarP $base/1) (VarE n))
                (LetD
                  (VarP $pre/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim pre) (VarE n))
                  )
                )
                (LetD
                  (VarP $post/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim post) (VarE n))
                  )
                )
                (LetD (VarP $delay/0) (PrimE (DotPrim delay) (VarE $base/1)))
                (LetD (VarP $expire/0) (PrimE (DotPrim expire) (VarE $base/1)))
                (LetD (VarP $id/0) (PrimE (DotPrim id) (VarE $base/1)))
                (LetD (VarP $job/0) (PrimE (DotPrim job) (VarE $base/1)))
                (NewObjE
                  Object
                  (job $job/0)
                  (id $id/0)
                  (expire $expire/0)
                  (delay $delay/0)
                  (post $post/0)
                  (pre $pre/0)
                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @nextExpiration)
    (FuncE
      @nextExpiration
      Local
      Returns
      (params n)
      Nat64
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE (Nat64Lit 0)))
        (case
          (OptP (VarP n))
          (BlockE
            (VarD
              exp
              Nat64
              (PrimE
                (CallPrim)
                (VarE @nextExpiration)
                (PrimE (DotPrim pre) (VarE n))
              )
            )
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                  )
                  (IfE
                    (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        (CallPrim)
                        (VarE @nextExpiration)
                        (PrimE (DotPrim post) (VarE n))
                      )
                    )
                    (PrimE TupPrim)
                  )
                )
                (PrimE TupPrim)
              )
            )
            (VarE exp)
          )
        )
      )
    )
  )
  (LetD
    (VarP @timer_helper)
    (FuncE
      @timer_helper
      Local
      Returns
      ($__263 Any)
      async<$__263> ()
      (AsyncE
        ($@timer_helper__2 Any)
        (BlockE
          (LetD
            (VarP Array_init)
            (FuncE
              Array_init
              Local
              Returns
              (T__105 Any)
              (params len x)
              [var T__105]
              (PrimE Array.init (VarE len) (VarE x))
            )
          )
          (LetD (VarP now) (PrimE SystemTimePrim))
          (VarD gathered Nat (LitE (NatLit 0)))
          (LetD
            (VarP thunks)
            (PrimE
              (CallPrim ?(() -> async ()))
              (VarE Array_init)
              (PrimE TupPrim (LitE (NatLit 10)) (LitE NullLit))
            )
          )
          (LetD
            (VarP gatherExpired)
            (FuncE
              gatherExpired
              Local
              Returns
              (params n)
              ()
              (SwitchE
                (VarE n)
                (case (LitP NullLit) (PrimE TupPrim))
                (case
                  (OptP (VarP n))
                  (BlockE
                    (LetD
                      WildP
                      (PrimE
                        (CallPrim)
                        (VarE gatherExpired)
                        (PrimE (DotPrim pre) (VarE n))
                      )
                    )
                    (LetD
                      WildP
                      (IfE
                        (IfE
                          (IfE
                            (PrimE
                              (RelPrim Nat64 GtOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                            (PrimE
                              (RelPrim Nat64 LeOp)
                              (PrimE
                                IdxPrim
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (VarE now)
                            )
                            (LitE (BoolLit false))
                          )
                          (PrimE
                            (RelPrim Nat LtOp)
                            (VarE gathered)
                            (PrimE array_len (VarE thunks))
                          )
                          (LitE (BoolLit false))
                        )
                        (BlockE
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE (VarE thunks) (VarE gathered))
                              (PrimE OptPrim (PrimE (DotPrim job) (VarE n)))
                            )
                          )
                          (LetD
                            WildP
                            (SwitchE
                              (PrimE (DotPrim delay) (VarE n))
                              (case
                                (AltP (LitP NullLit) (OptP (LitP (Nat64Lit 0))))
                                (PrimE TupPrim)
                              )
                              (case
                                (OptP (VarP delay))
                                (BlockE
                                  (LetD
                                    (VarP expire)
                                    (PrimE
                                      (BinPrim Nat64 AddOp)
                                      (PrimE
                                        IdxPrim
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (PrimE
                                        (BinPrim Nat64 MulOp)
                                        (VarE delay)
                                        (PrimE
                                          (BinPrim Nat64 AddOp)
                                          (LitE (Nat64Lit 1))
                                          (PrimE
                                            (BinPrim Nat64 DivOp)
                                            (PrimE
                                              (BinPrim Nat64 SubOp)
                                              (VarE now)
                                              (PrimE
                                                IdxPrim
                                                (PrimE
                                                  (DotPrim expire)
                                                  (VarE n)
                                                )
                                                (LitE (NatLit 0))
                                              )
                                            )
                                            (VarE delay)
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (LetD
                                    WildP
                                    (AssignE
                                      (IdxLE
                                        (PrimE (DotPrim expire) (VarE n))
                                        (LitE (NatLit 0))
                                      )
                                      (LitE (Nat64Lit 0))
                                    )
                                  )
                                  (LetD
                                    (VarP reinsert)
                                    (FuncE
                                      reinsert
                                      Local
                                      Returns
                                      (params m)
                                      @Node__1
                                      (SwitchE
                                        (VarE m)
                                        (case
                                          (LitP NullLit)
                                          (BlockE
                                            (LetD (VarP $base/2) (VarE n))
                                            (LetD
                                              (VarP $expire/1)
                                              (PrimE
                                                (ArrayPrim Var Nat64)
                                                (VarE expire)
                                              )
                                            )
                                            (LetD (VarP $pre/1) (LitE NullLit))
                                            (LetD (VarP $post/1) (LitE NullLit))
                                            (LetD
                                              (VarP $delay/1)
                                              (PrimE
                                                (DotPrim delay)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $id/1)
                                              (PrimE
                                                (DotPrim id)
                                                (VarE $base/2)
                                              )
                                            )
                                            (LetD
                                              (VarP $job/1)
                                              (PrimE
                                                (DotPrim job)
                                                (VarE $base/2)
                                              )
                                            )
                                            (NewObjE
                                              Object
                                              (job $job/1)
                                              (id $id/1)
                                              (delay $delay/1)
                                              (post $post/1)
                                              (pre $pre/1)
                                              (expire $expire/1)
                                              {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : Null; pre : Null}
                                            )
                                          )
                                        )
                                        (case
                                          (OptP (VarP m))
                                          (BlockE
                                            (LetD
                                              WildP
                                              (PrimE
                                                AssertPrim
                                                (PrimE
                                                  (RelPrim Bool EqOp)
                                                  (PrimE
                                                    (RelPrim Nat64 EqOp)
                                                    (PrimE
                                                      IdxPrim
                                                      (PrimE
                                                        (DotPrim expire)
                                                        (VarE m)
                                                      )
                                                      (LitE (NatLit 0))
                                                    )
                                                    (LitE (Nat64Lit 0))
                                                  )
                                                  (LitE (BoolLit false))
                                                )
                                              )
                                            )
                                            (IfE
                                              (PrimE
                                                (RelPrim Nat64 LtOp)
                                                (VarE expire)
                                                (PrimE
                                                  IdxPrim
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE m)
                                                  )
                                                  (LitE (NatLit 0))
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/4) (VarE m))
                                                (LetD
                                                  (VarP $pre/3)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim pre)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/3)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/3)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/3)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/3)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $post/3)
                                                  (PrimE
                                                    (DotPrim post)
                                                    (VarE $base/4)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (post $post/3)
                                                  (job $job/3)
                                                  (id $id/3)
                                                  (expire $expire/3)
                                                  (delay $delay/3)
                                                  (pre $pre/3)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                )
                                              )
                                              (BlockE
                                                (LetD (VarP $base/3) (VarE m))
                                                (LetD
                                                  (VarP $post/2)
                                                  (PrimE
                                                    OptPrim
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE reinsert)
                                                      (PrimE
                                                        (DotPrim post)
                                                        (VarE m)
                                                      )
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  (VarP $delay/2)
                                                  (PrimE
                                                    (DotPrim delay)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $expire/2)
                                                  (PrimE
                                                    (DotPrim expire)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $id/2)
                                                  (PrimE
                                                    (DotPrim id)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $job/2)
                                                  (PrimE
                                                    (DotPrim job)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (LetD
                                                  (VarP $pre/2)
                                                  (PrimE
                                                    (DotPrim pre)
                                                    (VarE $base/3)
                                                  )
                                                )
                                                (NewObjE
                                                  Object
                                                  (pre $pre/2)
                                                  (job $job/2)
                                                  (id $id/2)
                                                  (expire $expire/2)
                                                  (delay $delay/2)
                                                  (post $post/2)
                                                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (AssignE
                                    (VarLE @timers)
                                    (PrimE
                                      OptPrim
                                      (PrimE
                                        (CallPrim)
                                        (VarE reinsert)
                                        (PrimE
                                          (CallPrim)
                                          (VarE @prune)
                                          (VarE @timers)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          (LetD
                            WildP
                            (AssignE
                              (IdxLE
                                (PrimE (DotPrim expire) (VarE n))
                                (LitE (NatLit 0))
                              )
                              (LitE (Nat64Lit 0))
                            )
                          )
                          (AssignE
                            (VarLE gathered)
                            (PrimE
                              (BinPrim Nat AddOp)
                              (VarE gathered)
                              (LitE (NatLit 1))
                            )
                          )
                        )
                        (PrimE TupPrim)
                      )
                    )
                    (PrimE
                      (CallPrim)
                      (VarE gatherExpired)
                      (PrimE (DotPrim post) (VarE n))
                    )
                  )
                )
              )
            )
          )
          (LetD WildP (PrimE (CallPrim) (VarE gatherExpired) (VarE @timers)))
          (LetD
            (VarP exp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
          )
          (LetD
            WildP
            (BlockE
              (LetD WildP (PrimE global_timer_set (VarE exp)))
              (PrimE TupPrim)
            )
          )
          (LetD
            WildP
            (IfE
              (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
              (AssignE (VarLE @timers) (LitE NullLit))
              (PrimE TupPrim)
            )
          )
          (BlockE
            (LetD (VarP $arr/2) (VarE thunks))
            (LetD (VarP $last/2) (PrimE GetLastArrayOffset (VarE $arr/2)))
            (VarD $indx/2 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/2) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/6
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP o)
                      (PrimE DerefArrayOffset (VarE $arr/2) (VarE $indx/2))
                    )
                    (LetD
                      WildP
                      (SwitchE
                        (VarE o)
                        (case
                          (OptP (VarP thunk))
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim $@timer_helper__2)
                                (VarE thunk)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE TupPrim)
                          )
                        )
                        (case WildP (PrimE TupPrim))
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/2) (VarE $last/2))
                      (PrimE (BreakPrim $done/6) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/2)
                        (PrimE NextArrayOffset (VarE $indx/2))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        $__263
      )
    )
  )
  (VarD @lastTimerId Nat (LitE (NatLit 0)))
  (LetD
    (VarP @setTimer)
    (FuncE
      @setTimer
      Local
      Returns
      ($__264 Any)
      (params delayNanos recurring job)
      Nat
      (BlockE
        (LetD
          WildP
          (AssignE
            (VarLE @lastTimerId)
            (PrimE (BinPrim Nat AddOp) (VarE @lastTimerId) (LitE (NatLit 1)))
          )
        )
        (LetD (VarP id) (VarE @lastTimerId))
        (LetD (VarP now) (PrimE SystemTimePrim))
        (LetD
          (VarP expire)
          (PrimE (BinPrim Nat64 AddOp) (VarE now) (VarE delayNanos))
        )
        (LetD
          (VarP delay)
          (IfE
            (VarE recurring)
            (PrimE OptPrim (VarE delayNanos))
            (LitE NullLit)
          )
        )
        (LetD
          (VarP insert)
          (FuncE
            insert
            Local
            Returns
            (params n)
            @Node__1
            (SwitchE
              (VarE n)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP $expire/4)
                    (PrimE (ArrayPrim Var Nat64) (VarE expire))
                  )
                  (LetD (VarP $id/4) (VarE id))
                  (LetD (VarP $delay/4) (VarE delay))
                  (LetD (VarP $job/4) (VarE job))
                  (LetD (VarP $pre/4) (LitE NullLit))
                  (LetD (VarP $post/4) (LitE NullLit))
                  (NewObjE
                    Object
                    (post $post/4)
                    (pre $pre/4)
                    (job $job/4)
                    (delay $delay/4)
                    (id $id/4)
                    (expire $expire/4)
                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                  )
                )
              )
              (case
                (OptP (VarP n))
                (BlockE
                  (LetD
                    WildP
                    (PrimE
                      AssertPrim
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (RelPrim Nat64 EqOp)
                          (PrimE
                            IdxPrim
                            (PrimE (DotPrim expire) (VarE n))
                            (LitE (NatLit 0))
                          )
                          (LitE (Nat64Lit 0))
                        )
                        (LitE (BoolLit false))
                      )
                    )
                  )
                  (IfE
                    (PrimE
                      (RelPrim Nat64 LtOp)
                      (VarE expire)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/6) (VarE n))
                      (LetD
                        (VarP $pre/6)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim pre) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/6)
                        (PrimE (DotPrim delay) (VarE $base/6))
                      )
                      (LetD
                        (VarP $expire/6)
                        (PrimE (DotPrim expire) (VarE $base/6))
                      )
                      (LetD (VarP $id/6) (PrimE (DotPrim id) (VarE $base/6)))
                      (LetD (VarP $job/6) (PrimE (DotPrim job) (VarE $base/6)))
                      (LetD
                        (VarP $post/6)
                        (PrimE (DotPrim post) (VarE $base/6))
                      )
                      (NewObjE
                        Object
                        (post $post/6)
                        (job $job/6)
                        (id $id/6)
                        (expire $expire/6)
                        (delay $delay/6)
                        (pre $pre/6)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/5) (VarE n))
                      (LetD
                        (VarP $post/5)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/5)
                        (PrimE (DotPrim delay) (VarE $base/5))
                      )
                      (LetD
                        (VarP $expire/5)
                        (PrimE (DotPrim expire) (VarE $base/5))
                      )
                      (LetD (VarP $id/5) (PrimE (DotPrim id) (VarE $base/5)))
                      (LetD (VarP $job/5) (PrimE (DotPrim job) (VarE $base/5)))
                      (LetD (VarP $pre/5) (PrimE (DotPrim pre) (VarE $base/5)))
                      (NewObjE
                        Object
                        (pre $pre/5)
                        (job $job/5)
                        (id $id/5)
                        (expire $expire/5)
                        (delay $delay/5)
                        (post $post/5)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE
              OptPrim
              (PrimE
                (CallPrim)
                (VarE insert)
                (PrimE (CallPrim) (VarE @prune) (VarE @timers))
              )
            )
          )
        )
        (LetD
          (VarP exp)
          (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
        )
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
            (AssignE (VarLE @timers) (LitE NullLit))
            (PrimE TupPrim)
          )
        )
        (LetD
          WildP
          (BlockE
            (LetD WildP (PrimE global_timer_set (VarE exp)))
            (PrimE TupPrim)
          )
        )
        (VarE id)
      )
    )
  )
  (LetD
    (VarP @cancelTimer)
    (FuncE
      @cancelTimer
      Local
      Returns
      (params id)
      ()
      (BlockE
        (LetD
          (VarP graft)
          (FuncE
            graft
            Local
            Returns
            (params onto branch)
            ?@Node__1
            (SwitchE
              (PrimE TupPrim (VarE onto) (VarE branch))
              (case (TupP (LitP NullLit) (LitP NullLit)) (LitE NullLit))
              (case (TupP (LitP NullLit) WildP) (VarE branch))
              (case (TupP WildP (LitP NullLit)) (VarE onto))
              (case
                (TupP (OptP (VarP onto)) WildP)
                (PrimE
                  OptPrim
                  (BlockE
                    (LetD (VarP $base/7) (VarE onto))
                    (LetD
                      (VarP $post/7)
                      (PrimE
                        (CallPrim)
                        (VarE graft)
                        (PrimE
                          TupPrim
                          (PrimE (DotPrim post) (VarE onto))
                          (VarE branch)
                        )
                      )
                    )
                    (LetD
                      (VarP $delay/7)
                      (PrimE (DotPrim delay) (VarE $base/7))
                    )
                    (LetD
                      (VarP $expire/7)
                      (PrimE (DotPrim expire) (VarE $base/7))
                    )
                    (LetD (VarP $id/7) (PrimE (DotPrim id) (VarE $base/7)))
                    (LetD (VarP $job/7) (PrimE (DotPrim job) (VarE $base/7)))
                    (LetD (VarP $pre/7) (PrimE (DotPrim pre) (VarE $base/7)))
                    (NewObjE
                      Object
                      (pre $pre/7)
                      (job $job/7)
                      (id $id/7)
                      (expire $expire/7)
                      (delay $delay/7)
                      (post $post/7)
                      {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          (VarP hunt)
          (FuncE
            hunt
            Local
            Returns
            (params n)
            ?@Node__1
            (SwitchE
              (VarE n)
              (case (LitP NullLit) (VarE n))
              (case
                (OptP
                  (ObjP (id (VarP node)) (pre (VarP pre)) (post (VarP post)))
                )
                (IfE
                  (PrimE (RelPrim Nat EqOp) (VarE node) (VarE id))
                  (PrimE
                    (CallPrim)
                    (VarE graft)
                    (PrimE TupPrim (VarE pre) (VarE post))
                  )
                  (LabelE
                    !
                    ?@Node__1
                    (PrimE
                      OptPrim
                      (BlockE
                        (LetD
                          (VarP $base/8)
                          (SwitchE
                            (VarE n)
                            (case
                              (LitP NullLit)
                              (PrimE (BreakPrim !) (LitE NullLit))
                            )
                            (case (OptP (VarP $v/1)) (VarE $v/1))
                          )
                        )
                        (LetD
                          (VarP $pre/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE pre))
                        )
                        (LetD
                          (VarP $post/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE post))
                        )
                        (LetD
                          (VarP $delay/8)
                          (PrimE (DotPrim delay) (VarE $base/8))
                        )
                        (LetD
                          (VarP $expire/8)
                          (PrimE (DotPrim expire) (VarE $base/8))
                        )
                        (LetD (VarP $id/8) (PrimE (DotPrim id) (VarE $base/8)))
                        (LetD
                          (VarP $job/8)
                          (PrimE (DotPrim job) (VarE $base/8))
                        )
                        (NewObjE
                          Object
                          (job $job/8)
                          (id $id/8)
                          (expire $expire/8)
                          (delay $delay/8)
                          (post $post/8)
                          (pre $pre/8)
                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE (CallPrim) (VarE hunt) (VarE @timers))
          )
        )
        (IfE
          (PrimE
            (RelPrim Nat64 EqOp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
            (LitE (Nat64Lit 0))
          )
          (BlockE
            (LetD
              WildP
              (BlockE
                (LetD WildP (PrimE global_timer_set (LitE (Nat64Lit 0))))
                (PrimE TupPrim)
              )
            )
            (AssignE (VarLE @timers) (LitE NullLit))
          )
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @set_global_timer)
    (FuncE
      @set_global_timer
      Local
      Returns
      (params time)
      ()
      (BlockE (LetD WildP (PrimE global_timer_set (VarE time))) (PrimE TupPrim))
    )
  )
  (LetD
    (VarP file$@prim)
    (BlockE
      (LetD (VarP Types) (NewObjE Module module {}))
      (LetD
        (VarP abs)
        (FuncE abs Local Returns (params x) Nat (PrimE abs (VarE x)))
      )
      (LetD
        (VarP shiftLeft)
        (FuncE
          shiftLeft
          Local
          Returns
          (params x shift)
          Nat
          (PrimE lsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP shiftRight)
        (FuncE
          shiftRight
          Local
          Returns
          (params x shift)
          Nat
          (PrimE rsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP idlHash)
        (FuncE idlHash Local Returns (params x) Nat32 (PrimE idlHash (VarE x)))
      )
      (LetD
        (VarP debugPrint)
        (FuncE debugPrint Local Returns (params x) () (PrimE print (VarE x)))
      )
      (LetD
        (VarP debugPrintNat)
        (FuncE
          debugPrintNat
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Nat) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintInt)
        (FuncE
          debugPrintInt
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Int) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintChar)
        (FuncE
          debugPrintChar
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE charToText) (VarE x))
          )
        )
      )
      (LetD
        (VarP trap)
        (FuncE trap Local Returns (params x) None__2 (PrimE trap (VarE x)))
      )
      (LetD
        (VarP rts_version)
        (FuncE rts_version Local Returns Text (PrimE rts_version))
      )
      (LetD
        (VarP rts_memory_size)
        (FuncE rts_memory_size Local Returns Nat (PrimE rts_memory_size))
      )
      (LetD
        (VarP rts_heap_size)
        (FuncE rts_heap_size Local Returns Nat (PrimE rts_heap_size))
      )
      (LetD
        (VarP rts_total_allocation)
        (FuncE
          rts_total_allocation
          Local
          Returns
          Nat
          (PrimE rts_total_allocation)
        )
      )
      (LetD
        (VarP rts_reclaimed)
        (FuncE rts_reclaimed Local Returns Nat (PrimE rts_reclaimed))
      )
      (LetD
        (VarP rts_max_live_size)
        (FuncE rts_max_live_size Local Returns Nat (PrimE rts_max_live_size))
      )
      (LetD
        (VarP rts_max_stack_size)
        (FuncE rts_max_stack_size Local Returns Nat (PrimE rts_max_stack_size))
      )
      (LetD
        (VarP rts_callback_table_count)
        (FuncE
          rts_callback_table_count
          Local
          Returns
          Nat
          (PrimE rts_callback_table_count)
        )
      )
      (LetD
        (VarP rts_callback_table_size)
        (FuncE
          rts_callback_table_size
          Local
          Returns
          Nat
          (PrimE rts_callback_table_size)
        )
      )
      (LetD
        (VarP rts_mutator_instructions)
        (FuncE
          rts_mutator_instructions
          Local
          Returns
          Nat
          (PrimE rts_mutator_instructions)
        )
      )
      (LetD
        (VarP rts_collector_instructions)
        (FuncE
          rts_collector_instructions
          Local
          Returns
          Nat
          (PrimE rts_collector_instructions)
        )
      )
      (LetD
        (VarP rts_stable_memory_size)
        (FuncE
          rts_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_stable_memory_size)
        )
      )
      (LetD
        (VarP rts_logical_stable_memory_size)
        (FuncE
          rts_logical_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_logical_stable_memory_size)
        )
      )
      (LetD (VarP int64ToInt) (VarE @int64ToInt))
      (LetD (VarP int32ToInt) (VarE @int32ToInt))
      (LetD (VarP int16ToInt) (VarE @int16ToInt))
      (LetD (VarP int8ToInt) (VarE @int8ToInt))
      (LetD (VarP nat64ToNat) (VarE @nat64ToNat))
      (LetD (VarP nat32ToNat) (VarE @nat32ToNat))
      (LetD (VarP nat16ToNat) (VarE @nat16ToNat))
      (LetD (VarP nat8ToNat) (VarE @nat8ToNat))
      (LetD
        (VarP intToInt64)
        (FuncE
          intToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32)
        (FuncE
          intToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16)
        (FuncE
          intToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8)
        (FuncE
          intToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP natToNat64)
        (FuncE
          natToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat Nat64) (VarE n))
        )
      )
      (LetD
        (VarP natToNat32)
        (FuncE
          natToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat Nat32) (VarE n))
        )
      )
      (LetD
        (VarP natToNat16)
        (FuncE
          natToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat Nat16) (VarE n))
        )
      )
      (LetD
        (VarP natToNat8)
        (FuncE
          natToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat Nat8) (VarE n))
        )
      )
      (LetD
        (VarP intToInt64Wrap)
        (FuncE
          intToInt64Wrap
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32Wrap)
        (FuncE
          intToInt32Wrap
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16Wrap)
        (FuncE
          intToInt16Wrap
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8Wrap)
        (FuncE
          intToInt8Wrap
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP intToNat64Wrap)
        (FuncE
          intToNat64Wrap
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int Nat64) (VarE n))
        )
      )
      (LetD
        (VarP intToNat32Wrap)
        (FuncE
          intToNat32Wrap
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int Nat32) (VarE n))
        )
      )
      (LetD
        (VarP intToNat16Wrap)
        (FuncE
          intToNat16Wrap
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int Nat16) (VarE n))
        )
      )
      (LetD
        (VarP intToNat8Wrap)
        (FuncE
          intToNat8Wrap
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int64ToNat64)
        (FuncE
          int64ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int64 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToInt64)
        (FuncE
          nat64ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Nat64 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int32ToNat32)
        (FuncE
          int32ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int32 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToInt32)
        (FuncE
          nat32ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Nat32 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int16ToNat16)
        (FuncE
          int16ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int16 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToInt16)
        (FuncE
          nat16ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Nat16 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int8ToNat8)
        (FuncE
          int8ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int8 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToInt8)
        (FuncE
          nat8ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Nat8 Int8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToNat16)
        (FuncE
          nat8ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat8 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat32)
        (FuncE
          nat16ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat16 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat64)
        (FuncE
          nat32ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat32 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToNat32)
        (FuncE
          nat64ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat64 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat16)
        (FuncE
          nat32ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat32 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat8)
        (FuncE
          nat16ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat16 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int8ToInt16)
        (FuncE
          int8ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int8 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt32)
        (FuncE
          int16ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int16 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt64)
        (FuncE
          int32ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int32 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int64ToInt32)
        (FuncE
          int64ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int64 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt16)
        (FuncE
          int32ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int32 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt8)
        (FuncE
          int16ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int16 Int8) (VarE n))
        )
      )
      (LetD
        (VarP charToNat32)
        (FuncE
          charToNat32
          Local
          Returns
          (params c)
          Nat32
          (PrimE (NumConvWrapPrim Char Nat32) (VarE c))
        )
      )
      (LetD
        (VarP nat32ToChar)
        (FuncE
          nat32ToChar
          Local
          Returns
          (params w)
          Char
          (PrimE (NumConvTrapPrim Nat32 Char) (VarE w))
        )
      )
      (LetD
        (VarP charToText)
        (FuncE
          charToText
          Local
          Returns
          (params c)
          Text
          (PrimE conv_Char_Text (VarE c))
        )
      )
      (LetD
        (VarP charToUpper)
        (FuncE
          charToUpper
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_upper (VarE c))
        )
      )
      (LetD
        (VarP charToLower)
        (FuncE
          charToLower
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_lower (VarE c))
        )
      )
      (LetD
        (VarP charIsWhitespace)
        (FuncE
          charIsWhitespace
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_whitespace (VarE c))
        )
      )
      (LetD
        (VarP charIsLowercase)
        (FuncE
          charIsLowercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_lowercase (VarE c))
        )
      )
      (LetD
        (VarP charIsUppercase)
        (FuncE
          charIsUppercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_uppercase (VarE c))
        )
      )
      (LetD
        (VarP charIsAlphabetic)
        (FuncE
          charIsAlphabetic
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_alphabetic (VarE c))
        )
      )
      (LetD
        (VarP blobCompare)
        (FuncE
          blobCompare
          Local
          Returns
          (params b1 b2)
          Int8
          (PrimE blob_compare (VarE b1) (VarE b2))
        )
      )
      (LetD
        (VarP hashBlob)
        (FuncE
          hashBlob
          Local
          Returns
          (params b)
          Nat32
          (PrimE crc32Hash (VarE b))
        )
      )
      (LetD
        (VarP decodeUtf8)
        (FuncE
          decodeUtf8
          Local
          Returns
          (params b)
          ?Text
          (PrimE DecodeUtf8 (VarE b))
        )
      )
      (LetD
        (VarP encodeUtf8)
        (FuncE
          encodeUtf8
          Local
          Returns
          (params t)
          Blob
          (PrimE EncodeUtf8 (VarE t))
        )
      )
      (LetD
        (VarP textCompare)
        (FuncE
          textCompare
          Local
          Returns
          (params t1 t2)
          Int8
          (PrimE text_compare (VarE t1) (VarE t2))
        )
      )
      (LetD
        (VarP textLowercase)
        (FuncE
          textLowercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_lowercase (VarE t))
        )
      )
      (LetD
        (VarP textUppercase)
        (FuncE
          textUppercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_uppercase (VarE t))
        )
      )
      (LetD
        (VarP popcntNat8)
        (FuncE
          popcntNat8
          Local
          Returns
          (params w)
          Nat8
          (PrimE popcnt8 (VarE w))
        )
      )
      (LetD
        (VarP clzNat8)
        (FuncE clzNat8 Local Returns (params w) Nat8 (PrimE clz8 (VarE w)))
      )
      (LetD
        (VarP ctzNat8)
        (FuncE ctzNat8 Local Returns (params w) Nat8 (PrimE ctz8 (VarE w)))
      )
      (LetD
        (VarP btstNat8)
        (FuncE
          btstNat8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat8 EqOp)
              (PrimE btst8 (VarE w) (VarE amount))
              (LitE (Nat8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat16)
        (FuncE
          popcntNat16
          Local
          Returns
          (params w)
          Nat16
          (PrimE popcnt16 (VarE w))
        )
      )
      (LetD
        (VarP clzNat16)
        (FuncE clzNat16 Local Returns (params w) Nat16 (PrimE clz16 (VarE w)))
      )
      (LetD
        (VarP ctzNat16)
        (FuncE ctzNat16 Local Returns (params w) Nat16 (PrimE ctz16 (VarE w)))
      )
      (LetD
        (VarP btstNat16)
        (FuncE
          btstNat16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat16 EqOp)
              (PrimE btst16 (VarE w) (VarE amount))
              (LitE (Nat16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat32)
        (FuncE
          popcntNat32
          Local
          Returns
          (params w)
          Nat32
          (PrimE popcnt32 (VarE w))
        )
      )
      (LetD
        (VarP clzNat32)
        (FuncE clzNat32 Local Returns (params w) Nat32 (PrimE clz32 (VarE w)))
      )
      (LetD
        (VarP ctzNat32)
        (FuncE ctzNat32 Local Returns (params w) Nat32 (PrimE ctz32 (VarE w)))
      )
      (LetD
        (VarP btstNat32)
        (FuncE
          btstNat32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat32 EqOp)
              (PrimE btst32 (VarE w) (VarE amount))
              (LitE (Nat32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat64)
        (FuncE
          popcntNat64
          Local
          Returns
          (params w)
          Nat64
          (PrimE popcnt64 (VarE w))
        )
      )
      (LetD
        (VarP clzNat64)
        (FuncE clzNat64 Local Returns (params w) Nat64 (PrimE clz64 (VarE w)))
      )
      (LetD
        (VarP ctzNat64)
        (FuncE ctzNat64 Local Returns (params w) Nat64 (PrimE ctz64 (VarE w)))
      )
      (LetD
        (VarP btstNat64)
        (FuncE
          btstNat64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE btst64 (VarE w) (VarE amount))
              (LitE (Nat64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt8)
        (FuncE
          popcntInt8
          Local
          Returns
          (params w)
          Int8
          (PrimE popcntInt8 (VarE w))
        )
      )
      (LetD
        (VarP clzInt8)
        (FuncE clzInt8 Local Returns (params w) Int8 (PrimE clzInt8 (VarE w)))
      )
      (LetD
        (VarP ctzInt8)
        (FuncE ctzInt8 Local Returns (params w) Int8 (PrimE ctzInt8 (VarE w)))
      )
      (LetD
        (VarP btstInt8)
        (FuncE
          btstInt8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int8 EqOp)
              (PrimE btstInt8 (VarE w) (VarE amount))
              (LitE (Int8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt16)
        (FuncE
          popcntInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE popcntInt16 (VarE w))
        )
      )
      (LetD
        (VarP clzInt16)
        (FuncE
          clzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE clzInt16 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt16)
        (FuncE
          ctzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE ctzInt16 (VarE w))
        )
      )
      (LetD
        (VarP btstInt16)
        (FuncE
          btstInt16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int16 EqOp)
              (PrimE btstInt16 (VarE w) (VarE amount))
              (LitE (Int16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt32)
        (FuncE
          popcntInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE popcntInt32 (VarE w))
        )
      )
      (LetD
        (VarP clzInt32)
        (FuncE
          clzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE clzInt32 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt32)
        (FuncE
          ctzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE ctzInt32 (VarE w))
        )
      )
      (LetD
        (VarP btstInt32)
        (FuncE
          btstInt32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int32 EqOp)
              (PrimE btstInt32 (VarE w) (VarE amount))
              (LitE (Int32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt64)
        (FuncE
          popcntInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE popcntInt64 (VarE w))
        )
      )
      (LetD
        (VarP clzInt64)
        (FuncE
          clzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE clzInt64 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt64)
        (FuncE
          ctzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE ctzInt64 (VarE w))
        )
      )
      (LetD
        (VarP btstInt64)
        (FuncE
          btstInt64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int64 EqOp)
              (PrimE btstInt64 (VarE w) (VarE amount))
              (LitE (Int64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP floatAbs)
        (FuncE floatAbs Local Returns (params f) Float (PrimE fabs (VarE f)))
      )
      (LetD
        (VarP floatSqrt)
        (FuncE floatSqrt Local Returns (params f) Float (PrimE fsqrt (VarE f)))
      )
      (LetD
        (VarP floatCeil)
        (FuncE floatCeil Local Returns (params f) Float (PrimE fceil (VarE f)))
      )
      (LetD
        (VarP floatFloor)
        (FuncE
          floatFloor
          Local
          Returns
          (params f)
          Float
          (PrimE ffloor (VarE f))
        )
      )
      (LetD
        (VarP floatTrunc)
        (FuncE
          floatTrunc
          Local
          Returns
          (params f)
          Float
          (PrimE ftrunc (VarE f))
        )
      )
      (LetD
        (VarP floatNearest)
        (FuncE
          floatNearest
          Local
          Returns
          (params f)
          Float
          (PrimE fnearest (VarE f))
        )
      )
      (LetD
        (VarP floatMin)
        (FuncE
          floatMin
          Local
          Returns
          (params f g)
          Float
          (PrimE fmin (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatMax)
        (FuncE
          floatMax
          Local
          Returns
          (params f g)
          Float
          (PrimE fmax (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatCopySign)
        (FuncE
          floatCopySign
          Local
          Returns
          (params f g)
          Float
          (PrimE fcopysign (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatToInt)
        (FuncE
          floatToInt
          Local
          Returns
          (params f)
          Int
          (PrimE (NumConvTrapPrim Float Int) (VarE f))
        )
      )
      (LetD
        (VarP intToFloat)
        (FuncE
          intToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int Float) (VarE n))
        )
      )
      (LetD
        (VarP floatToInt64)
        (FuncE
          floatToInt64
          Local
          Returns
          (params f)
          Int64
          (PrimE (NumConvTrapPrim Float Int64) (VarE f))
        )
      )
      (LetD
        (VarP int64ToFloat)
        (FuncE
          int64ToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int64 Float) (VarE n))
        )
      )
      (LetD (VarP floatToText) (VarE @text_of_Float))
      (LetD
        (VarP floatToFormattedText)
        (FuncE
          floatToFormattedText
          Local
          Returns
          (params f prec mode)
          Text
          (PrimE fmtFloat->Text (VarE f) (VarE prec) (VarE mode))
        )
      )
      (LetD
        (VarP sin)
        (FuncE sin Local Returns (params f) Float (PrimE fsin (VarE f)))
      )
      (LetD
        (VarP cos)
        (FuncE cos Local Returns (params f) Float (PrimE fcos (VarE f)))
      )
      (LetD
        (VarP tan)
        (FuncE tan Local Returns (params f) Float (PrimE ftan (VarE f)))
      )
      (LetD
        (VarP arcsin)
        (FuncE arcsin Local Returns (params f) Float (PrimE fasin (VarE f)))
      )
      (LetD
        (VarP arccos)
        (FuncE arccos Local Returns (params f) Float (PrimE facos (VarE f)))
      )
      (LetD
        (VarP arctan)
        (FuncE arctan Local Returns (params f) Float (PrimE fatan (VarE f)))
      )
      (LetD
        (VarP arctan2)
        (FuncE
          arctan2
          Local
          Returns
          (params y x)
          Float
          (PrimE fatan2 (VarE y) (VarE x))
        )
      )
      (LetD
        (VarP exp)
        (FuncE exp Local Returns (params f) Float (PrimE fexp (VarE f)))
      )
      (LetD
        (VarP log)
        (FuncE log Local Returns (params f) Float (PrimE flog (VarE f)))
      )
      (LetD
        (VarP Array_init)
        (FuncE
          Array_init
          Local
          Returns
          (T__106 Any)
          (params len x)
          [var T__106]
          (PrimE Array.init (VarE len) (VarE x))
        )
      )
      (LetD
        (VarP Array_tabulate)
        (FuncE
          Array_tabulate
          Local
          Returns
          (T__107 Any)
          (params len gen)
          [T__107]
          (PrimE Array.tabulate (VarE len) (VarE gen))
        )
      )
      (LetD
        (VarP blobToArray)
        (FuncE
          blobToArray
          Local
          Returns
          (params b)
          [Nat8]
          (PrimE blobToArray (VarE b))
        )
      )
      (LetD
        (VarP blobToArrayMut)
        (FuncE
          blobToArrayMut
          Local
          Returns
          (params b)
          [var Nat8]
          (PrimE blobToArrayMut (VarE b))
        )
      )
      (LetD
        (VarP arrayToBlob)
        (FuncE
          arrayToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayToBlob (VarE a))
        )
      )
      (LetD
        (VarP arrayMutToBlob)
        (FuncE
          arrayMutToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayMutToBlob (VarE a))
        )
      )
      (LetD
        (VarP error)
        (FuncE
          error
          Local
          Returns
          (params message)
          Error
          (BlockE
            (LetD
              (VarP e)
              (PrimE
                TupPrim
                (PrimE (TagE canister_reject) (PrimE TupPrim))
                (VarE message)
              )
            )
            (PrimE (CastPrim (ErrorCode__1, Text) Error) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorCode)
        (FuncE
          errorCode
          Local
          Returns
          (params e)
          ErrorCode__1
          (PrimE
            (ProjPrim 0)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorMessage)
        (FuncE
          errorMessage
          Local
          Returns
          (params e)
          Text
          (PrimE
            (ProjPrim 1)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD (VarP time) (FuncE time Local Returns Nat64 (PrimE SystemTimePrim)))
      (LetD
        (VarP blobOfPrincipal)
        (FuncE
          blobOfPrincipal
          Local
          Returns
          (params id)
          Blob
          (PrimE (CastPrim Principal Blob) (VarE id))
        )
      )
      (LetD
        (VarP principalOfBlob)
        (FuncE
          principalOfBlob
          Local
          Returns
          (params act)
          Principal
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE
                  (RelPrim Nat GtOp)
                  (PrimE blob_size (VarE act))
                  (LitE (NatLit 29))
                )
                (PrimE
                  (CallPrim)
                  (VarE trap)
                  (LitE (TextLit blob too long for principal))
                )
                (PrimE TupPrim)
              )
            )
            (PrimE (CastPrim Blob Principal) (VarE act))
          )
        )
      )
      (LetD
        (VarP principalOfActor)
        (FuncE
          principalOfActor
          Local
          Returns
          (params act)
          Principal
          (PrimE (CastPrim actor {} Principal) (VarE act))
        )
      )
      (LetD
        (VarP isController)
        (FuncE
          isController
          Local
          Returns
          (params p)
          Bool
          (PrimE is_controller (VarE p))
        )
      )
      (LetD
        (VarP canisterVersion)
        (FuncE canisterVersion Local Returns Nat64 (PrimE canister_version))
      )
      (LetD (VarP createActor) (VarE @create_actor_helper))
      (LetD
        (VarP cyclesBalance)
        (FuncE cyclesBalance Local Returns Nat (PrimE SystemCyclesBalancePrim))
      )
      (LetD
        (VarP cyclesAvailable)
        (FuncE
          cyclesAvailable
          Local
          Returns
          Nat
          (PrimE SystemCyclesAvailablePrim)
        )
      )
      (LetD
        (VarP cyclesRefunded)
        (FuncE cyclesRefunded Local Returns Nat (VarE @refund))
      )
      (LetD
        (VarP cyclesAccept)
        (FuncE
          cyclesAccept
          Local
          Returns
          ($__265 Any)
          (params amount)
          Nat
          (PrimE SystemCyclesAcceptPrim (VarE amount))
        )
      )
      (LetD
        (VarP cyclesAdd)
        (FuncE
          cyclesAdd
          Local
          Returns
          ($__266 Any)
          (params amount)
          ()
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat EqOp) (VarE amount) (LitE (NatLit 0)))
                (PrimE RetPrim (PrimE TupPrim))
                (PrimE TupPrim)
              )
            )
            (LetD
              WildP
              (AssignE
                (VarLE @cycles)
                (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE amount))
              )
            )
            (IfE
              (PrimE
                (RelPrim Nat GtOp)
                (VarE @cycles)
                (LitE
                  (NatLit 340_282_366_920_938_463_463_374_607_431_768_211_455)
                )
              )
              (PrimE
                (CallPrim)
                (VarE trap)
                (LitE (TextLit cannot add more than 2^128 cycles))
              )
              (PrimE TupPrim)
            )
          )
        )
      )
      (LetD
        (VarP setCertifiedData)
        (FuncE
          setCertifiedData
          Local
          Returns
          (params data)
          ()
          (PrimE SetCertifiedData (VarE data))
        )
      )
      (LetD
        (VarP getCertificate)
        (FuncE getCertificate Local Returns ?Blob (PrimE GetCertificate))
      )
      (LetD
        (VarP stableMemorySize)
        (FuncE stableMemorySize Local Returns Nat64 (PrimE stableMemorySize))
      )
      (LetD
        (VarP stableMemoryGrow)
        (FuncE
          stableMemoryGrow
          Local
          Returns
          (params pages)
          Nat64
          (PrimE stableMemoryGrow (VarE pages))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat32)
        (FuncE
          stableMemoryLoadNat32
          Local
          Returns
          (params offset)
          Nat32
          (PrimE stableMemoryLoadNat32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat32)
        (FuncE
          stableMemoryStoreNat32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat8)
        (FuncE
          stableMemoryLoadNat8
          Local
          Returns
          (params offset)
          Nat8
          (PrimE stableMemoryLoadNat8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat8)
        (FuncE
          stableMemoryStoreNat8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat16)
        (FuncE
          stableMemoryLoadNat16
          Local
          Returns
          (params offset)
          Nat16
          (PrimE stableMemoryLoadNat16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat16)
        (FuncE
          stableMemoryStoreNat16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat64)
        (FuncE
          stableMemoryLoadNat64
          Local
          Returns
          (params offset)
          Nat64
          (PrimE stableMemoryLoadNat64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat64)
        (FuncE
          stableMemoryStoreNat64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt32)
        (FuncE
          stableMemoryLoadInt32
          Local
          Returns
          (params offset)
          Int32
          (PrimE stableMemoryLoadInt32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt32)
        (FuncE
          stableMemoryStoreInt32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt8)
        (FuncE
          stableMemoryLoadInt8
          Local
          Returns
          (params offset)
          Int8
          (PrimE stableMemoryLoadInt8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt8)
        (FuncE
          stableMemoryStoreInt8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt16)
        (FuncE
          stableMemoryLoadInt16
          Local
          Returns
          (params offset)
          Int16
          (PrimE stableMemoryLoadInt16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt16)
        (FuncE
          stableMemoryStoreInt16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt64)
        (FuncE
          stableMemoryLoadInt64
          Local
          Returns
          (params offset)
          Int64
          (PrimE stableMemoryLoadInt64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt64)
        (FuncE
          stableMemoryStoreInt64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadFloat)
        (FuncE
          stableMemoryLoadFloat
          Local
          Returns
          (params offset)
          Float
          (PrimE stableMemoryLoadFloat (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreFloat)
        (FuncE
          stableMemoryStoreFloat
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreFloat (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadBlob)
        (FuncE
          stableMemoryLoadBlob
          Local
          Returns
          (params offset size)
          Blob
          (PrimE stableMemoryLoadBlob (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP stableMemoryStoreBlob)
        (FuncE
          stableMemoryStoreBlob
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreBlob (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableVarQuery)
        (FuncE
          stableVarQuery
          Local
          Returns
          shared query () -> async {size : Nat64}
          (PrimE stableVarQuery)
        )
      )
      (LetD
        (VarP regionNew)
        (FuncE regionNew Local Returns Region (PrimE regionNew))
      )
      (LetD
        (VarP regionId)
        (FuncE regionId Local Returns (params r) Nat (PrimE regionId (VarE r)))
      )
      (LetD
        (VarP regionSize)
        (FuncE
          regionSize
          Local
          Returns
          (params r)
          Nat64
          (PrimE regionSize (VarE r))
        )
      )
      (LetD
        (VarP regionGrow)
        (FuncE
          regionGrow
          Local
          Returns
          (params r pages)
          Nat64
          (PrimE regionGrow (VarE r) (VarE pages))
        )
      )
      (LetD
        (VarP regionLoadNat32)
        (FuncE
          regionLoadNat32
          Local
          Returns
          (params r offset)
          Nat32
          (PrimE regionLoadNat32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat32)
        (FuncE
          regionStoreNat32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat8)
        (FuncE
          regionLoadNat8
          Local
          Returns
          (params r offset)
          Nat8
          (PrimE regionLoadNat8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat8)
        (FuncE
          regionStoreNat8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat16)
        (FuncE
          regionLoadNat16
          Local
          Returns
          (params r offset)
          Nat16
          (PrimE regionLoadNat16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat16)
        (FuncE
          regionStoreNat16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat64)
        (FuncE
          regionLoadNat64
          Local
          Returns
          (params r offset)
          Nat64
          (PrimE regionLoadNat64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat64)
        (FuncE
          regionStoreNat64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt32)
        (FuncE
          regionLoadInt32
          Local
          Returns
          (params r offset)
          Int32
          (PrimE regionLoadInt32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt32)
        (FuncE
          regionStoreInt32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt8)
        (FuncE
          regionLoadInt8
          Local
          Returns
          (params r offset)
          Int8
          (PrimE regionLoadInt8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt8)
        (FuncE
          regionStoreInt8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt16)
        (FuncE
          regionLoadInt16
          Local
          Returns
          (params r offset)
          Int16
          (PrimE regionLoadInt16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt16)
        (FuncE
          regionStoreInt16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt64)
        (FuncE
          regionLoadInt64
          Local
          Returns
          (params r offset)
          Int64
          (PrimE regionLoadInt64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt64)
        (FuncE
          regionStoreInt64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadFloat)
        (FuncE
          regionLoadFloat
          Local
          Returns
          (params r offset)
          Float
          (PrimE regionLoadFloat (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreFloat)
        (FuncE
          regionStoreFloat
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreFloat (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadBlob)
        (FuncE
          regionLoadBlob
          Local
          Returns
          (params r offset size)
          Blob
          (PrimE regionLoadBlob (VarE r) (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP regionStoreBlob)
        (FuncE
          regionStoreBlob
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreBlob (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD (VarP call_raw) (VarE @call_raw))
      (LetD
        (VarP performanceCounter)
        (FuncE
          performanceCounter
          Local
          Returns
          (params counter)
          Nat64
          (PrimE performanceCounter (VarE counter))
        )
      )
      (LetD
        (VarP forall)
        (FuncE
          forall
          Local
          Returns
          (T__108 Any)
          (params f)
          Bool
          (PrimE forall (VarE f))
        )
      )
      (LetD
        (VarP exists)
        (FuncE
          exists
          Local
          Returns
          (T__109 Any)
          (params f)
          Bool
          (PrimE exists (VarE f))
        )
      )
      (LetD
        (VarP Ret)
        (FuncE Ret Local Returns (T__110 Any) T__110 (PrimE viperRet))
      )
      (LetD (VarP setTimer) (VarE @setTimer))
      (LetD (VarP cancelTimer) (VarE @cancelTimer))
      (NewObjE
        Module
        (trap trap)
        (time time)
        (textUppercase textUppercase)
        (textLowercase textLowercase)
        (textCompare textCompare)
        (tan tan)
        (stableVarQuery stableVarQuery)
        (stableMemoryStoreNat8 stableMemoryStoreNat8)
        (stableMemoryStoreNat64 stableMemoryStoreNat64)
        (stableMemoryStoreNat32 stableMemoryStoreNat32)
        (stableMemoryStoreNat16 stableMemoryStoreNat16)
        (stableMemoryStoreInt8 stableMemoryStoreInt8)
        (stableMemoryStoreInt64 stableMemoryStoreInt64)
        (stableMemoryStoreInt32 stableMemoryStoreInt32)
        (stableMemoryStoreInt16 stableMemoryStoreInt16)
        (stableMemoryStoreFloat stableMemoryStoreFloat)
        (stableMemoryStoreBlob stableMemoryStoreBlob)
        (stableMemorySize stableMemorySize)
        (stableMemoryLoadNat8 stableMemoryLoadNat8)
        (stableMemoryLoadNat64 stableMemoryLoadNat64)
        (stableMemoryLoadNat32 stableMemoryLoadNat32)
        (stableMemoryLoadNat16 stableMemoryLoadNat16)
        (stableMemoryLoadInt8 stableMemoryLoadInt8)
        (stableMemoryLoadInt64 stableMemoryLoadInt64)
        (stableMemoryLoadInt32 stableMemoryLoadInt32)
        (stableMemoryLoadInt16 stableMemoryLoadInt16)
        (stableMemoryLoadFloat stableMemoryLoadFloat)
        (stableMemoryLoadBlob stableMemoryLoadBlob)
        (stableMemoryGrow stableMemoryGrow)
        (sin sin)
        (shiftRight shiftRight)
        (shiftLeft shiftLeft)
        (setTimer setTimer)
        (setCertifiedData setCertifiedData)
        (rts_version rts_version)
        (rts_total_allocation rts_total_allocation)
        (rts_stable_memory_size rts_stable_memory_size)
        (rts_reclaimed rts_reclaimed)
        (rts_mutator_instructions rts_mutator_instructions)
        (rts_memory_size rts_memory_size)
        (rts_max_stack_size rts_max_stack_size)
        (rts_max_live_size rts_max_live_size)
        (rts_logical_stable_memory_size rts_logical_stable_memory_size)
        (rts_heap_size rts_heap_size)
        (rts_collector_instructions rts_collector_instructions)
        (rts_callback_table_size rts_callback_table_size)
        (rts_callback_table_count rts_callback_table_count)
        (regionStoreNat8 regionStoreNat8)
        (regionStoreNat64 regionStoreNat64)
        (regionStoreNat32 regionStoreNat32)
        (regionStoreNat16 regionStoreNat16)
        (regionStoreInt8 regionStoreInt8)
        (regionStoreInt64 regionStoreInt64)
        (regionStoreInt32 regionStoreInt32)
        (regionStoreInt16 regionStoreInt16)
        (regionStoreFloat regionStoreFloat)
        (regionStoreBlob regionStoreBlob)
        (regionSize regionSize)
        (regionNew regionNew)
        (regionLoadNat8 regionLoadNat8)
        (regionLoadNat64 regionLoadNat64)
        (regionLoadNat32 regionLoadNat32)
        (regionLoadNat16 regionLoadNat16)
        (regionLoadInt8 regionLoadInt8)
        (regionLoadInt64 regionLoadInt64)
        (regionLoadInt32 regionLoadInt32)
        (regionLoadInt16 regionLoadInt16)
        (regionLoadFloat regionLoadFloat)
        (regionLoadBlob regionLoadBlob)
        (regionId regionId)
        (regionGrow regionGrow)
        (principalOfBlob principalOfBlob)
        (principalOfActor principalOfActor)
        (popcntNat8 popcntNat8)
        (popcntNat64 popcntNat64)
        (popcntNat32 popcntNat32)
        (popcntNat16 popcntNat16)
        (popcntInt8 popcntInt8)
        (popcntInt64 popcntInt64)
        (popcntInt32 popcntInt32)
        (popcntInt16 popcntInt16)
        (performanceCounter performanceCounter)
        (natToNat8 natToNat8)
        (natToNat64 natToNat64)
        (natToNat32 natToNat32)
        (natToNat16 natToNat16)
        (nat8ToNat16 nat8ToNat16)
        (nat8ToNat nat8ToNat)
        (nat8ToInt8 nat8ToInt8)
        (nat64ToNat32 nat64ToNat32)
        (nat64ToNat nat64ToNat)
        (nat64ToInt64 nat64ToInt64)
        (nat32ToNat64 nat32ToNat64)
        (nat32ToNat16 nat32ToNat16)
        (nat32ToNat nat32ToNat)
        (nat32ToInt32 nat32ToInt32)
        (nat32ToChar nat32ToChar)
        (nat16ToNat8 nat16ToNat8)
        (nat16ToNat32 nat16ToNat32)
        (nat16ToNat nat16ToNat)
        (nat16ToInt16 nat16ToInt16)
        (log log)
        (isController isController)
        (intToNat8Wrap intToNat8Wrap)
        (intToNat64Wrap intToNat64Wrap)
        (intToNat32Wrap intToNat32Wrap)
        (intToNat16Wrap intToNat16Wrap)
        (intToInt8Wrap intToInt8Wrap)
        (intToInt8 intToInt8)
        (intToInt64Wrap intToInt64Wrap)
        (intToInt64 intToInt64)
        (intToInt32Wrap intToInt32Wrap)
        (intToInt32 intToInt32)
        (intToInt16Wrap intToInt16Wrap)
        (intToInt16 intToInt16)
        (intToFloat intToFloat)
        (int8ToNat8 int8ToNat8)
        (int8ToInt16 int8ToInt16)
        (int8ToInt int8ToInt)
        (int64ToNat64 int64ToNat64)
        (int64ToInt32 int64ToInt32)
        (int64ToInt int64ToInt)
        (int64ToFloat int64ToFloat)
        (int32ToNat32 int32ToNat32)
        (int32ToInt64 int32ToInt64)
        (int32ToInt16 int32ToInt16)
        (int32ToInt int32ToInt)
        (int16ToNat16 int16ToNat16)
        (int16ToInt8 int16ToInt8)
        (int16ToInt32 int16ToInt32)
        (int16ToInt int16ToInt)
        (idlHash idlHash)
        (hashBlob hashBlob)
        (getCertificate getCertificate)
        (forall forall)
        (floatTrunc floatTrunc)
        (floatToText floatToText)
        (floatToInt64 floatToInt64)
        (floatToInt floatToInt)
        (floatToFormattedText floatToFormattedText)
        (floatSqrt floatSqrt)
        (floatNearest floatNearest)
        (floatMin floatMin)
        (floatMax floatMax)
        (floatFloor floatFloor)
        (floatCopySign floatCopySign)
        (floatCeil floatCeil)
        (floatAbs floatAbs)
        (exp exp)
        (exists exists)
        (errorMessage errorMessage)
        (errorCode errorCode)
        (error error)
        (encodeUtf8 encodeUtf8)
        (decodeUtf8 decodeUtf8)
        (debugPrintNat debugPrintNat)
        (debugPrintInt debugPrintInt)
        (debugPrintChar debugPrintChar)
        (debugPrint debugPrint)
        (cyclesRefunded cyclesRefunded)
        (cyclesBalance cyclesBalance)
        (cyclesAvailable cyclesAvailable)
        (cyclesAdd cyclesAdd)
        (cyclesAccept cyclesAccept)
        (ctzNat8 ctzNat8)
        (ctzNat64 ctzNat64)
        (ctzNat32 ctzNat32)
        (ctzNat16 ctzNat16)
        (ctzInt8 ctzInt8)
        (ctzInt64 ctzInt64)
        (ctzInt32 ctzInt32)
        (ctzInt16 ctzInt16)
        (createActor createActor)
        (cos cos)
        (clzNat8 clzNat8)
        (clzNat64 clzNat64)
        (clzNat32 clzNat32)
        (clzNat16 clzNat16)
        (clzInt8 clzInt8)
        (clzInt64 clzInt64)
        (clzInt32 clzInt32)
        (clzInt16 clzInt16)
        (charToUpper charToUpper)
        (charToText charToText)
        (charToNat32 charToNat32)
        (charToLower charToLower)
        (charIsWhitespace charIsWhitespace)
        (charIsUppercase charIsUppercase)
        (charIsLowercase charIsLowercase)
        (charIsAlphabetic charIsAlphabetic)
        (canisterVersion canisterVersion)
        (cancelTimer cancelTimer)
        (call_raw call_raw)
        (btstNat8 btstNat8)
        (btstNat64 btstNat64)
        (btstNat32 btstNat32)
        (btstNat16 btstNat16)
        (btstInt8 btstInt8)
        (btstInt64 btstInt64)
        (btstInt32 btstInt32)
        (btstInt16 btstInt16)
        (blobToArrayMut blobToArrayMut)
        (blobToArray blobToArray)
        (blobOfPrincipal blobOfPrincipal)
        (blobCompare blobCompare)
        (arrayToBlob arrayToBlob)
        (arrayMutToBlob arrayMutToBlob)
        (arctan2 arctan2)
        (arctan arctan)
        (arcsin arcsin)
        (arccos arccos)
        (abs abs)
        (Types Types)
        (Ret Ret)
        (Array_tabulate Array_tabulate)
        (Array_init Array_init)
        module {Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; Ret : <T>() -> T; Types : module {}; abs : Int -> Nat; arccos : Float -> Float; arcsin : Float -> Float; arctan : Float -> Float; arctan2 : (Float, Float) -> Float; arrayMutToBlob : [var Nat8] -> Blob; arrayToBlob : [Nat8] -> Blob; blobCompare : (Blob, Blob) -> Int8; blobOfPrincipal : Principal -> Blob; blobToArray : Blob -> [Nat8]; blobToArrayMut : Blob -> [var Nat8]; btstInt16 : (Int16, Int16) -> Bool; btstInt32 : (Int32, Int32) -> Bool; btstInt64 : (Int64, Int64) -> Bool; btstInt8 : (Int8, Int8) -> Bool; btstNat16 : (Nat16, Nat16) -> Bool; btstNat32 : (Nat32, Nat32) -> Bool; btstNat64 : (Nat64, Nat64) -> Bool; btstNat8 : (Nat8, Nat8) -> Bool; call_raw : (Principal, Text, Blob) -> async Blob; cancelTimer : Nat -> (); canisterVersion : () -> Nat64; charIsAlphabetic : Char -> Bool; charIsLowercase : Char -> Bool; charIsUppercase : Char -> Bool; charIsWhitespace : Char -> Bool; charToLower : Char -> Char; charToNat32 : Char -> Nat32; charToText : Char -> Text; charToUpper : Char -> Char; clzInt16 : Int16 -> Int16; clzInt32 : Int32 -> Int32; clzInt64 : Int64 -> Int64; clzInt8 : Int8 -> Int8; clzNat16 : Nat16 -> Nat16; clzNat32 : Nat32 -> Nat32; clzNat64 : Nat64 -> Nat64; clzNat8 : Nat8 -> Nat8; cos : Float -> Float; createActor : (Blob, Blob) -> async Principal; ctzInt16 : Int16 -> Int16; ctzInt32 : Int32 -> Int32; ctzInt64 : Int64 -> Int64; ctzInt8 : Int8 -> Int8; ctzNat16 : Nat16 -> Nat16; ctzNat32 : Nat32 -> Nat32; ctzNat64 : Nat64 -> Nat64; ctzNat8 : Nat8 -> Nat8; cyclesAccept : <system>Nat -> Nat; cyclesAdd : <system>Nat -> (); cyclesAvailable : () -> Nat; cyclesBalance : () -> Nat; cyclesRefunded : () -> Nat; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); decodeUtf8 : Blob -> ?Text; encodeUtf8 : Text -> Blob; error : Text -> Error; errorCode : Error -> ErrorCode__1; errorMessage : Error -> Text; exists : <T>(T -> Bool) -> Bool; exp : Float -> Float; floatAbs : Float -> Float; floatCeil : Float -> Float; floatCopySign : (Float, Float) -> Float; floatFloor : Float -> Float; floatMax : (Float, Float) -> Float; floatMin : (Float, Float) -> Float; floatNearest : Float -> Float; floatSqrt : Float -> Float; floatToFormattedText : (Float, Nat8, Nat8) -> Text; floatToInt : Float -> Int; floatToInt64 : Float -> Int64; floatToText : Float -> Text; floatTrunc : Float -> Float; forall : <T>(T -> Bool) -> Bool; getCertificate : () -> ?Blob; hashBlob : Blob -> Nat32; idlHash : Text -> Nat32; int16ToInt : Int16 -> Int; int16ToInt32 : Int16 -> Int32; int16ToInt8 : Int16 -> Int8; int16ToNat16 : Int16 -> Nat16; int32ToInt : Int32 -> Int; int32ToInt16 : Int32 -> Int16; int32ToInt64 : Int32 -> Int64; int32ToNat32 : Int32 -> Nat32; int64ToFloat : Int64 -> Float; int64ToInt : Int64 -> Int; int64ToInt32 : Int64 -> Int32; int64ToNat64 : Int64 -> Nat64; int8ToInt : Int8 -> Int; int8ToInt16 : Int8 -> Int16; int8ToNat8 : Int8 -> Nat8; intToFloat : Int -> Float; intToInt16 : Int -> Int16; intToInt16Wrap : Int -> Int16; intToInt32 : Int -> Int32; intToInt32Wrap : Int -> Int32; intToInt64 : Int -> Int64; intToInt64Wrap : Int -> Int64; intToInt8 : Int -> Int8; intToInt8Wrap : Int -> Int8; intToNat16Wrap : Int -> Nat16; intToNat32Wrap : Int -> Nat32; intToNat64Wrap : Int -> Nat64; intToNat8Wrap : Int -> Nat8; isController : Principal -> Bool; log : Float -> Float; nat16ToInt16 : Nat16 -> Int16; nat16ToNat : Nat16 -> Nat; nat16ToNat32 : Nat16 -> Nat32; nat16ToNat8 : Nat16 -> Nat8; nat32ToChar : Nat32 -> Char; nat32ToInt32 : Nat32 -> Int32; nat32ToNat : Nat32 -> Nat; nat32ToNat16 : Nat32 -> Nat16; nat32ToNat64 : Nat32 -> Nat64; nat64ToInt64 : Nat64 -> Int64; nat64ToNat : Nat64 -> Nat; nat64ToNat32 : Nat64 -> Nat32; nat8ToInt8 : Nat8 -> Int8; nat8ToNat : Nat8 -> Nat; nat8ToNat16 : Nat8 -> Nat16; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; performanceCounter : Nat32 -> Nat64; popcntInt16 : Int16 -> Int16; popcntInt32 : Int32 -> Int32; popcntInt64 : Int64 -> Int64; popcntInt8 : Int8 -> Int8; popcntNat16 : Nat16 -> Nat16; popcntNat32 : Nat32 -> Nat32; popcntNat64 : Nat64 -> Nat64; popcntNat8 : Nat8 -> Nat8; principalOfActor : (actor {}) -> Principal; principalOfBlob : Blob -> Principal; regionGrow : (Region, Nat64) -> Nat64; regionId : Region -> Nat; regionLoadBlob : (Region, Nat64, Nat) -> Blob; regionLoadFloat : (Region, Nat64) -> Float; regionLoadInt16 : (Region, Nat64) -> Int16; regionLoadInt32 : (Region, Nat64) -> Int32; regionLoadInt64 : (Region, Nat64) -> Int64; regionLoadInt8 : (Region, Nat64) -> Int8; regionLoadNat16 : (Region, Nat64) -> Nat16; regionLoadNat32 : (Region, Nat64) -> Nat32; regionLoadNat64 : (Region, Nat64) -> Nat64; regionLoadNat8 : (Region, Nat64) -> Nat8; regionNew : () -> Region; regionSize : Region -> Nat64; regionStoreBlob : (Region, Nat64, Blob) -> (); regionStoreFloat : (Region, Nat64, Float) -> (); regionStoreInt16 : (Region, Nat64, Int16) -> (); regionStoreInt32 : (Region, Nat64, Int32) -> (); regionStoreInt64 : (Region, Nat64, Int64) -> (); regionStoreInt8 : (Region, Nat64, Int8) -> (); regionStoreNat16 : (Region, Nat64, Nat16) -> (); regionStoreNat32 : (Region, Nat64, Nat32) -> (); regionStoreNat64 : (Region, Nat64, Nat64) -> (); regionStoreNat8 : (Region, Nat64, Nat8) -> (); rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_collector_instructions : () -> Nat; rts_heap_size : () -> Nat; rts_logical_stable_memory_size : () -> Nat; rts_max_live_size : () -> Nat; rts_max_stack_size : () -> Nat; rts_memory_size : () -> Nat; rts_mutator_instructions : () -> Nat; rts_reclaimed : () -> Nat; rts_stable_memory_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; setCertifiedData : Blob -> (); setTimer : <system>(Nat64, Bool, () -> async ()) -> Nat; shiftLeft : (Nat, Nat32) -> Nat; shiftRight : (Nat, Nat32) -> Nat; sin : Float -> Float; stableMemoryGrow : Nat64 -> Nat64; stableMemoryLoadBlob : (Nat64, Nat) -> Blob; stableMemoryLoadFloat : Nat64 -> Float; stableMemoryLoadInt16 : Nat64 -> Int16; stableMemoryLoadInt32 : Nat64 -> Int32; stableMemoryLoadInt64 : Nat64 -> Int64; stableMemoryLoadInt8 : Nat64 -> Int8; stableMemoryLoadNat16 : Nat64 -> Nat16; stableMemoryLoadNat32 : Nat64 -> Nat32; stableMemoryLoadNat64 : Nat64 -> Nat64; stableMemoryLoadNat8 : Nat64 -> Nat8; stableMemorySize : () -> Nat64; stableMemoryStoreBlob : (Nat64, Blob) -> (); stableMemoryStoreFloat : (Nat64, Float) -> (); stableMemoryStoreInt16 : (Nat64, Int16) -> (); stableMemoryStoreInt32 : (Nat64, Int32) -> (); stableMemoryStoreInt64 : (Nat64, Int64) -> (); stableMemoryStoreInt8 : (Nat64, Int8) -> (); stableMemoryStoreNat16 : (Nat64, Nat16) -> (); stableMemoryStoreNat32 : (Nat64, Nat32) -> (); stableMemoryStoreNat64 : (Nat64, Nat64) -> (); stableMemoryStoreNat8 : (Nat64, Nat8) -> (); stableVarQuery : () -> shared query () -> async {size : Nat64}; tan : Float -> Float; textCompare : (Text, Text) -> Int8; textLowercase : Text -> Text; textUppercase : Text -> Text; time : () -> Nat64; trap : Text -> None__2}
      )
    )
  )
  (LetD
    (ObjP
      (debugPrint (VarP debugPrint))
      (error (VarP error))
      (errorMessage (VarP errorMessage))
      (call_raw (VarP call_raw))
      (principalOfActor (VarP principalOfActor))
    )
    (VarE file$@prim)
  )
  (LetD
    (VarP $__motoko_stable_var_info)
    (FuncE
      $__motoko_stable_var_info
      Shared Query
      Promises
      (T1__4 Any)
      {size : Nat64}
      (AsyncE
        (T2__2 Any)
        (BlockE
          (LetD (VarP $caller/0) (PrimE ICCallerPrim))
          (LetD
            WildP
            (PrimE
              AssertPrim
              (IfE
                (PrimE
                  (RelPrim Principal EqOp)
                  (VarE $caller/0)
                  (PrimE (SelfRef Principal))
                )
                (LitE (BoolLit true))
                (PrimE is_controller (VarE $caller/0))
              )
            )
          )
          (LetD
            (VarP $size/0)
            (PrimE (ICStableSize memory {}) (NewObjE Memory memory {}))
          )
          (NewObjE Object (size $size/0) {size : Nat64})
        )
        T1__4
      )
    )
  )
  (VarD $state/0 ?(memory {}) (PrimE OptPrim (PrimE (ICStableRead memory {}))))
  (LetD
    (VarP $getState/0)
    (FuncE
      $getState/0
      Local
      Returns
      memory {}
      (SwitchE
        (VarE $state/0)
        (case (LitP NullLit) (LoopE (PrimE TupPrim)))
        (case (OptP (VarP $v/0)) (VarE $v/0))
      )
    )
  )
  (LetD
    (VarP foo)
    (FuncE
      foo
      Shared
      Returns
      ($__267 Any)
      ()
      (BlockE
        (LetD
          WildP
          (AsyncE
            ($foo__2 Any)
            (BlockE
              (LetD
                (VarP $thunk/0)
                (FuncE
                  $cleanup
                  Local
                  Returns
                  ()
                  (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT0)))
                )
              )
              (TryE
                (BlockE
                  (LetD
                    (VarP $thunk/1)
                    (FuncE
                      $cleanup
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT1)))
                    )
                  )
                  (TryE
                    (BlockE
                      (LetD
                        (VarP $thunk/2)
                        (FuncE
                          $cleanup
                          Local
                          Returns
                          ()
                          (PrimE
                            (CallPrim)
                            (VarE debugPrint)
                            (LitE (TextLit OUT2))
                          )
                        )
                      )
                      (TryE
                        (BlockE
                          (LetD
                            WildP
                            (PrimE
                              AwaitPrim
                              (AsyncE
                                ($@anon-async-8.29__2 Any)
                                (PrimE TupPrim)
                                $foo__2
                              )
                            )
                          )
                          (IfE
                            (LitE (BoolLit true))
                            (PrimE RetPrim (PrimE TupPrim))
                            (PrimE RetPrim (PrimE TupPrim))
                          )
                        )
                        ;
                        $thunk/2
                      )
                    )
                    ;
                    $thunk/1
                  )
                )
                ;
                $thunk/0
              )
            )
            $__267
          )
        )
        (PrimE TupPrim)
      )
    )
  )
  (LetD WildP (AssignE (VarLE $state/0) (LitE NullLit)))
  (foo foo)
  (__motoko_stable_var_info $__motoko_stable_var_info)
  (System
    (Pre (PrimE (ICStableWrite memory {}) (NewObjE Memory memory {})))
    (Post (PrimE TupPrim))
    (Heartbeat (PrimE TupPrim))
    (Timer
      (BlockE
        (LetD WildP (PrimE (CallPrim ()) (VarE @timer_helper) (PrimE TupPrim)))
        (PrimE TupPrim)
      )
    )
    (Inspect (PrimE TupPrim))
  )
  actor {foo : shared () -> ()}
)
(ActorU
  (VarD @cycles Nat (LitE (NatLit 0)))
  (LetD
    (VarP @add_cycles)
    (FuncE
      @add_cycles
      Local
      Returns
      ($__259 Any)
      ()
      (BlockE
        (LetD (VarP cycles) (VarE @cycles))
        (LetD WildP (PrimE (CallPrim) (VarE @reset_cycles) (PrimE TupPrim)))
        (IfE
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
          (PrimE SystemCyclesAddPrim (VarE cycles))
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @reset_cycles)
    (FuncE
      @reset_cycles
      Local
      Returns
      ()
      (AssignE (VarLE @cycles) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @immut_array_get)
    (FuncE
      @immut_array_get
      Local
      Returns
      (A__45 Any)
      (params xs)
      Nat -> A__45
      (FuncE
        @anon-func-39.3
        Local
        Returns
        (params n)
        A__45
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @mut_array_get)
    (FuncE
      @mut_array_get
      Local
      Returns
      (A__46 Any)
      (params xs)
      Nat -> A__46
      (FuncE
        @anon-func-41.3
        Local
        Returns
        (params n)
        A__46
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @immut_array_size)
    (FuncE
      @immut_array_size
      Local
      Returns
      (A__47 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-43.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_size)
    (FuncE
      @mut_array_size
      Local
      Returns
      (A__48 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-45.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_put)
    (FuncE
      @mut_array_put
      Local
      Returns
      (A__49 Any)
      (params xs)
      (Nat, A__49) -> ()
      (FuncE
        @anon-func-47.3
        Local
        Returns
        (params n x)
        ()
        (AssignE (IdxLE (VarE xs) (VarE n)) (VarE x))
      )
    )
  )
  (LetD
    (VarP @immut_array_keys)
    (FuncE
      @immut_array_keys
      Local
      Returns
      (A__50 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-49.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_keys)
    (FuncE
      @mut_array_keys
      Local
      Returns
      (A__51 Any)
      (params xs)
      () -> @Iter__1<Nat>
      (FuncE
        @anon-func-55.3
        Local
        Returns
        @Iter__1<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @immut_array_vals)
    (FuncE
      @immut_array_vals
      Local
      Returns
      (A__52 Any)
      (params xs)
      () -> @Iter__1<A__52>
      (FuncE
        @anon-func-61.3
        Local
        Returns
        @Iter__1<A__52>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__52
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__52})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_vals)
    (FuncE
      @mut_array_vals
      Local
      Returns
      (A__53 Any)
      (params xs)
      () -> @Iter__1<A__53>
      (FuncE
        @anon-func-67.3
        Local
        Returns
        @Iter__1<A__53>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__53
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__53})
        )
      )
    )
  )
  (LetD
    (VarP @blob_size)
    (FuncE
      @blob_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-73.3 Local Returns Nat (PrimE blob_size (VarE xs)))
    )
  )
  (LetD
    (VarP @blob_vals)
    (FuncE
      @blob_vals
      Local
      Returns
      (params xs)
      () -> @Iter__1<Nat8>
      (FuncE
        @anon-func-75.3
        Local
        Returns
        @Iter__1<Nat8>
        (BlockE
          (LetD (VarP i) (PrimE blob_vals_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat8
              (IfE
                (PrimE blob_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE blob_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat8})
        )
      )
    )
  )
  (LetD
    (VarP @text_size)
    (FuncE
      @text_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-86.3 Local Returns Nat (PrimE text_len (VarE xs)))
    )
  )
  (LetD
    (VarP @text_chars)
    (FuncE
      @text_chars
      Local
      Returns
      (params xs)
      () -> @Iter__1<Char>
      (FuncE
        @anon-func-88.3
        Local
        Returns
        @Iter__1<Char>
        (BlockE
          (LetD (VarP i) (PrimE text_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Char
              (IfE
                (PrimE text_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE text_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Char})
        )
      )
    )
  )
  (LetD
    (VarP @text_of_num)
    (FuncE
      @text_of_num
      Local
      Returns
      (params x base sep digits)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit )))
        (VarD n Nat (VarE x))
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat EqOp) (VarE n) (LitE (NatLit 0)))
            (PrimE RetPrim (LitE (TextLit 0)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD
          WildP
          (LabelE
            $done/0
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat GtOp) (VarE n) (LitE (NatLit 0)))
                (BlockE
                  (LetD
                    (VarP rem)
                    (PrimE (BinPrim Nat ModOp) (VarE n) (VarE base))
                  )
                  (LetD
                    WildP
                    (IfE
                      (IfE
                        (PrimE (RelPrim Nat GtOp) (VarE sep) (LitE (NatLit 0)))
                        (PrimE (RelPrim Nat EqOp) (VarE i) (VarE sep))
                        (LitE (BoolLit false))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE text)
                            (PrimE
                              (BinPrim Text CatOp)
                              (LitE (TextLit _))
                              (VarE text)
                            )
                          )
                        )
                        (AssignE (VarLE i) (LitE (NatLit 0)))
                      )
                      (PrimE TupPrim)
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE text)
                      (PrimE
                        (BinPrim Text CatOp)
                        (PrimE (CallPrim) (VarE digits) (VarE rem))
                        (VarE text)
                      )
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE n)
                      (PrimE (BinPrim Nat DivOp) (VarE n) (VarE base))
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/0) (PrimE TupPrim))
              )
            )
          )
        )
        (VarE text)
      )
    )
  )
  (LetD
    (VarP @left_pad)
    (FuncE
      @left_pad
      Local
      Returns
      (params pad char t)
      Text
      (IfE
        (PrimE (RelPrim Nat GtOp) (VarE pad) (PrimE text_len (VarE t)))
        (BlockE
          (VarD
            i
            Nat
            (PrimE (BinPrim Nat SubOp) (VarE pad) (PrimE text_len (VarE t)))
          )
          (VarD text Text (VarE t))
          (LetD
            WildP
            (LabelE
              $done/1
              ()
              (LoopE
                (IfE
                  (PrimE (RelPrim Nat GtOp) (VarE i) (LitE (NatLit 0)))
                  (BlockE
                    (LetD
                      WildP
                      (AssignE
                        (VarLE text)
                        (PrimE (BinPrim Text CatOp) (VarE char) (VarE text))
                      )
                    )
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat SubOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE (BreakPrim $done/1) (PrimE TupPrim))
                )
              )
            )
          )
          (VarE text)
        )
        (VarE t)
      )
    )
  )
  (LetD
    (VarP @digits_dec)
    (FuncE
      @digits_dec
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE (BinPrim Int AddOp) (VarE x) (LitE (IntLit 48)))
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Nat)
    (FuncE
      @text_of_Nat
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_num)
        (PrimE
          TupPrim
          (VarE x)
          (LitE (NatLit 10))
          (LitE (NatLit 3))
          (VarE @digits_dec)
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Int)
    (FuncE
      @text_of_Int
      Local
      Returns
      (params x)
      Text
      (IfE
        (PrimE (RelPrim Int EqOp) (VarE x) (LitE (IntLit 0)))
        (LitE (TextLit 0))
        (PrimE
          (BinPrim Text CatOp)
          (IfE
            (PrimE (RelPrim Int LtOp) (VarE x) (LitE (IntLit 0)))
            (LitE (TextLit -))
            (LitE (TextLit +))
          )
          (PrimE (CallPrim) (VarE @text_of_Nat) (PrimE abs (VarE x)))
        )
      )
    )
  )
  (LetD
    (VarP @digits_hex)
    (FuncE
      @digits_hex
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE
              (BinPrim Int AddOp)
              (VarE x)
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE x) (LitE (NatLit 10)))
                (LitE (IntLit 48))
                (LitE (IntLit 55))
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @int64ToInt)
    (FuncE
      @int64ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int64 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int32ToInt)
    (FuncE
      @int32ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int32 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int16ToInt)
    (FuncE
      @int16ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int16 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int8ToInt)
    (FuncE
      @int8ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int8 Int) (VarE n))
    )
  )
  (LetD
    (VarP @nat64ToNat)
    (FuncE
      @nat64ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat64 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat32ToNat)
    (FuncE
      @nat32ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat32 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat16ToNat)
    (FuncE
      @nat16ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat16 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat8ToNat)
    (FuncE
      @nat8ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat8 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @text_of_Nat8)
    (FuncE
      @text_of_Nat8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat8ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat16)
    (FuncE
      @text_of_Nat16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat16ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat32)
    (FuncE
      @text_of_Nat32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat32ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat64)
    (FuncE
      @text_of_Nat64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat64ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int8)
    (FuncE
      @text_of_Int8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int8ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int16)
    (FuncE
      @text_of_Int16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int16ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int32)
    (FuncE
      @text_of_Int32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int32ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int64)
    (FuncE
      @text_of_Int64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int64ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Float)
    (FuncE
      @text_of_Float
      Local
      Returns
      (params x)
      Text
      (PrimE Float->Text (VarE x))
    )
  )
  (LetD
    (VarP @text_of_Bool)
    (FuncE
      @text_of_Bool
      Local
      Returns
      (params b)
      Text
      (IfE (VarE b) (LitE (TextLit true)) (LitE (TextLit false)))
    )
  )
  (LetD
    (VarP @text_of_Text)
    (FuncE
      @text_of_Text
      Local
      Returns
      (params t)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE (BinPrim Text CatOp) (LitE (TextLit ")) (VarE t))
        (LitE (TextLit "))
      )
    )
  )
  (LetD
    (VarP @text_of_Char)
    (FuncE
      @text_of_Char
      Local
      Returns
      (params c)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE
          (BinPrim Text CatOp)
          (LitE (TextLit '))
          (PrimE conv_Char_Text (VarE c))
        )
        (LitE (TextLit '))
      )
    )
  )
  (LetD
    (VarP @text_of_Blob)
    (FuncE
      @text_of_Blob
      Local
      Returns
      (params blob)
      Text
      (BlockE
        (VarD t Text (LitE (TextLit ")))
        (LetD
          WildP
          (BlockE
            (LetD
              (VarP $nxt/0)
              (PrimE
                (DotPrim next)
                (PrimE
                  (CallPrim)
                  (PrimE (CallPrim) (VarE @blob_vals) (VarE blob))
                  (PrimE TupPrim)
                )
              )
            )
            (LabelE
              $done/2
              ()
              (LoopE
                (SwitchE
                  (PrimE (CallPrim) (VarE $nxt/0) (PrimE TupPrim))
                  (case
                    (LitP NullLit)
                    (PrimE (BreakPrim $done/2) (PrimE TupPrim))
                  )
                  (case
                    (OptP (VarP b))
                    (AssignE
                      (VarLE t)
                      (PrimE
                        (BinPrim Text CatOp)
                        (VarE t)
                        (PrimE
                          (BinPrim Text CatOp)
                          (LitE (TextLit \))
                          (PrimE
                            (CallPrim)
                            (VarE @left_pad)
                            (PrimE
                              TupPrim
                              (LitE (NatLit 2))
                              (LitE (TextLit 0))
                              (PrimE
                                (CallPrim)
                                (VarE @text_of_num)
                                (PrimE
                                  TupPrim
                                  (PrimE (CallPrim) (VarE @nat8ToNat) (VarE b))
                                  (LitE (NatLit 16))
                                  (LitE (NatLit 0))
                                  (VarE @digits_hex)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE t)
            (PrimE (BinPrim Text CatOp) (VarE t) (LitE (TextLit ")))
          )
        )
        (PrimE RetPrim (VarE t))
      )
    )
  )
  (LetD
    (VarP @text_has_parens)
    (FuncE
      @text_has_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case (OptP (LitP (CharLit 40))) (LitE (BoolLit true)))
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_needs_parens)
    (FuncE
      @text_needs_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case
          (OptP
            (AltP
              (AltP
                (AltP (LitP (CharLit 43)) (LitP (CharLit 45)))
                (LitP (CharLit 63))
              )
              (LitP (CharLit 35))
            )
          )
          (LitE (BoolLit true))
        )
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_of_option)
    (FuncE
      @text_of_option
      Local
      Returns
      (T__99 Any)
      (params f x)
      Text
      (SwitchE
        (VarE x)
        (case
          (OptP (VarP y))
          (BlockE
            (LetD (VarP fy) (PrimE (CallPrim) (VarE f) (VarE y)))
            (IfE
              (PrimE (CallPrim) (VarE @text_needs_parens) (VarE fy))
              (PrimE
                (BinPrim Text CatOp)
                (PrimE (BinPrim Text CatOp) (LitE (TextLit ?()) (VarE fy))
                (LitE (TextLit )))
              )
              (PrimE (BinPrim Text CatOp) (LitE (TextLit ?)) (VarE fy))
            )
          )
        )
        (case (LitP NullLit) (LitE (TextLit null)))
      )
    )
  )
  (LetD
    (VarP @text_of_variant)
    (FuncE
      @text_of_variant
      Local
      Returns
      (T__100 Any)
      (params l f x)
      Text
      (BlockE
        (LetD (VarP fx) (PrimE (CallPrim) (VarE f) (VarE x)))
        (IfE
          (PrimE (RelPrim Text EqOp) (VarE fx) (LitE (TextLit ())))
          (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
          (IfE
            (PrimE (CallPrim) (VarE @text_has_parens) (VarE fx))
            (PrimE
              (BinPrim Text CatOp)
              (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
              (VarE fx)
            )
            (PrimE
              (BinPrim Text CatOp)
              (PrimE
                (BinPrim Text CatOp)
                (PrimE
                  (BinPrim Text CatOp)
                  (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
                  (LitE (TextLit ())
                )
                (VarE fx)
              )
              (LitE (TextLit )))
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_array)
    (FuncE
      @text_of_array
      Local
      Returns
      (T__101 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/0) (VarE xs))
            (LetD (VarP $last/0) (PrimE GetLastArrayOffset (VarE $arr/0)))
            (VarD $indx/0 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/0) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/3
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/0) (VarE $indx/0))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (AssignE (VarLE first) (LitE (BoolLit false)))
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/0) (VarE $last/0))
                      (PrimE (BreakPrim $done/3) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/0)
                        (PrimE NextArrayOffset (VarE $indx/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @text_of_array_mut)
    (FuncE
      @text_of_array_mut
      Local
      Returns
      (T__102 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [var)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/1) (VarE xs))
            (LetD (VarP $last/1) (PrimE GetLastArrayOffset (VarE $arr/1)))
            (VarD $indx/1 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/1) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/4
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/1) (VarE $indx/1))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (BlockE
                              (LetD
                                WildP
                                (AssignE (VarLE first) (LitE (BoolLit false)))
                              )
                              (AssignE
                                (VarLE text)
                                (PrimE
                                  (BinPrim Text CatOp)
                                  (VarE text)
                                  (LitE (TextLit  ))
                                )
                              )
                            )
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/1) (VarE $last/1))
                      (PrimE (BreakPrim $done/4) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/1)
                        (PrimE NextArrayOffset (VarE $indx/1))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @equal_array)
    (FuncE
      @equal_array
      Local
      Returns
      (T__103 Any)
      (params eq a b)
      Bool
      (BlockE
        (LetD
          WildP
          (IfE
            (PrimE
              (RelPrim Bool EqOp)
              (PrimE
                (RelPrim Nat EqOp)
                (PrimE array_len (VarE a))
                (PrimE array_len (VarE b))
              )
              (LitE (BoolLit false))
            )
            (PrimE RetPrim (LitE (BoolLit false)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD (VarP s) (PrimE array_len (VarE a)))
        (LetD
          WildP
          (LabelE
            $done/5
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE i) (VarE s))
                (BlockE
                  (LetD
                    WildP
                    (IfE
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (CallPrim)
                          (VarE eq)
                          (PrimE
                            TupPrim
                            (PrimE IdxPrim (VarE a) (VarE i))
                            (PrimE IdxPrim (VarE b) (VarE i))
                          )
                        )
                        (LitE (BoolLit false))
                      )
                      (PrimE RetPrim (LitE (BoolLit false)))
                      (PrimE TupPrim)
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/5) (PrimE TupPrim))
              )
            )
          )
        )
        (PrimE RetPrim (LitE (BoolLit true)))
      )
    )
  )
  (VarD @refund Nat (LitE (NatLit 0)))
  (LetD
    (VarP @reset_refund)
    (FuncE
      @reset_refund
      Local
      Returns
      ()
      (AssignE (VarLE @refund) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @getSystemRefund)
    (FuncE
      @getSystemRefund
      Local
      Returns
      @Refund__1
      (PrimE RetPrim (PrimE SystemCyclesRefundedPrim))
    )
  )
  (LetD (VarP @cleanup) (FuncE @cleanup Local Returns () (PrimE TupPrim)))
  (LetD
    (VarP @new_async)
    (FuncE
      @new_async
      Local
      Returns
      (T__104 Any__2)
      (@Async__1<T__104>, @Cont__1<T__104>, @Cont__1<Error>, @CleanCont__1)
      (BlockE
        (LetD
          (VarP w_null)
          (FuncE
            @anon-func-317.16
            Local
            Returns
            (params r t)
            ()
            (PrimE TupPrim)
          )
        )
        (LetD
          (VarP r_null)
          (FuncE
            @anon-func-318.16
            Local
            Returns
            (params $ignored0/0)
            ()
            (PrimE TupPrim)
          )
        )
        (VarD result ?@Result__1<T__104> (LitE NullLit))
        (VarD ws (@Refund__1, T__104) -> () (VarE w_null))
        (VarD rs Error -> () (VarE r_null))
        (LetD
          (VarP getRefund)
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE @cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
        )
        (LetD
          (VarP fulfill)
          (FuncE
            fulfill
            Local
            Returns
            (params t)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP refund)
                    (IfE
                      (VarE getRefund)
                      (PrimE (CallPrim) (VarE @getSystemRefund) (PrimE TupPrim))
                      (LitE (NatLit 0))
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE
                        OptPrim
                        (PrimE (TagE ok) (PrimE TupPrim (VarE refund) (VarE t)))
                      )
                    )
                  )
                  (LetD (VarP ws_) (VarE ws))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE
                    (CallPrim)
                    (VarE ws_)
                    (PrimE TupPrim (VarE refund) (VarE t))
                  )
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (LetD
          (VarP fail)
          (FuncE
            fail
            Local
            Returns
            (params e)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE OptPrim (PrimE (TagE error) (VarE e)))
                    )
                  )
                  (LetD (VarP rs_) (VarE rs))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE (CallPrim) (VarE rs_) (VarE e))
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (VarD cleanup () -> () (VarE @cleanup))
        (LetD
          (VarP clean)
          (FuncE
            clean
            Local
            Returns
            ()
            (PrimE (CallPrim) (VarE cleanup) (PrimE TupPrim))
          )
        )
        (LetD
          (VarP enqueue)
          (FuncE
            enqueue
            Local
            Returns
            (params k r b)
            {#schedule : () -> (); #suspend}
            (BlockE
              (LetD WildP (AssignE (VarLE cleanup) (VarE b)))
              (SwitchE
                (VarE result)
                (case
                  (LitP NullLit)
                  (BlockE
                    (LetD (VarP ws_) (VarE ws))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE ws)
                        (FuncE
                          @anon-func-365.15
                          Local
                          Returns
                          (params r t)
                          ()
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE ws_)
                                (PrimE TupPrim (VarE r) (VarE t))
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                            (PrimE (CallPrim) (VarE k) (VarE t))
                          )
                        )
                      )
                    )
                    (LetD (VarP rs_) (VarE rs))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE rs)
                        (FuncE
                          @anon-func-372.15
                          Local
                          Returns
                          (params e)
                          ()
                          (BlockE
                            (LetD WildP (PrimE (CallPrim) (VarE rs_) (VarE e)))
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_refund)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE (CallPrim) (VarE r) (VarE e))
                          )
                        )
                      )
                    )
                    (PrimE (TagE suspend) (PrimE TupPrim))
                  )
                )
                (case
                  (OptP (TagP ok (TupP (VarP r) (VarP t))))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-381.20
                      Local
                      Returns
                      ()
                      (BlockE
                        (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                        (PrimE (CallPrim) (VarE k) (VarE t))
                      )
                    )
                  )
                )
                (case
                  (OptP (TagP error (VarP e)))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-384.20
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE r) (VarE e))
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim (VarE enqueue) (VarE fulfill) (VarE fail) (VarE clean))
      )
    )
  )
  (LetD (VarP @ManagementCanister) (NewObjE Module module {}))
  (LetD
    (VarP @ic00)
    (PrimE
      (ActorOfIdBlob
        actor {create_canister : shared {sender_canister_version : ?Nat64; settings : ?canister_settings__1} -> async {canister_id : Principal}; install_code : shared {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1} -> async ()}
      )
      (PrimE BlobOfIcUrl (LitE (TextLit aaaaa-aa)))
    )
  )
  (LetD
    (VarP @install_actor_helper)
    (FuncE
      @install_actor_helper
      Local
      Returns
      ($__260 Any)
      (params install_arg wasm_module arg)
      async*<$__260> Principal
      (PrimE
        (CPSAsync* $__260)
        (FuncE
          $lambda
          Local
          Returns
          ($@anon-async*-427.24__2 Any)
          (params $k/0 $r/1 $b/0)
          ()
          (DeclareE
            $mode/2
            (DeclareE
              $canister_id/2
              (BlockE
                (LetD
                  (VarP $k/2)
                  (FuncE
                    $k/2
                    Local
                    Returns
                    (params $param0/0 $param1/0)
                    ()
                    (BlockE
                      (LetD
                        (VarP $v/5)
                        (PrimE TupPrim (VarE $param0/0) (VarE $param1/0))
                      )
                      (BlockE
                        (LetD (TupP (VarP $v/3) (VarP $v/4)) (VarE $v/5))
                        (LetD WildP (DefineE $mode/2 Const (VarE $v/3)))
                        (LetD WildP (DefineE $canister_id/2 Const (VarE $v/4)))
                        (BlockE
                          (LetD (VarP $u/4) (PrimE TupPrim))
                          (BlockE
                            (LetD
                              (VarP $k/1)
                              (FuncE
                                $k/1
                                Local
                                Returns
                                ()
                                (BlockE
                                  (LetD (VarP $v/6) (PrimE TupPrim))
                                  (BlockE
                                    (LetD WildP (VarE $v/6))
                                    (BlockE
                                      (LetD (VarP $u/5) (PrimE TupPrim))
                                      (BlockE
                                        (LetD (VarP $u/6) (PrimE TupPrim))
                                        (PrimE
                                          (CallPrim)
                                          (VarE $k/0)
                                          (PrimE
                                            RetPrim
                                            (PrimE
                                              (CallPrim)
                                              (VarE $k/0)
                                              (VarE $canister_id/2)
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                            (BlockE
                              (LetD
                                (VarP $v/7)
                                (PrimE (ActorDotPrim install_code) (VarE @ic00))
                              )
                              (BlockE
                                (LetD
                                  (VarP $u/7)
                                  (PrimE
                                    (CallPrim $@anon-async*-427.24__2)
                                    (VarE $v/7)
                                    (BlockE
                                      (LetD (VarP $$mode/0/0) (VarE $mode/2))
                                      (LetD
                                        (VarP $$canister_id/0/0)
                                        (VarE $canister_id/2)
                                      )
                                      (LetD
                                        (VarP $$wasm_module/0/0)
                                        (VarE wasm_module)
                                      )
                                      (LetD (VarP $$arg/0/0) (VarE arg))
                                      (LetD
                                        (VarP $$sender_canister_version/1/0)
                                        (PrimE OptPrim (PrimE canister_version))
                                      )
                                      (NewObjE
                                        Object
                                        (sender_canister_version
                                          $$sender_canister_version/1/0
                                        )
                                        (arg $$arg/0/0)
                                        (wasm_module $$wasm_module/0/0)
                                        (canister_id $$canister_id/0/0)
                                        (mode $$mode/0/0)
                                        {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                                      )
                                    )
                                  )
                                )
                                (IfE
                                  (PrimE
                                    (CallPrim)
                                    (VarE @call_succeeded)
                                    (PrimE TupPrim)
                                  )
                                  (PrimE
                                    (CPSAwait () -> ())
                                    (VarE $u/7)
                                    (PrimE
                                      TupPrim
                                      (VarE $k/1)
                                      (VarE $r/1)
                                      (VarE $b/0)
                                    )
                                  )
                                  (PrimE
                                    (CallPrim)
                                    (VarE $r/1)
                                    (PrimE
                                      (CallPrim)
                                      (VarE @call_error)
                                      (PrimE TupPrim)
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                (SwitchE
                  (VarE install_arg)
                  (case
                    (TagP new (VarP $settings/2))
                    (DeclareE
                      $available/0
                      (DeclareE
                        $accepted/0
                        (DeclareE
                          $sender_canister_version/4
                          (DeclareE
                            $canister_id/3
                            (BlockE
                              (LetD
                                (VarP $v/8)
                                (PrimE SystemCyclesAvailablePrim)
                              )
                              (LetD
                                WildP
                                (DefineE $available/0 Const (VarE $v/8))
                              )
                              (BlockE
                                (LetD (VarP $u/8) (PrimE TupPrim))
                                (BlockE
                                  (LetD
                                    (VarP $v/9)
                                    (PrimE
                                      SystemCyclesAcceptPrim
                                      (VarE $available/0)
                                    )
                                  )
                                  (LetD
                                    WildP
                                    (DefineE $accepted/0 Const (VarE $v/9))
                                  )
                                  (BlockE
                                    (LetD (VarP $u/9) (PrimE TupPrim))
                                    (BlockE
                                      (LetD
                                        (VarP $v/10)
                                        (PrimE OptPrim (PrimE canister_version))
                                      )
                                      (LetD
                                        WildP
                                        (DefineE
                                          $sender_canister_version/4
                                          Const
                                          (VarE $v/10)
                                        )
                                      )
                                      (BlockE
                                        (LetD (VarP $u/10) (PrimE TupPrim))
                                        (BlockE
                                          (LetD
                                            WildP
                                            (AssignE
                                              (VarLE @cycles)
                                              (PrimE
                                                (BinPrim Nat AddOp)
                                                (VarE @cycles)
                                                (VarE $accepted/0)
                                              )
                                            )
                                          )
                                          (BlockE
                                            (LetD (VarP $u/11) (PrimE TupPrim))
                                            (BlockE
                                              (LetD
                                                (VarP $k/3)
                                                (FuncE
                                                  $k/3
                                                  Local
                                                  Returns
                                                  (params $v/12)
                                                  ()
                                                  (BlockE
                                                    (LetD
                                                      (ObjP
                                                        (canister_id
                                                          (VarP $v/11)
                                                        )
                                                      )
                                                      (VarE $v/12)
                                                    )
                                                    (LetD
                                                      WildP
                                                      (DefineE
                                                        $canister_id/3
                                                        Const
                                                        (VarE $v/11)
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $u/12)
                                                        (PrimE TupPrim)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $u/13)
                                                          (PrimE TupPrim)
                                                        )
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $k/2)
                                                          (PrimE
                                                            TupPrim
                                                            (PrimE
                                                              (TagE install)
                                                              (PrimE TupPrim)
                                                            )
                                                            (VarE
                                                              $canister_id/3
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $v/13)
                                                  (PrimE
                                                    (ActorDotPrim
                                                      create_canister
                                                    )
                                                    (VarE @ic00)
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $u/14)
                                                    (PrimE
                                                      (CallPrim
                                                        $@anon-async*-427.24__2
                                                      )
                                                      (VarE $v/13)
                                                      (BlockE
                                                        (LetD
                                                          (VarP $$base/0/0)
                                                          (VarE $settings/2)
                                                        )
                                                        (LetD
                                                          (VarP
                                                            $$sender_canister_version/0/0
                                                          )
                                                          (VarE
                                                            $sender_canister_version/4
                                                          )
                                                        )
                                                        (LetD
                                                          (VarP $$settings/0/0)
                                                          (PrimE
                                                            (DotPrim settings)
                                                            (VarE $$base/0/0)
                                                          )
                                                        )
                                                        (NewObjE
                                                          Object
                                                          (settings
                                                            $$settings/0/0
                                                          )
                                                          (sender_canister_version
                                                            $$sender_canister_version/0/0
                                                          )
                                                          {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                                                        )
                                                      )
                                                    )
                                                  )
                                                  (IfE
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE @call_succeeded)
                                                      (PrimE TupPrim)
                                                    )
                                                    (PrimE
                                                      (CPSAwait
                                                        {canister_id : Principal} -> ()
                                                      )
                                                      (VarE $u/14)
                                                      (PrimE
                                                        TupPrim
                                                        (VarE $k/3)
                                                        (VarE $r/1)
                                                        (VarE $b/0)
                                                      )
                                                    )
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $r/1)
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE @call_error)
                                                        (PrimE TupPrim)
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (case
                    (TagP install (VarP $principal1/0))
                    (PrimE
                      (CallPrim)
                      (VarE $k/2)
                      (PrimE
                        TupPrim
                        (PrimE (TagE install) (PrimE TupPrim))
                        (VarE $principal1/0)
                      )
                    )
                  )
                  (case
                    (TagP reinstall (VarP $actor1/0))
                    (PrimE
                      (CallPrim)
                      (VarE $k/2)
                      (PrimE
                        TupPrim
                        (PrimE (TagE reinstall) (PrimE TupPrim))
                        (PrimE (CastPrim actor {} Principal) (VarE $actor1/0))
                      )
                    )
                  )
                  (case
                    (TagP upgrade (VarP $actor2/0))
                    (PrimE
                      (CallPrim)
                      (VarE $k/2)
                      (PrimE
                        TupPrim
                        (PrimE (TagE upgrade) (PrimE TupPrim))
                        (PrimE (CastPrim actor {} Principal) (VarE $actor2/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @create_actor_helper)
    (FuncE
      @create_actor_helper
      Local
      Returns
      ($__261 Any)
      (params wasm_module arg)
      async<$__261> Principal
      (PrimE
        (CPSAsync $__261)
        (FuncE
          $lambda
          Local
          Returns
          ($@anon-async-463.79__2 Any)
          (params $k/4 $r/2 $b/1)
          ()
          (DeclareE
            $available/1
            (DeclareE
              $accepted/1
              (DeclareE
                $sender_canister_version/5
                (DeclareE
                  $canister_id/4
                  (BlockE
                    (LetD (VarP $v/14) (PrimE SystemCyclesAvailablePrim))
                    (LetD WildP (DefineE $available/1 Const (VarE $v/14)))
                    (BlockE
                      (LetD (VarP $u/15) (PrimE TupPrim))
                      (BlockE
                        (LetD
                          (VarP $v/15)
                          (PrimE SystemCyclesAcceptPrim (VarE $available/1))
                        )
                        (LetD WildP (DefineE $accepted/1 Const (VarE $v/15)))
                        (BlockE
                          (LetD (VarP $u/16) (PrimE TupPrim))
                          (BlockE
                            (LetD
                              (VarP $v/16)
                              (PrimE OptPrim (PrimE canister_version))
                            )
                            (LetD
                              WildP
                              (DefineE
                                $sender_canister_version/5
                                Const
                                (VarE $v/16)
                              )
                            )
                            (BlockE
                              (LetD (VarP $u/17) (PrimE TupPrim))
                              (BlockE
                                (LetD
                                  WildP
                                  (AssignE
                                    (VarLE @cycles)
                                    (PrimE
                                      (BinPrim Nat AddOp)
                                      (VarE @cycles)
                                      (VarE $accepted/1)
                                    )
                                  )
                                )
                                (BlockE
                                  (LetD (VarP $u/18) (PrimE TupPrim))
                                  (BlockE
                                    (LetD
                                      (VarP $k/6)
                                      (FuncE
                                        $k/6
                                        Local
                                        Returns
                                        (params $v/18)
                                        ()
                                        (BlockE
                                          (LetD
                                            (ObjP (canister_id (VarP $v/17)))
                                            (VarE $v/18)
                                          )
                                          (LetD
                                            WildP
                                            (DefineE
                                              $canister_id/4
                                              Const
                                              (VarE $v/17)
                                            )
                                          )
                                          (BlockE
                                            (LetD (VarP $u/19) (PrimE TupPrim))
                                            (BlockE
                                              (LetD
                                                (VarP $k/5)
                                                (FuncE
                                                  $k/5
                                                  Local
                                                  Returns
                                                  ()
                                                  (BlockE
                                                    (LetD
                                                      (VarP $v/19)
                                                      (PrimE TupPrim)
                                                    )
                                                    (BlockE
                                                      (LetD WildP (VarE $v/19))
                                                      (BlockE
                                                        (LetD
                                                          (VarP $u/20)
                                                          (PrimE TupPrim)
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/21)
                                                            (PrimE TupPrim)
                                                          )
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $k/4)
                                                            (PrimE
                                                              RetPrim
                                                              (PrimE
                                                                (CallPrim)
                                                                (VarE $k/4)
                                                                (VarE
                                                                  $canister_id/4
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $v/20)
                                                  (PrimE
                                                    (ActorDotPrim install_code)
                                                    (VarE @ic00)
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $u/22)
                                                    (PrimE
                                                      (CallPrim
                                                        $@anon-async-463.79__2
                                                      )
                                                      (VarE $v/20)
                                                      (BlockE
                                                        (LetD
                                                          (VarP $$mode/1/0)
                                                          (PrimE
                                                            (TagE install)
                                                            (PrimE TupPrim)
                                                          )
                                                        )
                                                        (LetD
                                                          (VarP
                                                            $$canister_id/1/0
                                                          )
                                                          (VarE $canister_id/4)
                                                        )
                                                        (LetD
                                                          (VarP
                                                            $$wasm_module/1/0
                                                          )
                                                          (VarE wasm_module)
                                                        )
                                                        (LetD
                                                          (VarP $$arg/1/0)
                                                          (VarE arg)
                                                        )
                                                        (LetD
                                                          (VarP
                                                            $$sender_canister_version/3/0
                                                          )
                                                          (PrimE
                                                            OptPrim
                                                            (PrimE
                                                              canister_version
                                                            )
                                                          )
                                                        )
                                                        (NewObjE
                                                          Object
                                                          (sender_canister_version
                                                            $$sender_canister_version/3/0
                                                          )
                                                          (arg $$arg/1/0)
                                                          (wasm_module
                                                            $$wasm_module/1/0
                                                          )
                                                          (canister_id
                                                            $$canister_id/1/0
                                                          )
                                                          (mode $$mode/1/0)
                                                          {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__1}
                                                        )
                                                      )
                                                    )
                                                  )
                                                  (IfE
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE @call_succeeded)
                                                      (PrimE TupPrim)
                                                    )
                                                    (PrimE
                                                      (CPSAwait () -> ())
                                                      (VarE $u/22)
                                                      (PrimE
                                                        TupPrim
                                                        (VarE $k/5)
                                                        (VarE $r/2)
                                                        (VarE $b/1)
                                                      )
                                                    )
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $r/2)
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE @call_error)
                                                        (PrimE TupPrim)
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (BlockE
                                      (LetD
                                        (VarP $v/21)
                                        (PrimE
                                          (ActorDotPrim create_canister)
                                          (VarE @ic00)
                                        )
                                      )
                                      (BlockE
                                        (LetD
                                          (VarP $u/23)
                                          (PrimE
                                            (CallPrim $@anon-async-463.79__2)
                                            (VarE $v/21)
                                            (BlockE
                                              (LetD
                                                (VarP $$settings/1/0)
                                                (LitE NullLit)
                                              )
                                              (LetD
                                                (VarP
                                                  $$sender_canister_version/2/0
                                                )
                                                (VarE
                                                  $sender_canister_version/5
                                                )
                                              )
                                              (NewObjE
                                                Object
                                                (sender_canister_version
                                                  $$sender_canister_version/2/0
                                                )
                                                (settings $$settings/1/0)
                                                {sender_canister_version : ?Nat64; settings : ?canister_settings__1}
                                              )
                                            )
                                          )
                                        )
                                        (IfE
                                          (PrimE
                                            (CallPrim)
                                            (VarE @call_succeeded)
                                            (PrimE TupPrim)
                                          )
                                          (PrimE
                                            (CPSAwait
                                              {canister_id : Principal} -> ()
                                            )
                                            (VarE $u/23)
                                            (PrimE
                                              TupPrim
                                              (VarE $k/6)
                                              (VarE $r/2)
                                              (VarE $b/1)
                                            )
                                          )
                                          (PrimE
                                            (CallPrim)
                                            (VarE $r/2)
                                            (PrimE
                                              (CallPrim)
                                              (VarE @call_error)
                                              (PrimE TupPrim)
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @call_raw)
    (FuncE
      @call_raw
      Local
      Returns
      ($__262 Any)
      (params p m a)
      async<$__262> Blob
      (PrimE
        (CPSAsync $__262)
        (FuncE
          $lambda
          Local
          Returns
          ($@call_raw__2 Any)
          (params $k/7 $r/3 $b/2)
          ()
          (BlockE
            (LetD (VarP $v/22) (VarE p))
            (BlockE
              (LetD (VarP $v/23) (VarE m))
              (BlockE
                (LetD
                  (VarP $u/24)
                  (PrimE call_raw (VarE $v/22) (VarE $v/23) (VarE a))
                )
                (IfE
                  (PrimE (CallPrim) (VarE @call_succeeded) (PrimE TupPrim))
                  (PrimE
                    (CPSAwait Blob -> ())
                    (VarE $u/24)
                    (PrimE TupPrim (VarE $k/7) (VarE $r/3) (VarE $b/2))
                  )
                  (PrimE
                    (CallPrim)
                    (VarE $r/3)
                    (PrimE (CallPrim) (VarE @call_error) (PrimE TupPrim))
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @call_succeeded)
    (FuncE
      @call_succeeded
      Local
      Returns
      Bool
      (PrimE
        (RelPrim Nat32 EqOp)
        (PrimE call_perform_status)
        (LitE (Nat32Lit 0))
      )
    )
  )
  (LetD
    (VarP @call_error)
    (FuncE
      @call_error
      Local
      Returns
      Error
      (BlockE
        (LetD (VarP status) (PrimE call_perform_status))
        (LetD (VarP message) (PrimE call_perform_message))
        (LetD
          (VarP code)
          (PrimE
            (TagE call_error)
            (BlockE
              (LetD (VarP $err_code/0) (VarE status))
              (NewObjE Object (err_code $err_code/0) {err_code : Nat32})
            )
          )
        )
        (PrimE
          (CastPrim ({#call_error : {err_code : Nat32}}, Text) Error)
          (PrimE TupPrim (VarE code) (VarE message))
        )
      )
    )
  )
  (VarD @timers ?@Node__1 (LitE NullLit))
  (LetD
    (VarP @prune)
    (FuncE
      @prune
      Local
      Returns
      (params n)
      ?@Node__1
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE NullLit))
        (case
          (OptP (VarP n))
          (IfE
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE
                IdxPrim
                (PrimE (DotPrim expire) (VarE n))
                (LitE (NatLit 0))
              )
              (LitE (Nat64Lit 0))
            )
            (PrimE (CallPrim) (VarE @prune) (PrimE (DotPrim post) (VarE n)))
            (PrimE
              OptPrim
              (BlockE
                (LetD (VarP $base/1) (VarE n))
                (LetD
                  (VarP $pre/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim pre) (VarE n))
                  )
                )
                (LetD
                  (VarP $post/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim post) (VarE n))
                  )
                )
                (LetD (VarP $delay/0) (PrimE (DotPrim delay) (VarE $base/1)))
                (LetD (VarP $expire/0) (PrimE (DotPrim expire) (VarE $base/1)))
                (LetD (VarP $id/0) (PrimE (DotPrim id) (VarE $base/1)))
                (LetD (VarP $job/0) (PrimE (DotPrim job) (VarE $base/1)))
                (NewObjE
                  Object
                  (job $job/0)
                  (id $id/0)
                  (expire $expire/0)
                  (delay $delay/0)
                  (post $post/0)
                  (pre $pre/0)
                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @nextExpiration)
    (FuncE
      @nextExpiration
      Local
      Returns
      (params n)
      Nat64
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE (Nat64Lit 0)))
        (case
          (OptP (VarP n))
          (BlockE
            (VarD
              exp
              Nat64
              (PrimE
                (CallPrim)
                (VarE @nextExpiration)
                (PrimE (DotPrim pre) (VarE n))
              )
            )
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                  )
                  (IfE
                    (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        (CallPrim)
                        (VarE @nextExpiration)
                        (PrimE (DotPrim post) (VarE n))
                      )
                    )
                    (PrimE TupPrim)
                  )
                )
                (PrimE TupPrim)
              )
            )
            (VarE exp)
          )
        )
      )
    )
  )
  (LetD
    (VarP @timer_helper)
    (FuncE
      @timer_helper
      Local
      Returns
      ($__263 Any)
      async<$__263> ()
      (PrimE
        (CPSAsync $__263)
        (FuncE
          $lambda
          Local
          Returns
          ($@timer_helper__2 Any)
          (params $k/8 $r/4 $b/3)
          ()
          (DeclareE
            $Array_init/0
            (DeclareE
              $now/0
              (DeclareE
                $gathered/0
                (DeclareE
                  $thunks/0
                  (DeclareE
                    $gatherExpired/0
                    (DeclareE
                      $exp/0
                      (BlockE
                        (LetD
                          (VarP $v/24)
                          (FuncE
                            Array_init
                            Local
                            Returns
                            (T__105 Any)
                            (params $len/0 $x/0)
                            [var T__105]
                            (PrimE Array.init (VarE $len/0) (VarE $x/0))
                          )
                        )
                        (LetD WildP (DefineE $Array_init/0 Const (VarE $v/24)))
                        (BlockE
                          (LetD (VarP $u/25) (PrimE TupPrim))
                          (BlockE
                            (LetD (VarP $v/25) (PrimE SystemTimePrim))
                            (LetD WildP (DefineE $now/0 Const (VarE $v/25)))
                            (BlockE
                              (LetD (VarP $u/26) (PrimE TupPrim))
                              (BlockE
                                (LetD
                                  (VarP $u/27)
                                  (DefineE $gathered/0 Var (LitE (NatLit 0)))
                                )
                                (BlockE
                                  (LetD
                                    (VarP $v/26)
                                    (PrimE
                                      (CallPrim ?(() -> async ()))
                                      (VarE $Array_init/0)
                                      (PrimE
                                        TupPrim
                                        (LitE (NatLit 10))
                                        (LitE NullLit)
                                      )
                                    )
                                  )
                                  (LetD
                                    WildP
                                    (DefineE $thunks/0 Const (VarE $v/26))
                                  )
                                  (BlockE
                                    (LetD (VarP $u/28) (PrimE TupPrim))
                                    (BlockE
                                      (LetD
                                        (VarP $v/27)
                                        (FuncE
                                          gatherExpired
                                          Local
                                          Returns
                                          (params $n/0)
                                          ()
                                          (SwitchE
                                            (VarE $n/0)
                                            (case
                                              (LitP NullLit)
                                              (PrimE TupPrim)
                                            )
                                            (case
                                              (OptP (VarP $n/1))
                                              (BlockE
                                                (LetD
                                                  WildP
                                                  (PrimE
                                                    (CallPrim)
                                                    (VarE $gatherExpired/0)
                                                    (PrimE
                                                      (DotPrim pre)
                                                      (VarE $n/1)
                                                    )
                                                  )
                                                )
                                                (LetD
                                                  WildP
                                                  (IfE
                                                    (IfE
                                                      (IfE
                                                        (PrimE
                                                          (RelPrim Nat64 GtOp)
                                                          (PrimE
                                                            IdxPrim
                                                            (PrimE
                                                              (DotPrim expire)
                                                              (VarE $n/1)
                                                            )
                                                            (LitE (NatLit 0))
                                                          )
                                                          (LitE (Nat64Lit 0))
                                                        )
                                                        (PrimE
                                                          (RelPrim Nat64 LeOp)
                                                          (PrimE
                                                            IdxPrim
                                                            (PrimE
                                                              (DotPrim expire)
                                                              (VarE $n/1)
                                                            )
                                                            (LitE (NatLit 0))
                                                          )
                                                          (VarE $now/0)
                                                        )
                                                        (LitE (BoolLit false))
                                                      )
                                                      (PrimE
                                                        (RelPrim Nat LtOp)
                                                        (VarE $gathered/0)
                                                        (PrimE
                                                          array_len
                                                          (VarE $thunks/0)
                                                        )
                                                      )
                                                      (LitE (BoolLit false))
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (AssignE
                                                          (IdxLE
                                                            (VarE $thunks/0)
                                                            (VarE $gathered/0)
                                                          )
                                                          (PrimE
                                                            OptPrim
                                                            (PrimE
                                                              (DotPrim job)
                                                              (VarE $n/1)
                                                            )
                                                          )
                                                        )
                                                      )
                                                      (LetD
                                                        WildP
                                                        (SwitchE
                                                          (PrimE
                                                            (DotPrim delay)
                                                            (VarE $n/1)
                                                          )
                                                          (case
                                                            (AltP
                                                              (LitP NullLit)
                                                              (OptP
                                                                (LitP
                                                                  (Nat64Lit 0)
                                                                )
                                                              )
                                                            )
                                                            (PrimE TupPrim)
                                                          )
                                                          (case
                                                            (OptP
                                                              (VarP $delay/9)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $expire/9)
                                                                (PrimE
                                                                  (BinPrim
                                                                    Nat64
                                                                    AddOp
                                                                  )
                                                                  (PrimE
                                                                    IdxPrim
                                                                    (PrimE
                                                                      (DotPrim
                                                                        expire
                                                                      )
                                                                      (VarE
                                                                        $n/1
                                                                      )
                                                                    )
                                                                    (LitE
                                                                      (NatLit 0)
                                                                    )
                                                                  )
                                                                  (PrimE
                                                                    (BinPrim
                                                                      Nat64
                                                                      MulOp
                                                                    )
                                                                    (VarE
                                                                      $delay/9
                                                                    )
                                                                    (PrimE
                                                                      (BinPrim
                                                                        Nat64
                                                                        AddOp
                                                                      )
                                                                      (LitE
                                                                        (Nat64Lit
                                                                          1
                                                                        )
                                                                      )
                                                                      (PrimE
                                                                        (BinPrim
                                                                          Nat64
                                                                          DivOp
                                                                        )
                                                                        (PrimE
                                                                          (BinPrim
                                                                            Nat64
                                                                            SubOp
                                                                          )
                                                                          (VarE
                                                                            $now/0
                                                                          )
                                                                          (PrimE
                                                                            IdxPrim
                                                                            (PrimE
                                                                              (DotPrim
                                                                                expire
                                                                              )
                                                                              (VarE
                                                                                $n/1
                                                                              )
                                                                            )
                                                                            (LitE
                                                                              (NatLit
                                                                                0
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                        (VarE
                                                                          $delay/9
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                              (LetD
                                                                WildP
                                                                (AssignE
                                                                  (IdxLE
                                                                    (PrimE
                                                                      (DotPrim
                                                                        expire
                                                                      )
                                                                      (VarE
                                                                        $n/1
                                                                      )
                                                                    )
                                                                    (LitE
                                                                      (NatLit 0)
                                                                    )
                                                                  )
                                                                  (LitE
                                                                    (Nat64Lit 0)
                                                                  )
                                                                )
                                                              )
                                                              (LetD
                                                                (VarP
                                                                  $reinsert/0
                                                                )
                                                                (FuncE
                                                                  reinsert
                                                                  Local
                                                                  Returns
                                                                  (params $m/0)
                                                                  @Node__1
                                                                  (SwitchE
                                                                    (VarE $m/0)
                                                                    (case
                                                                      (LitP
                                                                        NullLit
                                                                      )
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $$base/2/0
                                                                          )
                                                                          (VarE
                                                                            $n/1
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          (VarP
                                                                            $$expire/1/0
                                                                          )
                                                                          (PrimE
                                                                            (ArrayPrim
                                                                              Var
                                                                              Nat64
                                                                            )
                                                                            (VarE
                                                                              $expire/9
                                                                            )
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          (VarP
                                                                            $$pre/1/0
                                                                          )
                                                                          (LitE
                                                                            NullLit
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          (VarP
                                                                            $$post/1/0
                                                                          )
                                                                          (LitE
                                                                            NullLit
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          (VarP
                                                                            $$delay/1/0
                                                                          )
                                                                          (PrimE
                                                                            (DotPrim
                                                                              delay
                                                                            )
                                                                            (VarE
                                                                              $$base/2/0
                                                                            )
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          (VarP
                                                                            $$id/1/0
                                                                          )
                                                                          (PrimE
                                                                            (DotPrim
                                                                              id
                                                                            )
                                                                            (VarE
                                                                              $$base/2/0
                                                                            )
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          (VarP
                                                                            $$job/1/0
                                                                          )
                                                                          (PrimE
                                                                            (DotPrim
                                                                              job
                                                                            )
                                                                            (VarE
                                                                              $$base/2/0
                                                                            )
                                                                          )
                                                                        )
                                                                        (NewObjE
                                                                          Object
                                                                          (job
                                                                            $$job/1/0
                                                                          )
                                                                          (id
                                                                            $$id/1/0
                                                                          )
                                                                          (delay
                                                                            $$delay/1/0
                                                                          )
                                                                          (post
                                                                            $$post/1/0
                                                                          )
                                                                          (pre
                                                                            $$pre/1/0
                                                                          )
                                                                          (expire
                                                                            $$expire/1/0
                                                                          )
                                                                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : Null; pre : Null}
                                                                        )
                                                                      )
                                                                    )
                                                                    (case
                                                                      (OptP
                                                                        (VarP
                                                                          $m/1
                                                                        )
                                                                      )
                                                                      (BlockE
                                                                        (LetD
                                                                          WildP
                                                                          (PrimE
                                                                            AssertPrim
                                                                            (PrimE
                                                                              (RelPrim
                                                                                Bool
                                                                                EqOp
                                                                              )
                                                                              (PrimE
                                                                                (RelPrim
                                                                                  Nat64
                                                                                  EqOp
                                                                                )
                                                                                (PrimE
                                                                                  IdxPrim
                                                                                  (PrimE
                                                                                    (DotPrim
                                                                                      expire
                                                                                    )
                                                                                    (VarE
                                                                                      $m/1
                                                                                    )
                                                                                  )
                                                                                  (LitE
                                                                                    (NatLit
                                                                                      0
                                                                                    )
                                                                                  )
                                                                                )
                                                                                (LitE
                                                                                  (Nat64Lit
                                                                                    0
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LitE
                                                                                (BoolLit
                                                                                  false
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                        (IfE
                                                                          (PrimE
                                                                            (RelPrim
                                                                              Nat64
                                                                              LtOp
                                                                            )
                                                                            (VarE
                                                                              $expire/9
                                                                            )
                                                                            (PrimE
                                                                              IdxPrim
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  expire
                                                                                )
                                                                                (VarE
                                                                                  $m/1
                                                                                )
                                                                              )
                                                                              (LitE
                                                                                (NatLit
                                                                                  0
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                          (BlockE
                                                                            (LetD
                                                                              (VarP
                                                                                $$base/4/0
                                                                              )
                                                                              (VarE
                                                                                $m/1
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$pre/3/0
                                                                              )
                                                                              (PrimE
                                                                                OptPrim
                                                                                (PrimE
                                                                                  (CallPrim
                                                                                  )
                                                                                  (VarE
                                                                                    $reinsert/0
                                                                                  )
                                                                                  (PrimE
                                                                                    (DotPrim
                                                                                      pre
                                                                                    )
                                                                                    (VarE
                                                                                      $m/1
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$delay/3/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  delay
                                                                                )
                                                                                (VarE
                                                                                  $$base/4/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$expire/3/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  expire
                                                                                )
                                                                                (VarE
                                                                                  $$base/4/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$id/3/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  id
                                                                                )
                                                                                (VarE
                                                                                  $$base/4/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$job/3/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  job
                                                                                )
                                                                                (VarE
                                                                                  $$base/4/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$post/3/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  post
                                                                                )
                                                                                (VarE
                                                                                  $$base/4/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (NewObjE
                                                                              Object
                                                                              (post
                                                                                $$post/3/0
                                                                              )
                                                                              (job
                                                                                $$job/3/0
                                                                              )
                                                                              (id
                                                                                $$id/3/0
                                                                              )
                                                                              (expire
                                                                                $$expire/3/0
                                                                              )
                                                                              (delay
                                                                                $$delay/3/0
                                                                              )
                                                                              (pre
                                                                                $$pre/3/0
                                                                              )
                                                                              {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                                            )
                                                                          )
                                                                          (BlockE
                                                                            (LetD
                                                                              (VarP
                                                                                $$base/3/0
                                                                              )
                                                                              (VarE
                                                                                $m/1
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$post/2/0
                                                                              )
                                                                              (PrimE
                                                                                OptPrim
                                                                                (PrimE
                                                                                  (CallPrim
                                                                                  )
                                                                                  (VarE
                                                                                    $reinsert/0
                                                                                  )
                                                                                  (PrimE
                                                                                    (DotPrim
                                                                                      post
                                                                                    )
                                                                                    (VarE
                                                                                      $m/1
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$delay/2/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  delay
                                                                                )
                                                                                (VarE
                                                                                  $$base/3/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$expire/2/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  expire
                                                                                )
                                                                                (VarE
                                                                                  $$base/3/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$id/2/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  id
                                                                                )
                                                                                (VarE
                                                                                  $$base/3/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$job/2/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  job
                                                                                )
                                                                                (VarE
                                                                                  $$base/3/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              (VarP
                                                                                $$pre/2/0
                                                                              )
                                                                              (PrimE
                                                                                (DotPrim
                                                                                  pre
                                                                                )
                                                                                (VarE
                                                                                  $$base/3/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (NewObjE
                                                                              Object
                                                                              (pre
                                                                                $$pre/2/0
                                                                              )
                                                                              (job
                                                                                $$job/2/0
                                                                              )
                                                                              (id
                                                                                $$id/2/0
                                                                              )
                                                                              (expire
                                                                                $$expire/2/0
                                                                              )
                                                                              (delay
                                                                                $$delay/2/0
                                                                              )
                                                                              (post
                                                                                $$post/2/0
                                                                              )
                                                                              {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                              (AssignE
                                                                (VarLE @timers)
                                                                (PrimE
                                                                  OptPrim
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      $reinsert/0
                                                                    )
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        @prune
                                                                      )
                                                                      (VarE
                                                                        @timers
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                      (LetD
                                                        WildP
                                                        (AssignE
                                                          (IdxLE
                                                            (PrimE
                                                              (DotPrim expire)
                                                              (VarE $n/1)
                                                            )
                                                            (LitE (NatLit 0))
                                                          )
                                                          (LitE (Nat64Lit 0))
                                                        )
                                                      )
                                                      (AssignE
                                                        (VarLE $gathered/0)
                                                        (PrimE
                                                          (BinPrim Nat AddOp)
                                                          (VarE $gathered/0)
                                                          (LitE (NatLit 1))
                                                        )
                                                      )
                                                    )
                                                    (PrimE TupPrim)
                                                  )
                                                )
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE $gatherExpired/0)
                                                  (PrimE
                                                    (DotPrim post)
                                                    (VarE $n/1)
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                      (LetD
                                        WildP
                                        (DefineE
                                          $gatherExpired/0
                                          Const
                                          (VarE $v/27)
                                        )
                                      )
                                      (BlockE
                                        (LetD (VarP $u/29) (PrimE TupPrim))
                                        (BlockE
                                          (LetD
                                            WildP
                                            (PrimE
                                              (CallPrim)
                                              (VarE $gatherExpired/0)
                                              (VarE @timers)
                                            )
                                          )
                                          (BlockE
                                            (LetD (VarP $u/30) (PrimE TupPrim))
                                            (BlockE
                                              (LetD
                                                (VarP $v/28)
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE @nextExpiration)
                                                  (VarE @timers)
                                                )
                                              )
                                              (LetD
                                                WildP
                                                (DefineE
                                                  $exp/0
                                                  Const
                                                  (VarE $v/28)
                                                )
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $u/31)
                                                  (PrimE TupPrim)
                                                )
                                                (BlockE
                                                  (LetD
                                                    WildP
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (PrimE
                                                          global_timer_set
                                                          (VarE $exp/0)
                                                        )
                                                      )
                                                      (PrimE TupPrim)
                                                    )
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $u/32)
                                                      (PrimE TupPrim)
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (IfE
                                                          (PrimE
                                                            (RelPrim Nat64 EqOp)
                                                            (VarE $exp/0)
                                                            (LitE (Nat64Lit 0))
                                                          )
                                                          (AssignE
                                                            (VarLE @timers)
                                                            (LitE NullLit)
                                                          )
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $u/33)
                                                          (PrimE TupPrim)
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/34)
                                                            (PrimE TupPrim)
                                                          )
                                                          (DeclareE
                                                            $$arr/2/0
                                                            (DeclareE
                                                              $$last/2/0
                                                              (DeclareE
                                                                $$indx/2/0
                                                                (BlockE
                                                                  (LetD
                                                                    (VarP $v/29)
                                                                    (VarE
                                                                      $thunks/0
                                                                    )
                                                                  )
                                                                  (LetD
                                                                    WildP
                                                                    (DefineE
                                                                      $$arr/2/0
                                                                      Const
                                                                      (VarE
                                                                        $v/29
                                                                      )
                                                                    )
                                                                  )
                                                                  (BlockE
                                                                    (LetD
                                                                      (VarP
                                                                        $u/35
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                    (BlockE
                                                                      (LetD
                                                                        (VarP
                                                                          $v/30
                                                                        )
                                                                        (PrimE
                                                                          GetLastArrayOffset
                                                                          (VarE
                                                                            $$arr/2/0
                                                                          )
                                                                        )
                                                                      )
                                                                      (LetD
                                                                        WildP
                                                                        (DefineE
                                                                          $$last/2/0
                                                                          Const
                                                                          (VarE
                                                                            $v/30
                                                                          )
                                                                        )
                                                                      )
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $u/36
                                                                          )
                                                                          (PrimE
                                                                            TupPrim
                                                                          )
                                                                        )
                                                                        (BlockE
                                                                          (LetD
                                                                            (VarP
                                                                              $u/37
                                                                            )
                                                                            (DefineE
                                                                              $$indx/2/0
                                                                              Var
                                                                              (LitE
                                                                                (NatLit
                                                                                  0
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                          (BlockE
                                                                            (LetD
                                                                              (VarP
                                                                                $u/38
                                                                              )
                                                                              (PrimE
                                                                                TupPrim
                                                                              )
                                                                            )
                                                                            (IfE
                                                                              (PrimE
                                                                                EqArrayOffset
                                                                                (VarE
                                                                                  $$last/2/0
                                                                                )
                                                                                (LitE
                                                                                  (IntLit
                                                                                    -1
                                                                                  )
                                                                                )
                                                                              )
                                                                              (PrimE
                                                                                (CallPrim
                                                                                )
                                                                                (VarE
                                                                                  $k/8
                                                                                )
                                                                                (PrimE
                                                                                  TupPrim
                                                                                )
                                                                              )
                                                                              (BlockE
                                                                                (LetD
                                                                                  (VarP
                                                                                    $loop/0
                                                                                  )
                                                                                  (FuncE
                                                                                    $loop/0
                                                                                    Local
                                                                                    Returns
                                                                                    ()
                                                                                    (BlockE
                                                                                      (LetD
                                                                                        (VarP
                                                                                          $v/31
                                                                                        )
                                                                                        (PrimE
                                                                                          TupPrim
                                                                                        )
                                                                                      )
                                                                                      (DeclareE
                                                                                        $o/0
                                                                                        (BlockE
                                                                                          (LetD
                                                                                            (VarP
                                                                                              $v/32
                                                                                            )
                                                                                            (PrimE
                                                                                              DerefArrayOffset
                                                                                              (VarE
                                                                                                $$arr/2/0
                                                                                              )
                                                                                              (VarE
                                                                                                $$indx/2/0
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                          (LetD
                                                                                            WildP
                                                                                            (DefineE
                                                                                              $o/0
                                                                                              Const
                                                                                              (VarE
                                                                                                $v/32
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                          (BlockE
                                                                                            (LetD
                                                                                              (VarP
                                                                                                $u/39
                                                                                              )
                                                                                              (PrimE
                                                                                                TupPrim
                                                                                              )
                                                                                            )
                                                                                            (BlockE
                                                                                              (LetD
                                                                                                (VarP
                                                                                                  $k/9
                                                                                                )
                                                                                                (FuncE
                                                                                                  $k/9
                                                                                                  Local
                                                                                                  Returns
                                                                                                  ()
                                                                                                  (BlockE
                                                                                                    (LetD
                                                                                                      (VarP
                                                                                                        $v/33
                                                                                                      )
                                                                                                      (PrimE
                                                                                                        TupPrim
                                                                                                      )
                                                                                                    )
                                                                                                    (BlockE
                                                                                                      (LetD
                                                                                                        WildP
                                                                                                        (VarE
                                                                                                          $v/33
                                                                                                        )
                                                                                                      )
                                                                                                      (BlockE
                                                                                                        (LetD
                                                                                                          (VarP
                                                                                                            $u/40
                                                                                                          )
                                                                                                          (PrimE
                                                                                                            TupPrim
                                                                                                          )
                                                                                                        )
                                                                                                        (BlockE
                                                                                                          (LetD
                                                                                                            (VarP
                                                                                                              $u/41
                                                                                                            )
                                                                                                            (PrimE
                                                                                                              TupPrim
                                                                                                            )
                                                                                                          )
                                                                                                          (PrimE
                                                                                                            (CallPrim
                                                                                                            )
                                                                                                            (VarE
                                                                                                              $loop/0
                                                                                                            )
                                                                                                            (IfE
                                                                                                              (PrimE
                                                                                                                EqArrayOffset
                                                                                                                (VarE
                                                                                                                  $$indx/2/0
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  $$last/2/0
                                                                                                                )
                                                                                                              )
                                                                                                              (PrimE
                                                                                                                RetPrim
                                                                                                                (PrimE
                                                                                                                  (CallPrim
                                                                                                                  )
                                                                                                                  (VarE
                                                                                                                    $k/8
                                                                                                                  )
                                                                                                                  (PrimE
                                                                                                                    TupPrim
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                              (AssignE
                                                                                                                (VarLE
                                                                                                                  $$indx/2/0
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  NextArrayOffset
                                                                                                                  (VarE
                                                                                                                    $$indx/2/0
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                              (SwitchE
                                                                                                (VarE
                                                                                                  $o/0
                                                                                                )
                                                                                                (case
                                                                                                  (OptP
                                                                                                    (VarP
                                                                                                      $thunk/3
                                                                                                    )
                                                                                                  )
                                                                                                  (BlockE
                                                                                                    (LetD
                                                                                                      (VarP
                                                                                                        $v/34
                                                                                                      )
                                                                                                      (VarE
                                                                                                        $thunk/3
                                                                                                      )
                                                                                                    )
                                                                                                    (BlockE
                                                                                                      (LetD
                                                                                                        (VarP
                                                                                                          $u/42
                                                                                                        )
                                                                                                        (PrimE
                                                                                                          (CallPrim
                                                                                                            $@timer_helper__2
                                                                                                          )
                                                                                                          (VarE
                                                                                                            $v/34
                                                                                                          )
                                                                                                          (PrimE
                                                                                                            TupPrim
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                      (IfE
                                                                                                        (PrimE
                                                                                                          (CallPrim
                                                                                                          )
                                                                                                          (VarE
                                                                                                            @call_succeeded
                                                                                                          )
                                                                                                          (PrimE
                                                                                                            TupPrim
                                                                                                          )
                                                                                                        )
                                                                                                        (BlockE
                                                                                                          (LetD
                                                                                                            WildP
                                                                                                            (VarE
                                                                                                              $u/42
                                                                                                            )
                                                                                                          )
                                                                                                          (BlockE
                                                                                                            (LetD
                                                                                                              (VarP
                                                                                                                $u/43
                                                                                                              )
                                                                                                              (PrimE
                                                                                                                TupPrim
                                                                                                              )
                                                                                                            )
                                                                                                            (BlockE
                                                                                                              (LetD
                                                                                                                (VarP
                                                                                                                  $u/44
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                              (PrimE
                                                                                                                (CallPrim
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  $k/9
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                        (PrimE
                                                                                                          (CallPrim
                                                                                                          )
                                                                                                          (VarE
                                                                                                            $r/4
                                                                                                          )
                                                                                                          (PrimE
                                                                                                            (CallPrim
                                                                                                            )
                                                                                                            (VarE
                                                                                                              @call_error
                                                                                                            )
                                                                                                            (PrimE
                                                                                                              TupPrim
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                                (case
                                                                                                  WildP
                                                                                                  (PrimE
                                                                                                    (CallPrim
                                                                                                    )
                                                                                                    (VarE
                                                                                                      $k/9
                                                                                                    )
                                                                                                    (PrimE
                                                                                                      TupPrim
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                (PrimE
                                                                                  (CallPrim
                                                                                  )
                                                                                  (VarE
                                                                                    $loop/0
                                                                                  )
                                                                                  (PrimE
                                                                                    TupPrim
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (VarD @lastTimerId Nat (LitE (NatLit 0)))
  (LetD
    (VarP @setTimer)
    (FuncE
      @setTimer
      Local
      Returns
      ($__264 Any)
      (params delayNanos recurring job)
      Nat
      (BlockE
        (LetD
          WildP
          (AssignE
            (VarLE @lastTimerId)
            (PrimE (BinPrim Nat AddOp) (VarE @lastTimerId) (LitE (NatLit 1)))
          )
        )
        (LetD (VarP id) (VarE @lastTimerId))
        (LetD (VarP now) (PrimE SystemTimePrim))
        (LetD
          (VarP expire)
          (PrimE (BinPrim Nat64 AddOp) (VarE now) (VarE delayNanos))
        )
        (LetD
          (VarP delay)
          (IfE
            (VarE recurring)
            (PrimE OptPrim (VarE delayNanos))
            (LitE NullLit)
          )
        )
        (LetD
          (VarP insert)
          (FuncE
            insert
            Local
            Returns
            (params n)
            @Node__1
            (SwitchE
              (VarE n)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP $expire/4)
                    (PrimE (ArrayPrim Var Nat64) (VarE expire))
                  )
                  (LetD (VarP $id/4) (VarE id))
                  (LetD (VarP $delay/4) (VarE delay))
                  (LetD (VarP $job/4) (VarE job))
                  (LetD (VarP $pre/4) (LitE NullLit))
                  (LetD (VarP $post/4) (LitE NullLit))
                  (NewObjE
                    Object
                    (post $post/4)
                    (pre $pre/4)
                    (job $job/4)
                    (delay $delay/4)
                    (id $id/4)
                    (expire $expire/4)
                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                  )
                )
              )
              (case
                (OptP (VarP n))
                (BlockE
                  (LetD
                    WildP
                    (PrimE
                      AssertPrim
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (RelPrim Nat64 EqOp)
                          (PrimE
                            IdxPrim
                            (PrimE (DotPrim expire) (VarE n))
                            (LitE (NatLit 0))
                          )
                          (LitE (Nat64Lit 0))
                        )
                        (LitE (BoolLit false))
                      )
                    )
                  )
                  (IfE
                    (PrimE
                      (RelPrim Nat64 LtOp)
                      (VarE expire)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/6) (VarE n))
                      (LetD
                        (VarP $pre/6)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim pre) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/6)
                        (PrimE (DotPrim delay) (VarE $base/6))
                      )
                      (LetD
                        (VarP $expire/6)
                        (PrimE (DotPrim expire) (VarE $base/6))
                      )
                      (LetD (VarP $id/6) (PrimE (DotPrim id) (VarE $base/6)))
                      (LetD (VarP $job/6) (PrimE (DotPrim job) (VarE $base/6)))
                      (LetD
                        (VarP $post/6)
                        (PrimE (DotPrim post) (VarE $base/6))
                      )
                      (NewObjE
                        Object
                        (post $post/6)
                        (job $job/6)
                        (id $id/6)
                        (expire $expire/6)
                        (delay $delay/6)
                        (pre $pre/6)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/5) (VarE n))
                      (LetD
                        (VarP $post/5)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/5)
                        (PrimE (DotPrim delay) (VarE $base/5))
                      )
                      (LetD
                        (VarP $expire/5)
                        (PrimE (DotPrim expire) (VarE $base/5))
                      )
                      (LetD (VarP $id/5) (PrimE (DotPrim id) (VarE $base/5)))
                      (LetD (VarP $job/5) (PrimE (DotPrim job) (VarE $base/5)))
                      (LetD (VarP $pre/5) (PrimE (DotPrim pre) (VarE $base/5)))
                      (NewObjE
                        Object
                        (pre $pre/5)
                        (job $job/5)
                        (id $id/5)
                        (expire $expire/5)
                        (delay $delay/5)
                        (post $post/5)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE
              OptPrim
              (PrimE
                (CallPrim)
                (VarE insert)
                (PrimE (CallPrim) (VarE @prune) (VarE @timers))
              )
            )
          )
        )
        (LetD
          (VarP exp)
          (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
        )
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
            (AssignE (VarLE @timers) (LitE NullLit))
            (PrimE TupPrim)
          )
        )
        (LetD
          WildP
          (BlockE
            (LetD WildP (PrimE global_timer_set (VarE exp)))
            (PrimE TupPrim)
          )
        )
        (VarE id)
      )
    )
  )
  (LetD
    (VarP @cancelTimer)
    (FuncE
      @cancelTimer
      Local
      Returns
      (params id)
      ()
      (BlockE
        (LetD
          (VarP graft)
          (FuncE
            graft
            Local
            Returns
            (params onto branch)
            ?@Node__1
            (SwitchE
              (PrimE TupPrim (VarE onto) (VarE branch))
              (case (TupP (LitP NullLit) (LitP NullLit)) (LitE NullLit))
              (case (TupP (LitP NullLit) WildP) (VarE branch))
              (case (TupP WildP (LitP NullLit)) (VarE onto))
              (case
                (TupP (OptP (VarP onto)) WildP)
                (PrimE
                  OptPrim
                  (BlockE
                    (LetD (VarP $base/7) (VarE onto))
                    (LetD
                      (VarP $post/7)
                      (PrimE
                        (CallPrim)
                        (VarE graft)
                        (PrimE
                          TupPrim
                          (PrimE (DotPrim post) (VarE onto))
                          (VarE branch)
                        )
                      )
                    )
                    (LetD
                      (VarP $delay/7)
                      (PrimE (DotPrim delay) (VarE $base/7))
                    )
                    (LetD
                      (VarP $expire/7)
                      (PrimE (DotPrim expire) (VarE $base/7))
                    )
                    (LetD (VarP $id/7) (PrimE (DotPrim id) (VarE $base/7)))
                    (LetD (VarP $job/7) (PrimE (DotPrim job) (VarE $base/7)))
                    (LetD (VarP $pre/7) (PrimE (DotPrim pre) (VarE $base/7)))
                    (NewObjE
                      Object
                      (pre $pre/7)
                      (job $job/7)
                      (id $id/7)
                      (expire $expire/7)
                      (delay $delay/7)
                      (post $post/7)
                      {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          (VarP hunt)
          (FuncE
            hunt
            Local
            Returns
            (params n)
            ?@Node__1
            (SwitchE
              (VarE n)
              (case (LitP NullLit) (VarE n))
              (case
                (OptP
                  (ObjP (id (VarP node)) (pre (VarP pre)) (post (VarP post)))
                )
                (IfE
                  (PrimE (RelPrim Nat EqOp) (VarE node) (VarE id))
                  (PrimE
                    (CallPrim)
                    (VarE graft)
                    (PrimE TupPrim (VarE pre) (VarE post))
                  )
                  (LabelE
                    !
                    ?@Node__1
                    (PrimE
                      OptPrim
                      (BlockE
                        (LetD
                          (VarP $base/8)
                          (SwitchE
                            (VarE n)
                            (case
                              (LitP NullLit)
                              (PrimE (BreakPrim !) (LitE NullLit))
                            )
                            (case (OptP (VarP $v/1)) (VarE $v/1))
                          )
                        )
                        (LetD
                          (VarP $pre/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE pre))
                        )
                        (LetD
                          (VarP $post/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE post))
                        )
                        (LetD
                          (VarP $delay/8)
                          (PrimE (DotPrim delay) (VarE $base/8))
                        )
                        (LetD
                          (VarP $expire/8)
                          (PrimE (DotPrim expire) (VarE $base/8))
                        )
                        (LetD (VarP $id/8) (PrimE (DotPrim id) (VarE $base/8)))
                        (LetD
                          (VarP $job/8)
                          (PrimE (DotPrim job) (VarE $base/8))
                        )
                        (NewObjE
                          Object
                          (job $job/8)
                          (id $id/8)
                          (expire $expire/8)
                          (delay $delay/8)
                          (post $post/8)
                          (pre $pre/8)
                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : () -> async (); post : ?@Node__1; pre : ?@Node__1}
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE (CallPrim) (VarE hunt) (VarE @timers))
          )
        )
        (IfE
          (PrimE
            (RelPrim Nat64 EqOp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
            (LitE (Nat64Lit 0))
          )
          (BlockE
            (LetD
              WildP
              (BlockE
                (LetD WildP (PrimE global_timer_set (LitE (Nat64Lit 0))))
                (PrimE TupPrim)
              )
            )
            (AssignE (VarLE @timers) (LitE NullLit))
          )
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @set_global_timer)
    (FuncE
      @set_global_timer
      Local
      Returns
      (params time)
      ()
      (BlockE (LetD WildP (PrimE global_timer_set (VarE time))) (PrimE TupPrim))
    )
  )
  (LetD
    (VarP file$@prim)
    (BlockE
      (LetD (VarP Types) (NewObjE Module module {}))
      (LetD
        (VarP abs)
        (FuncE abs Local Returns (params x) Nat (PrimE abs (VarE x)))
      )
      (LetD
        (VarP shiftLeft)
        (FuncE
          shiftLeft
          Local
          Returns
          (params x shift)
          Nat
          (PrimE lsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP shiftRight)
        (FuncE
          shiftRight
          Local
          Returns
          (params x shift)
          Nat
          (PrimE rsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP idlHash)
        (FuncE idlHash Local Returns (params x) Nat32 (PrimE idlHash (VarE x)))
      )
      (LetD
        (VarP debugPrint)
        (FuncE debugPrint Local Returns (params x) () (PrimE print (VarE x)))
      )
      (LetD
        (VarP debugPrintNat)
        (FuncE
          debugPrintNat
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Nat) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintInt)
        (FuncE
          debugPrintInt
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Int) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintChar)
        (FuncE
          debugPrintChar
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE charToText) (VarE x))
          )
        )
      )
      (LetD
        (VarP trap)
        (FuncE trap Local Returns (params x) None__2 (PrimE trap (VarE x)))
      )
      (LetD
        (VarP rts_version)
        (FuncE rts_version Local Returns Text (PrimE rts_version))
      )
      (LetD
        (VarP rts_memory_size)
        (FuncE rts_memory_size Local Returns Nat (PrimE rts_memory_size))
      )
      (LetD
        (VarP rts_heap_size)
        (FuncE rts_heap_size Local Returns Nat (PrimE rts_heap_size))
      )
      (LetD
        (VarP rts_total_allocation)
        (FuncE
          rts_total_allocation
          Local
          Returns
          Nat
          (PrimE rts_total_allocation)
        )
      )
      (LetD
        (VarP rts_reclaimed)
        (FuncE rts_reclaimed Local Returns Nat (PrimE rts_reclaimed))
      )
      (LetD
        (VarP rts_max_live_size)
        (FuncE rts_max_live_size Local Returns Nat (PrimE rts_max_live_size))
      )
      (LetD
        (VarP rts_max_stack_size)
        (FuncE rts_max_stack_size Local Returns Nat (PrimE rts_max_stack_size))
      )
      (LetD
        (VarP rts_callback_table_count)
        (FuncE
          rts_callback_table_count
          Local
          Returns
          Nat
          (PrimE rts_callback_table_count)
        )
      )
      (LetD
        (VarP rts_callback_table_size)
        (FuncE
          rts_callback_table_size
          Local
          Returns
          Nat
          (PrimE rts_callback_table_size)
        )
      )
      (LetD
        (VarP rts_mutator_instructions)
        (FuncE
          rts_mutator_instructions
          Local
          Returns
          Nat
          (PrimE rts_mutator_instructions)
        )
      )
      (LetD
        (VarP rts_collector_instructions)
        (FuncE
          rts_collector_instructions
          Local
          Returns
          Nat
          (PrimE rts_collector_instructions)
        )
      )
      (LetD
        (VarP rts_stable_memory_size)
        (FuncE
          rts_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_stable_memory_size)
        )
      )
      (LetD
        (VarP rts_logical_stable_memory_size)
        (FuncE
          rts_logical_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_logical_stable_memory_size)
        )
      )
      (LetD (VarP int64ToInt) (VarE @int64ToInt))
      (LetD (VarP int32ToInt) (VarE @int32ToInt))
      (LetD (VarP int16ToInt) (VarE @int16ToInt))
      (LetD (VarP int8ToInt) (VarE @int8ToInt))
      (LetD (VarP nat64ToNat) (VarE @nat64ToNat))
      (LetD (VarP nat32ToNat) (VarE @nat32ToNat))
      (LetD (VarP nat16ToNat) (VarE @nat16ToNat))
      (LetD (VarP nat8ToNat) (VarE @nat8ToNat))
      (LetD
        (VarP intToInt64)
        (FuncE
          intToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32)
        (FuncE
          intToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16)
        (FuncE
          intToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8)
        (FuncE
          intToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP natToNat64)
        (FuncE
          natToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat Nat64) (VarE n))
        )
      )
      (LetD
        (VarP natToNat32)
        (FuncE
          natToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat Nat32) (VarE n))
        )
      )
      (LetD
        (VarP natToNat16)
        (FuncE
          natToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat Nat16) (VarE n))
        )
      )
      (LetD
        (VarP natToNat8)
        (FuncE
          natToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat Nat8) (VarE n))
        )
      )
      (LetD
        (VarP intToInt64Wrap)
        (FuncE
          intToInt64Wrap
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32Wrap)
        (FuncE
          intToInt32Wrap
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16Wrap)
        (FuncE
          intToInt16Wrap
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8Wrap)
        (FuncE
          intToInt8Wrap
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP intToNat64Wrap)
        (FuncE
          intToNat64Wrap
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int Nat64) (VarE n))
        )
      )
      (LetD
        (VarP intToNat32Wrap)
        (FuncE
          intToNat32Wrap
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int Nat32) (VarE n))
        )
      )
      (LetD
        (VarP intToNat16Wrap)
        (FuncE
          intToNat16Wrap
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int Nat16) (VarE n))
        )
      )
      (LetD
        (VarP intToNat8Wrap)
        (FuncE
          intToNat8Wrap
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int64ToNat64)
        (FuncE
          int64ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int64 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToInt64)
        (FuncE
          nat64ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Nat64 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int32ToNat32)
        (FuncE
          int32ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int32 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToInt32)
        (FuncE
          nat32ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Nat32 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int16ToNat16)
        (FuncE
          int16ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int16 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToInt16)
        (FuncE
          nat16ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Nat16 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int8ToNat8)
        (FuncE
          int8ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int8 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToInt8)
        (FuncE
          nat8ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Nat8 Int8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToNat16)
        (FuncE
          nat8ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat8 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat32)
        (FuncE
          nat16ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat16 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat64)
        (FuncE
          nat32ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat32 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToNat32)
        (FuncE
          nat64ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat64 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat16)
        (FuncE
          nat32ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat32 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat8)
        (FuncE
          nat16ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat16 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int8ToInt16)
        (FuncE
          int8ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int8 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt32)
        (FuncE
          int16ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int16 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt64)
        (FuncE
          int32ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int32 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int64ToInt32)
        (FuncE
          int64ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int64 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt16)
        (FuncE
          int32ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int32 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt8)
        (FuncE
          int16ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int16 Int8) (VarE n))
        )
      )
      (LetD
        (VarP charToNat32)
        (FuncE
          charToNat32
          Local
          Returns
          (params c)
          Nat32
          (PrimE (NumConvWrapPrim Char Nat32) (VarE c))
        )
      )
      (LetD
        (VarP nat32ToChar)
        (FuncE
          nat32ToChar
          Local
          Returns
          (params w)
          Char
          (PrimE (NumConvTrapPrim Nat32 Char) (VarE w))
        )
      )
      (LetD
        (VarP charToText)
        (FuncE
          charToText
          Local
          Returns
          (params c)
          Text
          (PrimE conv_Char_Text (VarE c))
        )
      )
      (LetD
        (VarP charToUpper)
        (FuncE
          charToUpper
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_upper (VarE c))
        )
      )
      (LetD
        (VarP charToLower)
        (FuncE
          charToLower
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_lower (VarE c))
        )
      )
      (LetD
        (VarP charIsWhitespace)
        (FuncE
          charIsWhitespace
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_whitespace (VarE c))
        )
      )
      (LetD
        (VarP charIsLowercase)
        (FuncE
          charIsLowercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_lowercase (VarE c))
        )
      )
      (LetD
        (VarP charIsUppercase)
        (FuncE
          charIsUppercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_uppercase (VarE c))
        )
      )
      (LetD
        (VarP charIsAlphabetic)
        (FuncE
          charIsAlphabetic
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_alphabetic (VarE c))
        )
      )
      (LetD
        (VarP blobCompare)
        (FuncE
          blobCompare
          Local
          Returns
          (params b1 b2)
          Int8
          (PrimE blob_compare (VarE b1) (VarE b2))
        )
      )
      (LetD
        (VarP hashBlob)
        (FuncE
          hashBlob
          Local
          Returns
          (params b)
          Nat32
          (PrimE crc32Hash (VarE b))
        )
      )
      (LetD
        (VarP decodeUtf8)
        (FuncE
          decodeUtf8
          Local
          Returns
          (params b)
          ?Text
          (PrimE DecodeUtf8 (VarE b))
        )
      )
      (LetD
        (VarP encodeUtf8)
        (FuncE
          encodeUtf8
          Local
          Returns
          (params t)
          Blob
          (PrimE EncodeUtf8 (VarE t))
        )
      )
      (LetD
        (VarP textCompare)
        (FuncE
          textCompare
          Local
          Returns
          (params t1 t2)
          Int8
          (PrimE text_compare (VarE t1) (VarE t2))
        )
      )
      (LetD
        (VarP textLowercase)
        (FuncE
          textLowercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_lowercase (VarE t))
        )
      )
      (LetD
        (VarP textUppercase)
        (FuncE
          textUppercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_uppercase (VarE t))
        )
      )
      (LetD
        (VarP popcntNat8)
        (FuncE
          popcntNat8
          Local
          Returns
          (params w)
          Nat8
          (PrimE popcnt8 (VarE w))
        )
      )
      (LetD
        (VarP clzNat8)
        (FuncE clzNat8 Local Returns (params w) Nat8 (PrimE clz8 (VarE w)))
      )
      (LetD
        (VarP ctzNat8)
        (FuncE ctzNat8 Local Returns (params w) Nat8 (PrimE ctz8 (VarE w)))
      )
      (LetD
        (VarP btstNat8)
        (FuncE
          btstNat8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat8 EqOp)
              (PrimE btst8 (VarE w) (VarE amount))
              (LitE (Nat8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat16)
        (FuncE
          popcntNat16
          Local
          Returns
          (params w)
          Nat16
          (PrimE popcnt16 (VarE w))
        )
      )
      (LetD
        (VarP clzNat16)
        (FuncE clzNat16 Local Returns (params w) Nat16 (PrimE clz16 (VarE w)))
      )
      (LetD
        (VarP ctzNat16)
        (FuncE ctzNat16 Local Returns (params w) Nat16 (PrimE ctz16 (VarE w)))
      )
      (LetD
        (VarP btstNat16)
        (FuncE
          btstNat16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat16 EqOp)
              (PrimE btst16 (VarE w) (VarE amount))
              (LitE (Nat16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat32)
        (FuncE
          popcntNat32
          Local
          Returns
          (params w)
          Nat32
          (PrimE popcnt32 (VarE w))
        )
      )
      (LetD
        (VarP clzNat32)
        (FuncE clzNat32 Local Returns (params w) Nat32 (PrimE clz32 (VarE w)))
      )
      (LetD
        (VarP ctzNat32)
        (FuncE ctzNat32 Local Returns (params w) Nat32 (PrimE ctz32 (VarE w)))
      )
      (LetD
        (VarP btstNat32)
        (FuncE
          btstNat32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat32 EqOp)
              (PrimE btst32 (VarE w) (VarE amount))
              (LitE (Nat32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat64)
        (FuncE
          popcntNat64
          Local
          Returns
          (params w)
          Nat64
          (PrimE popcnt64 (VarE w))
        )
      )
      (LetD
        (VarP clzNat64)
        (FuncE clzNat64 Local Returns (params w) Nat64 (PrimE clz64 (VarE w)))
      )
      (LetD
        (VarP ctzNat64)
        (FuncE ctzNat64 Local Returns (params w) Nat64 (PrimE ctz64 (VarE w)))
      )
      (LetD
        (VarP btstNat64)
        (FuncE
          btstNat64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE btst64 (VarE w) (VarE amount))
              (LitE (Nat64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt8)
        (FuncE
          popcntInt8
          Local
          Returns
          (params w)
          Int8
          (PrimE popcntInt8 (VarE w))
        )
      )
      (LetD
        (VarP clzInt8)
        (FuncE clzInt8 Local Returns (params w) Int8 (PrimE clzInt8 (VarE w)))
      )
      (LetD
        (VarP ctzInt8)
        (FuncE ctzInt8 Local Returns (params w) Int8 (PrimE ctzInt8 (VarE w)))
      )
      (LetD
        (VarP btstInt8)
        (FuncE
          btstInt8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int8 EqOp)
              (PrimE btstInt8 (VarE w) (VarE amount))
              (LitE (Int8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt16)
        (FuncE
          popcntInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE popcntInt16 (VarE w))
        )
      )
      (LetD
        (VarP clzInt16)
        (FuncE
          clzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE clzInt16 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt16)
        (FuncE
          ctzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE ctzInt16 (VarE w))
        )
      )
      (LetD
        (VarP btstInt16)
        (FuncE
          btstInt16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int16 EqOp)
              (PrimE btstInt16 (VarE w) (VarE amount))
              (LitE (Int16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt32)
        (FuncE
          popcntInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE popcntInt32 (VarE w))
        )
      )
      (LetD
        (VarP clzInt32)
        (FuncE
          clzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE clzInt32 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt32)
        (FuncE
          ctzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE ctzInt32 (VarE w))
        )
      )
      (LetD
        (VarP btstInt32)
        (FuncE
          btstInt32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int32 EqOp)
              (PrimE btstInt32 (VarE w) (VarE amount))
              (LitE (Int32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt64)
        (FuncE
          popcntInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE popcntInt64 (VarE w))
        )
      )
      (LetD
        (VarP clzInt64)
        (FuncE
          clzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE clzInt64 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt64)
        (FuncE
          ctzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE ctzInt64 (VarE w))
        )
      )
      (LetD
        (VarP btstInt64)
        (FuncE
          btstInt64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int64 EqOp)
              (PrimE btstInt64 (VarE w) (VarE amount))
              (LitE (Int64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP floatAbs)
        (FuncE floatAbs Local Returns (params f) Float (PrimE fabs (VarE f)))
      )
      (LetD
        (VarP floatSqrt)
        (FuncE floatSqrt Local Returns (params f) Float (PrimE fsqrt (VarE f)))
      )
      (LetD
        (VarP floatCeil)
        (FuncE floatCeil Local Returns (params f) Float (PrimE fceil (VarE f)))
      )
      (LetD
        (VarP floatFloor)
        (FuncE
          floatFloor
          Local
          Returns
          (params f)
          Float
          (PrimE ffloor (VarE f))
        )
      )
      (LetD
        (VarP floatTrunc)
        (FuncE
          floatTrunc
          Local
          Returns
          (params f)
          Float
          (PrimE ftrunc (VarE f))
        )
      )
      (LetD
        (VarP floatNearest)
        (FuncE
          floatNearest
          Local
          Returns
          (params f)
          Float
          (PrimE fnearest (VarE f))
        )
      )
      (LetD
        (VarP floatMin)
        (FuncE
          floatMin
          Local
          Returns
          (params f g)
          Float
          (PrimE fmin (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatMax)
        (FuncE
          floatMax
          Local
          Returns
          (params f g)
          Float
          (PrimE fmax (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatCopySign)
        (FuncE
          floatCopySign
          Local
          Returns
          (params f g)
          Float
          (PrimE fcopysign (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatToInt)
        (FuncE
          floatToInt
          Local
          Returns
          (params f)
          Int
          (PrimE (NumConvTrapPrim Float Int) (VarE f))
        )
      )
      (LetD
        (VarP intToFloat)
        (FuncE
          intToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int Float) (VarE n))
        )
      )
      (LetD
        (VarP floatToInt64)
        (FuncE
          floatToInt64
          Local
          Returns
          (params f)
          Int64
          (PrimE (NumConvTrapPrim Float Int64) (VarE f))
        )
      )
      (LetD
        (VarP int64ToFloat)
        (FuncE
          int64ToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int64 Float) (VarE n))
        )
      )
      (LetD (VarP floatToText) (VarE @text_of_Float))
      (LetD
        (VarP floatToFormattedText)
        (FuncE
          floatToFormattedText
          Local
          Returns
          (params f prec mode)
          Text
          (PrimE fmtFloat->Text (VarE f) (VarE prec) (VarE mode))
        )
      )
      (LetD
        (VarP sin)
        (FuncE sin Local Returns (params f) Float (PrimE fsin (VarE f)))
      )
      (LetD
        (VarP cos)
        (FuncE cos Local Returns (params f) Float (PrimE fcos (VarE f)))
      )
      (LetD
        (VarP tan)
        (FuncE tan Local Returns (params f) Float (PrimE ftan (VarE f)))
      )
      (LetD
        (VarP arcsin)
        (FuncE arcsin Local Returns (params f) Float (PrimE fasin (VarE f)))
      )
      (LetD
        (VarP arccos)
        (FuncE arccos Local Returns (params f) Float (PrimE facos (VarE f)))
      )
      (LetD
        (VarP arctan)
        (FuncE arctan Local Returns (params f) Float (PrimE fatan (VarE f)))
      )
      (LetD
        (VarP arctan2)
        (FuncE
          arctan2
          Local
          Returns
          (params y x)
          Float
          (PrimE fatan2 (VarE y) (VarE x))
        )
      )
      (LetD
        (VarP exp)
        (FuncE exp Local Returns (params f) Float (PrimE fexp (VarE f)))
      )
      (LetD
        (VarP log)
        (FuncE log Local Returns (params f) Float (PrimE flog (VarE f)))
      )
      (LetD
        (VarP Array_init)
        (FuncE
          Array_init
          Local
          Returns
          (T__106 Any)
          (params len x)
          [var T__106]
          (PrimE Array.init (VarE len) (VarE x))
        )
      )
      (LetD
        (VarP Array_tabulate)
        (FuncE
          Array_tabulate
          Local
          Returns
          (T__107 Any)
          (params len gen)
          [T__107]
          (PrimE Array.tabulate (VarE len) (VarE gen))
        )
      )
      (LetD
        (VarP blobToArray)
        (FuncE
          blobToArray
          Local
          Returns
          (params b)
          [Nat8]
          (PrimE blobToArray (VarE b))
        )
      )
      (LetD
        (VarP blobToArrayMut)
        (FuncE
          blobToArrayMut
          Local
          Returns
          (params b)
          [var Nat8]
          (PrimE blobToArrayMut (VarE b))
        )
      )
      (LetD
        (VarP arrayToBlob)
        (FuncE
          arrayToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayToBlob (VarE a))
        )
      )
      (LetD
        (VarP arrayMutToBlob)
        (FuncE
          arrayMutToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayMutToBlob (VarE a))
        )
      )
      (LetD
        (VarP error)
        (FuncE
          error
          Local
          Returns
          (params message)
          Error
          (BlockE
            (LetD
              (VarP e)
              (PrimE
                TupPrim
                (PrimE (TagE canister_reject) (PrimE TupPrim))
                (VarE message)
              )
            )
            (PrimE (CastPrim (ErrorCode__1, Text) Error) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorCode)
        (FuncE
          errorCode
          Local
          Returns
          (params e)
          ErrorCode__1
          (PrimE
            (ProjPrim 0)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorMessage)
        (FuncE
          errorMessage
          Local
          Returns
          (params e)
          Text
          (PrimE
            (ProjPrim 1)
            (PrimE (CastPrim Error (ErrorCode__1, Text)) (VarE e))
          )
        )
      )
      (LetD (VarP time) (FuncE time Local Returns Nat64 (PrimE SystemTimePrim)))
      (LetD
        (VarP blobOfPrincipal)
        (FuncE
          blobOfPrincipal
          Local
          Returns
          (params id)
          Blob
          (PrimE (CastPrim Principal Blob) (VarE id))
        )
      )
      (LetD
        (VarP principalOfBlob)
        (FuncE
          principalOfBlob
          Local
          Returns
          (params act)
          Principal
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE
                  (RelPrim Nat GtOp)
                  (PrimE blob_size (VarE act))
                  (LitE (NatLit 29))
                )
                (PrimE
                  (CallPrim)
                  (VarE trap)
                  (LitE (TextLit blob too long for principal))
                )
                (PrimE TupPrim)
              )
            )
            (PrimE (CastPrim Blob Principal) (VarE act))
          )
        )
      )
      (LetD
        (VarP principalOfActor)
        (FuncE
          principalOfActor
          Local
          Returns
          (params act)
          Principal
          (PrimE (CastPrim actor {} Principal) (VarE act))
        )
      )
      (LetD
        (VarP isController)
        (FuncE
          isController
          Local
          Returns
          (params p)
          Bool
          (PrimE is_controller (VarE p))
        )
      )
      (LetD
        (VarP canisterVersion)
        (FuncE canisterVersion Local Returns Nat64 (PrimE canister_version))
      )
      (LetD (VarP createActor) (VarE @create_actor_helper))
      (LetD
        (VarP cyclesBalance)
        (FuncE cyclesBalance Local Returns Nat (PrimE SystemCyclesBalancePrim))
      )
      (LetD
        (VarP cyclesAvailable)
        (FuncE
          cyclesAvailable
          Local
          Returns
          Nat
          (PrimE SystemCyclesAvailablePrim)
        )
      )
      (LetD
        (VarP cyclesRefunded)
        (FuncE cyclesRefunded Local Returns Nat (VarE @refund))
      )
      (LetD
        (VarP cyclesAccept)
        (FuncE
          cyclesAccept
          Local
          Returns
          ($__265 Any)
          (params amount)
          Nat
          (PrimE SystemCyclesAcceptPrim (VarE amount))
        )
      )
      (LetD
        (VarP cyclesAdd)
        (FuncE
          cyclesAdd
          Local
          Returns
          ($__266 Any)
          (params amount)
          ()
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat EqOp) (VarE amount) (LitE (NatLit 0)))
                (PrimE RetPrim (PrimE TupPrim))
                (PrimE TupPrim)
              )
            )
            (LetD
              WildP
              (AssignE
                (VarLE @cycles)
                (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE amount))
              )
            )
            (IfE
              (PrimE
                (RelPrim Nat GtOp)
                (VarE @cycles)
                (LitE
                  (NatLit 340_282_366_920_938_463_463_374_607_431_768_211_455)
                )
              )
              (PrimE
                (CallPrim)
                (VarE trap)
                (LitE (TextLit cannot add more than 2^128 cycles))
              )
              (PrimE TupPrim)
            )
          )
        )
      )
      (LetD
        (VarP setCertifiedData)
        (FuncE
          setCertifiedData
          Local
          Returns
          (params data)
          ()
          (PrimE SetCertifiedData (VarE data))
        )
      )
      (LetD
        (VarP getCertificate)
        (FuncE getCertificate Local Returns ?Blob (PrimE GetCertificate))
      )
      (LetD
        (VarP stableMemorySize)
        (FuncE stableMemorySize Local Returns Nat64 (PrimE stableMemorySize))
      )
      (LetD
        (VarP stableMemoryGrow)
        (FuncE
          stableMemoryGrow
          Local
          Returns
          (params pages)
          Nat64
          (PrimE stableMemoryGrow (VarE pages))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat32)
        (FuncE
          stableMemoryLoadNat32
          Local
          Returns
          (params offset)
          Nat32
          (PrimE stableMemoryLoadNat32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat32)
        (FuncE
          stableMemoryStoreNat32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat8)
        (FuncE
          stableMemoryLoadNat8
          Local
          Returns
          (params offset)
          Nat8
          (PrimE stableMemoryLoadNat8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat8)
        (FuncE
          stableMemoryStoreNat8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat16)
        (FuncE
          stableMemoryLoadNat16
          Local
          Returns
          (params offset)
          Nat16
          (PrimE stableMemoryLoadNat16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat16)
        (FuncE
          stableMemoryStoreNat16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat64)
        (FuncE
          stableMemoryLoadNat64
          Local
          Returns
          (params offset)
          Nat64
          (PrimE stableMemoryLoadNat64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat64)
        (FuncE
          stableMemoryStoreNat64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt32)
        (FuncE
          stableMemoryLoadInt32
          Local
          Returns
          (params offset)
          Int32
          (PrimE stableMemoryLoadInt32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt32)
        (FuncE
          stableMemoryStoreInt32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt8)
        (FuncE
          stableMemoryLoadInt8
          Local
          Returns
          (params offset)
          Int8
          (PrimE stableMemoryLoadInt8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt8)
        (FuncE
          stableMemoryStoreInt8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt16)
        (FuncE
          stableMemoryLoadInt16
          Local
          Returns
          (params offset)
          Int16
          (PrimE stableMemoryLoadInt16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt16)
        (FuncE
          stableMemoryStoreInt16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt64)
        (FuncE
          stableMemoryLoadInt64
          Local
          Returns
          (params offset)
          Int64
          (PrimE stableMemoryLoadInt64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt64)
        (FuncE
          stableMemoryStoreInt64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadFloat)
        (FuncE
          stableMemoryLoadFloat
          Local
          Returns
          (params offset)
          Float
          (PrimE stableMemoryLoadFloat (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreFloat)
        (FuncE
          stableMemoryStoreFloat
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreFloat (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadBlob)
        (FuncE
          stableMemoryLoadBlob
          Local
          Returns
          (params offset size)
          Blob
          (PrimE stableMemoryLoadBlob (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP stableMemoryStoreBlob)
        (FuncE
          stableMemoryStoreBlob
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreBlob (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableVarQuery)
        (FuncE
          stableVarQuery
          Local
          Returns
          shared query () -> async {size : Nat64}
          (PrimE stableVarQuery)
        )
      )
      (LetD
        (VarP regionNew)
        (FuncE regionNew Local Returns Region (PrimE regionNew))
      )
      (LetD
        (VarP regionId)
        (FuncE regionId Local Returns (params r) Nat (PrimE regionId (VarE r)))
      )
      (LetD
        (VarP regionSize)
        (FuncE
          regionSize
          Local
          Returns
          (params r)
          Nat64
          (PrimE regionSize (VarE r))
        )
      )
      (LetD
        (VarP regionGrow)
        (FuncE
          regionGrow
          Local
          Returns
          (params r pages)
          Nat64
          (PrimE regionGrow (VarE r) (VarE pages))
        )
      )
      (LetD
        (VarP regionLoadNat32)
        (FuncE
          regionLoadNat32
          Local
          Returns
          (params r offset)
          Nat32
          (PrimE regionLoadNat32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat32)
        (FuncE
          regionStoreNat32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat8)
        (FuncE
          regionLoadNat8
          Local
          Returns
          (params r offset)
          Nat8
          (PrimE regionLoadNat8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat8)
        (FuncE
          regionStoreNat8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat16)
        (FuncE
          regionLoadNat16
          Local
          Returns
          (params r offset)
          Nat16
          (PrimE regionLoadNat16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat16)
        (FuncE
          regionStoreNat16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat64)
        (FuncE
          regionLoadNat64
          Local
          Returns
          (params r offset)
          Nat64
          (PrimE regionLoadNat64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat64)
        (FuncE
          regionStoreNat64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt32)
        (FuncE
          regionLoadInt32
          Local
          Returns
          (params r offset)
          Int32
          (PrimE regionLoadInt32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt32)
        (FuncE
          regionStoreInt32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt8)
        (FuncE
          regionLoadInt8
          Local
          Returns
          (params r offset)
          Int8
          (PrimE regionLoadInt8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt8)
        (FuncE
          regionStoreInt8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt16)
        (FuncE
          regionLoadInt16
          Local
          Returns
          (params r offset)
          Int16
          (PrimE regionLoadInt16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt16)
        (FuncE
          regionStoreInt16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt64)
        (FuncE
          regionLoadInt64
          Local
          Returns
          (params r offset)
          Int64
          (PrimE regionLoadInt64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt64)
        (FuncE
          regionStoreInt64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadFloat)
        (FuncE
          regionLoadFloat
          Local
          Returns
          (params r offset)
          Float
          (PrimE regionLoadFloat (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreFloat)
        (FuncE
          regionStoreFloat
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreFloat (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadBlob)
        (FuncE
          regionLoadBlob
          Local
          Returns
          (params r offset size)
          Blob
          (PrimE regionLoadBlob (VarE r) (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP regionStoreBlob)
        (FuncE
          regionStoreBlob
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreBlob (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD (VarP call_raw) (VarE @call_raw))
      (LetD
        (VarP performanceCounter)
        (FuncE
          performanceCounter
          Local
          Returns
          (params counter)
          Nat64
          (PrimE performanceCounter (VarE counter))
        )
      )
      (LetD
        (VarP forall)
        (FuncE
          forall
          Local
          Returns
          (T__108 Any)
          (params f)
          Bool
          (PrimE forall (VarE f))
        )
      )
      (LetD
        (VarP exists)
        (FuncE
          exists
          Local
          Returns
          (T__109 Any)
          (params f)
          Bool
          (PrimE exists (VarE f))
        )
      )
      (LetD
        (VarP Ret)
        (FuncE Ret Local Returns (T__110 Any) T__110 (PrimE viperRet))
      )
      (LetD (VarP setTimer) (VarE @setTimer))
      (LetD (VarP cancelTimer) (VarE @cancelTimer))
      (NewObjE
        Module
        (trap trap)
        (time time)
        (textUppercase textUppercase)
        (textLowercase textLowercase)
        (textCompare textCompare)
        (tan tan)
        (stableVarQuery stableVarQuery)
        (stableMemoryStoreNat8 stableMemoryStoreNat8)
        (stableMemoryStoreNat64 stableMemoryStoreNat64)
        (stableMemoryStoreNat32 stableMemoryStoreNat32)
        (stableMemoryStoreNat16 stableMemoryStoreNat16)
        (stableMemoryStoreInt8 stableMemoryStoreInt8)
        (stableMemoryStoreInt64 stableMemoryStoreInt64)
        (stableMemoryStoreInt32 stableMemoryStoreInt32)
        (stableMemoryStoreInt16 stableMemoryStoreInt16)
        (stableMemoryStoreFloat stableMemoryStoreFloat)
        (stableMemoryStoreBlob stableMemoryStoreBlob)
        (stableMemorySize stableMemorySize)
        (stableMemoryLoadNat8 stableMemoryLoadNat8)
        (stableMemoryLoadNat64 stableMemoryLoadNat64)
        (stableMemoryLoadNat32 stableMemoryLoadNat32)
        (stableMemoryLoadNat16 stableMemoryLoadNat16)
        (stableMemoryLoadInt8 stableMemoryLoadInt8)
        (stableMemoryLoadInt64 stableMemoryLoadInt64)
        (stableMemoryLoadInt32 stableMemoryLoadInt32)
        (stableMemoryLoadInt16 stableMemoryLoadInt16)
        (stableMemoryLoadFloat stableMemoryLoadFloat)
        (stableMemoryLoadBlob stableMemoryLoadBlob)
        (stableMemoryGrow stableMemoryGrow)
        (sin sin)
        (shiftRight shiftRight)
        (shiftLeft shiftLeft)
        (setTimer setTimer)
        (setCertifiedData setCertifiedData)
        (rts_version rts_version)
        (rts_total_allocation rts_total_allocation)
        (rts_stable_memory_size rts_stable_memory_size)
        (rts_reclaimed rts_reclaimed)
        (rts_mutator_instructions rts_mutator_instructions)
        (rts_memory_size rts_memory_size)
        (rts_max_stack_size rts_max_stack_size)
        (rts_max_live_size rts_max_live_size)
        (rts_logical_stable_memory_size rts_logical_stable_memory_size)
        (rts_heap_size rts_heap_size)
        (rts_collector_instructions rts_collector_instructions)
        (rts_callback_table_size rts_callback_table_size)
        (rts_callback_table_count rts_callback_table_count)
        (regionStoreNat8 regionStoreNat8)
        (regionStoreNat64 regionStoreNat64)
        (regionStoreNat32 regionStoreNat32)
        (regionStoreNat16 regionStoreNat16)
        (regionStoreInt8 regionStoreInt8)
        (regionStoreInt64 regionStoreInt64)
        (regionStoreInt32 regionStoreInt32)
        (regionStoreInt16 regionStoreInt16)
        (regionStoreFloat regionStoreFloat)
        (regionStoreBlob regionStoreBlob)
        (regionSize regionSize)
        (regionNew regionNew)
        (regionLoadNat8 regionLoadNat8)
        (regionLoadNat64 regionLoadNat64)
        (regionLoadNat32 regionLoadNat32)
        (regionLoadNat16 regionLoadNat16)
        (regionLoadInt8 regionLoadInt8)
        (regionLoadInt64 regionLoadInt64)
        (regionLoadInt32 regionLoadInt32)
        (regionLoadInt16 regionLoadInt16)
        (regionLoadFloat regionLoadFloat)
        (regionLoadBlob regionLoadBlob)
        (regionId regionId)
        (regionGrow regionGrow)
        (principalOfBlob principalOfBlob)
        (principalOfActor principalOfActor)
        (popcntNat8 popcntNat8)
        (popcntNat64 popcntNat64)
        (popcntNat32 popcntNat32)
        (popcntNat16 popcntNat16)
        (popcntInt8 popcntInt8)
        (popcntInt64 popcntInt64)
        (popcntInt32 popcntInt32)
        (popcntInt16 popcntInt16)
        (performanceCounter performanceCounter)
        (natToNat8 natToNat8)
        (natToNat64 natToNat64)
        (natToNat32 natToNat32)
        (natToNat16 natToNat16)
        (nat8ToNat16 nat8ToNat16)
        (nat8ToNat nat8ToNat)
        (nat8ToInt8 nat8ToInt8)
        (nat64ToNat32 nat64ToNat32)
        (nat64ToNat nat64ToNat)
        (nat64ToInt64 nat64ToInt64)
        (nat32ToNat64 nat32ToNat64)
        (nat32ToNat16 nat32ToNat16)
        (nat32ToNat nat32ToNat)
        (nat32ToInt32 nat32ToInt32)
        (nat32ToChar nat32ToChar)
        (nat16ToNat8 nat16ToNat8)
        (nat16ToNat32 nat16ToNat32)
        (nat16ToNat nat16ToNat)
        (nat16ToInt16 nat16ToInt16)
        (log log)
        (isController isController)
        (intToNat8Wrap intToNat8Wrap)
        (intToNat64Wrap intToNat64Wrap)
        (intToNat32Wrap intToNat32Wrap)
        (intToNat16Wrap intToNat16Wrap)
        (intToInt8Wrap intToInt8Wrap)
        (intToInt8 intToInt8)
        (intToInt64Wrap intToInt64Wrap)
        (intToInt64 intToInt64)
        (intToInt32Wrap intToInt32Wrap)
        (intToInt32 intToInt32)
        (intToInt16Wrap intToInt16Wrap)
        (intToInt16 intToInt16)
        (intToFloat intToFloat)
        (int8ToNat8 int8ToNat8)
        (int8ToInt16 int8ToInt16)
        (int8ToInt int8ToInt)
        (int64ToNat64 int64ToNat64)
        (int64ToInt32 int64ToInt32)
        (int64ToInt int64ToInt)
        (int64ToFloat int64ToFloat)
        (int32ToNat32 int32ToNat32)
        (int32ToInt64 int32ToInt64)
        (int32ToInt16 int32ToInt16)
        (int32ToInt int32ToInt)
        (int16ToNat16 int16ToNat16)
        (int16ToInt8 int16ToInt8)
        (int16ToInt32 int16ToInt32)
        (int16ToInt int16ToInt)
        (idlHash idlHash)
        (hashBlob hashBlob)
        (getCertificate getCertificate)
        (forall forall)
        (floatTrunc floatTrunc)
        (floatToText floatToText)
        (floatToInt64 floatToInt64)
        (floatToInt floatToInt)
        (floatToFormattedText floatToFormattedText)
        (floatSqrt floatSqrt)
        (floatNearest floatNearest)
        (floatMin floatMin)
        (floatMax floatMax)
        (floatFloor floatFloor)
        (floatCopySign floatCopySign)
        (floatCeil floatCeil)
        (floatAbs floatAbs)
        (exp exp)
        (exists exists)
        (errorMessage errorMessage)
        (errorCode errorCode)
        (error error)
        (encodeUtf8 encodeUtf8)
        (decodeUtf8 decodeUtf8)
        (debugPrintNat debugPrintNat)
        (debugPrintInt debugPrintInt)
        (debugPrintChar debugPrintChar)
        (debugPrint debugPrint)
        (cyclesRefunded cyclesRefunded)
        (cyclesBalance cyclesBalance)
        (cyclesAvailable cyclesAvailable)
        (cyclesAdd cyclesAdd)
        (cyclesAccept cyclesAccept)
        (ctzNat8 ctzNat8)
        (ctzNat64 ctzNat64)
        (ctzNat32 ctzNat32)
        (ctzNat16 ctzNat16)
        (ctzInt8 ctzInt8)
        (ctzInt64 ctzInt64)
        (ctzInt32 ctzInt32)
        (ctzInt16 ctzInt16)
        (createActor createActor)
        (cos cos)
        (clzNat8 clzNat8)
        (clzNat64 clzNat64)
        (clzNat32 clzNat32)
        (clzNat16 clzNat16)
        (clzInt8 clzInt8)
        (clzInt64 clzInt64)
        (clzInt32 clzInt32)
        (clzInt16 clzInt16)
        (charToUpper charToUpper)
        (charToText charToText)
        (charToNat32 charToNat32)
        (charToLower charToLower)
        (charIsWhitespace charIsWhitespace)
        (charIsUppercase charIsUppercase)
        (charIsLowercase charIsLowercase)
        (charIsAlphabetic charIsAlphabetic)
        (canisterVersion canisterVersion)
        (cancelTimer cancelTimer)
        (call_raw call_raw)
        (btstNat8 btstNat8)
        (btstNat64 btstNat64)
        (btstNat32 btstNat32)
        (btstNat16 btstNat16)
        (btstInt8 btstInt8)
        (btstInt64 btstInt64)
        (btstInt32 btstInt32)
        (btstInt16 btstInt16)
        (blobToArrayMut blobToArrayMut)
        (blobToArray blobToArray)
        (blobOfPrincipal blobOfPrincipal)
        (blobCompare blobCompare)
        (arrayToBlob arrayToBlob)
        (arrayMutToBlob arrayMutToBlob)
        (arctan2 arctan2)
        (arctan arctan)
        (arcsin arcsin)
        (arccos arccos)
        (abs abs)
        (Types Types)
        (Ret Ret)
        (Array_tabulate Array_tabulate)
        (Array_init Array_init)
        module {Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; Ret : <T>() -> T; Types : module {}; abs : Int -> Nat; arccos : Float -> Float; arcsin : Float -> Float; arctan : Float -> Float; arctan2 : (Float, Float) -> Float; arrayMutToBlob : [var Nat8] -> Blob; arrayToBlob : [Nat8] -> Blob; blobCompare : (Blob, Blob) -> Int8; blobOfPrincipal : Principal -> Blob; blobToArray : Blob -> [Nat8]; blobToArrayMut : Blob -> [var Nat8]; btstInt16 : (Int16, Int16) -> Bool; btstInt32 : (Int32, Int32) -> Bool; btstInt64 : (Int64, Int64) -> Bool; btstInt8 : (Int8, Int8) -> Bool; btstNat16 : (Nat16, Nat16) -> Bool; btstNat32 : (Nat32, Nat32) -> Bool; btstNat64 : (Nat64, Nat64) -> Bool; btstNat8 : (Nat8, Nat8) -> Bool; call_raw : (Principal, Text, Blob) -> async Blob; cancelTimer : Nat -> (); canisterVersion : () -> Nat64; charIsAlphabetic : Char -> Bool; charIsLowercase : Char -> Bool; charIsUppercase : Char -> Bool; charIsWhitespace : Char -> Bool; charToLower : Char -> Char; charToNat32 : Char -> Nat32; charToText : Char -> Text; charToUpper : Char -> Char; clzInt16 : Int16 -> Int16; clzInt32 : Int32 -> Int32; clzInt64 : Int64 -> Int64; clzInt8 : Int8 -> Int8; clzNat16 : Nat16 -> Nat16; clzNat32 : Nat32 -> Nat32; clzNat64 : Nat64 -> Nat64; clzNat8 : Nat8 -> Nat8; cos : Float -> Float; createActor : (Blob, Blob) -> async Principal; ctzInt16 : Int16 -> Int16; ctzInt32 : Int32 -> Int32; ctzInt64 : Int64 -> Int64; ctzInt8 : Int8 -> Int8; ctzNat16 : Nat16 -> Nat16; ctzNat32 : Nat32 -> Nat32; ctzNat64 : Nat64 -> Nat64; ctzNat8 : Nat8 -> Nat8; cyclesAccept : <system>Nat -> Nat; cyclesAdd : <system>Nat -> (); cyclesAvailable : () -> Nat; cyclesBalance : () -> Nat; cyclesRefunded : () -> Nat; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); decodeUtf8 : Blob -> ?Text; encodeUtf8 : Text -> Blob; error : Text -> Error; errorCode : Error -> ErrorCode__1; errorMessage : Error -> Text; exists : <T>(T -> Bool) -> Bool; exp : Float -> Float; floatAbs : Float -> Float; floatCeil : Float -> Float; floatCopySign : (Float, Float) -> Float; floatFloor : Float -> Float; floatMax : (Float, Float) -> Float; floatMin : (Float, Float) -> Float; floatNearest : Float -> Float; floatSqrt : Float -> Float; floatToFormattedText : (Float, Nat8, Nat8) -> Text; floatToInt : Float -> Int; floatToInt64 : Float -> Int64; floatToText : Float -> Text; floatTrunc : Float -> Float; forall : <T>(T -> Bool) -> Bool; getCertificate : () -> ?Blob; hashBlob : Blob -> Nat32; idlHash : Text -> Nat32; int16ToInt : Int16 -> Int; int16ToInt32 : Int16 -> Int32; int16ToInt8 : Int16 -> Int8; int16ToNat16 : Int16 -> Nat16; int32ToInt : Int32 -> Int; int32ToInt16 : Int32 -> Int16; int32ToInt64 : Int32 -> Int64; int32ToNat32 : Int32 -> Nat32; int64ToFloat : Int64 -> Float; int64ToInt : Int64 -> Int; int64ToInt32 : Int64 -> Int32; int64ToNat64 : Int64 -> Nat64; int8ToInt : Int8 -> Int; int8ToInt16 : Int8 -> Int16; int8ToNat8 : Int8 -> Nat8; intToFloat : Int -> Float; intToInt16 : Int -> Int16; intToInt16Wrap : Int -> Int16; intToInt32 : Int -> Int32; intToInt32Wrap : Int -> Int32; intToInt64 : Int -> Int64; intToInt64Wrap : Int -> Int64; intToInt8 : Int -> Int8; intToInt8Wrap : Int -> Int8; intToNat16Wrap : Int -> Nat16; intToNat32Wrap : Int -> Nat32; intToNat64Wrap : Int -> Nat64; intToNat8Wrap : Int -> Nat8; isController : Principal -> Bool; log : Float -> Float; nat16ToInt16 : Nat16 -> Int16; nat16ToNat : Nat16 -> Nat; nat16ToNat32 : Nat16 -> Nat32; nat16ToNat8 : Nat16 -> Nat8; nat32ToChar : Nat32 -> Char; nat32ToInt32 : Nat32 -> Int32; nat32ToNat : Nat32 -> Nat; nat32ToNat16 : Nat32 -> Nat16; nat32ToNat64 : Nat32 -> Nat64; nat64ToInt64 : Nat64 -> Int64; nat64ToNat : Nat64 -> Nat; nat64ToNat32 : Nat64 -> Nat32; nat8ToInt8 : Nat8 -> Int8; nat8ToNat : Nat8 -> Nat; nat8ToNat16 : Nat8 -> Nat16; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; performanceCounter : Nat32 -> Nat64; popcntInt16 : Int16 -> Int16; popcntInt32 : Int32 -> Int32; popcntInt64 : Int64 -> Int64; popcntInt8 : Int8 -> Int8; popcntNat16 : Nat16 -> Nat16; popcntNat32 : Nat32 -> Nat32; popcntNat64 : Nat64 -> Nat64; popcntNat8 : Nat8 -> Nat8; principalOfActor : (actor {}) -> Principal; principalOfBlob : Blob -> Principal; regionGrow : (Region, Nat64) -> Nat64; regionId : Region -> Nat; regionLoadBlob : (Region, Nat64, Nat) -> Blob; regionLoadFloat : (Region, Nat64) -> Float; regionLoadInt16 : (Region, Nat64) -> Int16; regionLoadInt32 : (Region, Nat64) -> Int32; regionLoadInt64 : (Region, Nat64) -> Int64; regionLoadInt8 : (Region, Nat64) -> Int8; regionLoadNat16 : (Region, Nat64) -> Nat16; regionLoadNat32 : (Region, Nat64) -> Nat32; regionLoadNat64 : (Region, Nat64) -> Nat64; regionLoadNat8 : (Region, Nat64) -> Nat8; regionNew : () -> Region; regionSize : Region -> Nat64; regionStoreBlob : (Region, Nat64, Blob) -> (); regionStoreFloat : (Region, Nat64, Float) -> (); regionStoreInt16 : (Region, Nat64, Int16) -> (); regionStoreInt32 : (Region, Nat64, Int32) -> (); regionStoreInt64 : (Region, Nat64, Int64) -> (); regionStoreInt8 : (Region, Nat64, Int8) -> (); regionStoreNat16 : (Region, Nat64, Nat16) -> (); regionStoreNat32 : (Region, Nat64, Nat32) -> (); regionStoreNat64 : (Region, Nat64, Nat64) -> (); regionStoreNat8 : (Region, Nat64, Nat8) -> (); rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_collector_instructions : () -> Nat; rts_heap_size : () -> Nat; rts_logical_stable_memory_size : () -> Nat; rts_max_live_size : () -> Nat; rts_max_stack_size : () -> Nat; rts_memory_size : () -> Nat; rts_mutator_instructions : () -> Nat; rts_reclaimed : () -> Nat; rts_stable_memory_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; setCertifiedData : Blob -> (); setTimer : <system>(Nat64, Bool, () -> async ()) -> Nat; shiftLeft : (Nat, Nat32) -> Nat; shiftRight : (Nat, Nat32) -> Nat; sin : Float -> Float; stableMemoryGrow : Nat64 -> Nat64; stableMemoryLoadBlob : (Nat64, Nat) -> Blob; stableMemoryLoadFloat : Nat64 -> Float; stableMemoryLoadInt16 : Nat64 -> Int16; stableMemoryLoadInt32 : Nat64 -> Int32; stableMemoryLoadInt64 : Nat64 -> Int64; stableMemoryLoadInt8 : Nat64 -> Int8; stableMemoryLoadNat16 : Nat64 -> Nat16; stableMemoryLoadNat32 : Nat64 -> Nat32; stableMemoryLoadNat64 : Nat64 -> Nat64; stableMemoryLoadNat8 : Nat64 -> Nat8; stableMemorySize : () -> Nat64; stableMemoryStoreBlob : (Nat64, Blob) -> (); stableMemoryStoreFloat : (Nat64, Float) -> (); stableMemoryStoreInt16 : (Nat64, Int16) -> (); stableMemoryStoreInt32 : (Nat64, Int32) -> (); stableMemoryStoreInt64 : (Nat64, Int64) -> (); stableMemoryStoreInt8 : (Nat64, Int8) -> (); stableMemoryStoreNat16 : (Nat64, Nat16) -> (); stableMemoryStoreNat32 : (Nat64, Nat32) -> (); stableMemoryStoreNat64 : (Nat64, Nat64) -> (); stableMemoryStoreNat8 : (Nat64, Nat8) -> (); stableVarQuery : () -> shared query () -> async {size : Nat64}; tan : Float -> Float; textCompare : (Text, Text) -> Int8; textLowercase : Text -> Text; textUppercase : Text -> Text; time : () -> Nat64; trap : Text -> None__2}
      )
    )
  )
  (LetD
    (ObjP
      (debugPrint (VarP debugPrint))
      (error (VarP error))
      (errorMessage (VarP errorMessage))
      (call_raw (VarP call_raw))
      (principalOfActor (VarP principalOfActor))
    )
    (VarE file$@prim)
  )
  (LetD
    (VarP $__motoko_stable_var_info)
    (FuncE
      $__motoko_stable_var_info
      Shared Query
      Promises
      (T1__4 Any)
      {size : Nat64}
      (PrimE
        (CPSAsync T1__4)
        (FuncE
          $lambda
          Local
          Returns
          (T2__2 Any)
          (params $k/10 $r/5 $b/4)
          ()
          (PrimE
            (CallPrim)
            (VarE $k/10)
            (BlockE
              (LetD (VarP $$caller/0/0) (PrimE ICCallerPrim))
              (LetD
                WildP
                (PrimE
                  AssertPrim
                  (IfE
                    (PrimE
                      (RelPrim Principal EqOp)
                      (VarE $$caller/0/0)
                      (PrimE (SelfRef Principal))
                    )
                    (LitE (BoolLit true))
                    (PrimE is_controller (VarE $$caller/0/0))
                  )
                )
              )
              (LetD
                (VarP $$size/0/0)
                (PrimE (ICStableSize memory {}) (NewObjE Memory memory {}))
              )
              (NewObjE Object (size $$size/0/0) {size : Nat64})
            )
          )
        )
      )
    )
  )
  (VarD $state/0 ?(memory {}) (PrimE OptPrim (PrimE (ICStableRead memory {}))))
  (LetD
    (VarP $getState/0)
    (FuncE
      $getState/0
      Local
      Returns
      memory {}
      (SwitchE
        (VarE $state/0)
        (case (LitP NullLit) (LoopE (PrimE TupPrim)))
        (case (OptP (VarP $v/0)) (VarE $v/0))
      )
    )
  )
  (LetD
    (VarP foo)
    (FuncE
      foo
      Shared
      Returns
      ($__267 Any)
      ()
      (BlockE
        (LetD
          WildP
          (PrimE
            (CPSAsync $__267)
            (FuncE
              $lambda
              Local
              Returns
              ($foo__2 Any)
              (params $k/11 $r/6 $b/5)
              ()
              (DeclareE
                $$thunk/0/0
                (BlockE
                  (LetD
                    (VarP $v/35)
                    (FuncE
                      $cleanup
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT0)))
                    )
                  )
                  (LetD WildP (DefineE $$thunk/0/0 Const (VarE $v/35)))
                  (BlockE
                    (LetD (VarP $u/45) (PrimE TupPrim))
                    (BlockE
                      (LetD (VarP $u/46) (PrimE TupPrim))
                      (BlockE
                        (LetD
                          (VarP $k/12)
                          (FuncE
                            $k/12
                            Local
                            Returns
                            (params $v/36)
                            ()
                            (BlockE
                              (LetD WildP (LitE (IntLit 7_771)))
                              (LetD
                                WildP
                                (PrimE
                                  (CallPrim)
                                  (VarE $$thunk/0/0)
                                  (PrimE TupPrim)
                                )
                              )
                              (PrimE (CallPrim) (VarE $r/6) (VarE $v/36))
                            )
                          )
                        )
                        (BlockE
                          (LetD
                            (VarP $k/13)
                            (FuncE
                              $k/13
                              Local
                              Returns
                              ()
                              (BlockE
                                (LetD (VarP $v/37) (PrimE TupPrim))
                                (BlockE
                                  (LetD WildP (LitE (IntLit 7_771)))
                                  (LetD
                                    WildP
                                    (PrimE
                                      (CallPrim)
                                      (VarE $$thunk/0/0)
                                      (PrimE TupPrim)
                                    )
                                  )
                                  (PrimE (CallPrim) (VarE $k/11) (VarE $v/37))
                                )
                              )
                            )
                          )
                          (DeclareE
                            $$thunk/1/0
                            (BlockE
                              (LetD
                                (VarP $v/38)
                                (FuncE
                                  $cleanup
                                  Local
                                  Returns
                                  ()
                                  (PrimE
                                    (CallPrim)
                                    (VarE debugPrint)
                                    (LitE (TextLit OUT1))
                                  )
                                )
                              )
                              (LetD
                                WildP
                                (DefineE $$thunk/1/0 Const (VarE $v/38))
                              )
                              (BlockE
                                (LetD (VarP $u/47) (PrimE TupPrim))
                                (BlockE
                                  (LetD (VarP $u/48) (PrimE TupPrim))
                                  (BlockE
                                    (LetD
                                      (VarP $k/14)
                                      (FuncE
                                        $k/14
                                        Local
                                        Returns
                                        (params $v/39)
                                        ()
                                        (BlockE
                                          (LetD WildP (LitE (IntLit 7_772)))
                                          (LetD
                                            WildP
                                            (PrimE
                                              (CallPrim)
                                              (VarE $$thunk/0/0)
                                              (PrimE TupPrim)
                                            )
                                          )
                                          (PrimE
                                            (CallPrim)
                                            (VarE $r/6)
                                            (VarE $v/39)
                                          )
                                        )
                                      )
                                    )
                                    (BlockE
                                      (LetD
                                        (VarP $k/15)
                                        (FuncE
                                          $k/15
                                          Local
                                          Returns
                                          ()
                                          (BlockE
                                            (LetD (VarP $v/40) (PrimE TupPrim))
                                            (BlockE
                                              (LetD WildP (LitE (IntLit 7_771)))
                                              (LetD
                                                WildP
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE $$thunk/1/0)
                                                  (PrimE TupPrim)
                                                )
                                              )
                                              (PrimE
                                                (CallPrim)
                                                (VarE $k/13)
                                                (VarE $v/40)
                                              )
                                            )
                                          )
                                        )
                                      )
                                      (DeclareE
                                        $$thunk/2/0
                                        (BlockE
                                          (LetD
                                            (VarP $v/41)
                                            (FuncE
                                              $cleanup
                                              Local
                                              Returns
                                              ()
                                              (PrimE
                                                (CallPrim)
                                                (VarE debugPrint)
                                                (LitE (TextLit OUT2))
                                              )
                                            )
                                          )
                                          (LetD
                                            WildP
                                            (DefineE
                                              $$thunk/2/0
                                              Const
                                              (VarE $v/41)
                                            )
                                          )
                                          (BlockE
                                            (LetD (VarP $u/49) (PrimE TupPrim))
                                            (BlockE
                                              (LetD
                                                (VarP $u/50)
                                                (PrimE TupPrim)
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $k/16)
                                                  (FuncE
                                                    $k/16
                                                    Local
                                                    Returns
                                                    (params $v/42)
                                                    ()
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (LitE (IntLit 7_773))
                                                      )
                                                      (LetD
                                                        WildP
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $$thunk/0/0)
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE $r/6)
                                                        (VarE $v/42)
                                                      )
                                                    )
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $k/17)
                                                    (FuncE
                                                      $k/17
                                                      Local
                                                      Returns
                                                      ()
                                                      (BlockE
                                                        (LetD
                                                          (VarP $v/43)
                                                          (PrimE TupPrim)
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            WildP
                                                            (LitE
                                                              (IntLit 7_771)
                                                            )
                                                          )
                                                          (LetD
                                                            WildP
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE $$thunk/2/0)
                                                              (PrimE TupPrim)
                                                            )
                                                          )
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $k/15)
                                                            (VarE $v/43)
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $k/18)
                                                      (FuncE
                                                        $k/18
                                                        Local
                                                        Returns
                                                        ()
                                                        (BlockE
                                                          (LetD
                                                            (VarP $v/44)
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (LitE
                                                                (IntLit 7_771)
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                (CallPrim)
                                                                (VarE
                                                                  $$thunk/0/0
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE $b/5)
                                                              (VarE $v/44)
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $k/19)
                                                        (FuncE
                                                          $k/19
                                                          Local
                                                          Returns
                                                          (params $v/45)
                                                          ()
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (LitE
                                                                (IntLit 7_774)
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                (CallPrim)
                                                                (VarE
                                                                  $$thunk/0/0
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE $r/6)
                                                              (VarE $v/45)
                                                            )
                                                          )
                                                        )
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $k/20)
                                                          (FuncE
                                                            $k/20
                                                            Local
                                                            Returns
                                                            ()
                                                            (BlockE
                                                              (LetD
                                                                (VarP $v/46)
                                                                (PrimE TupPrim)
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  WildP
                                                                  (VarE $v/46)
                                                                )
                                                                (BlockE
                                                                  (LetD
                                                                    (VarP $u/51)
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                  (BlockE
                                                                    (LetD
                                                                      (VarP
                                                                        $u/52
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        $k/17
                                                                      )
                                                                      (IfE
                                                                        (LitE
                                                                          (BoolLit
                                                                            true
                                                                          )
                                                                        )
                                                                        (PrimE
                                                                          RetPrim
                                                                          (BlockE
                                                                            (LetD
                                                                              (VarP
                                                                                $u/54
                                                                              )
                                                                              (PrimE
                                                                                TupPrim
                                                                              )
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                WildP
                                                                                (LitE
                                                                                  (IntLit
                                                                                    7_772
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                WildP
                                                                                (PrimE
                                                                                  (CallPrim
                                                                                  )
                                                                                  (VarE
                                                                                    $$thunk/0/0
                                                                                  )
                                                                                  (PrimE
                                                                                    TupPrim
                                                                                  )
                                                                                )
                                                                              )
                                                                              (PrimE
                                                                                (CallPrim
                                                                                )
                                                                                (VarE
                                                                                  $k/11
                                                                                )
                                                                                (VarE
                                                                                  $u/54
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                        (PrimE
                                                                          RetPrim
                                                                          (BlockE
                                                                            (LetD
                                                                              (VarP
                                                                                $u/53
                                                                              )
                                                                              (PrimE
                                                                                TupPrim
                                                                              )
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                WildP
                                                                                (LitE
                                                                                  (IntLit
                                                                                    7_771
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                WildP
                                                                                (PrimE
                                                                                  (CallPrim
                                                                                  )
                                                                                  (VarE
                                                                                    $$thunk/0/0
                                                                                  )
                                                                                  (PrimE
                                                                                    TupPrim
                                                                                  )
                                                                                )
                                                                              )
                                                                              (PrimE
                                                                                (CallPrim
                                                                                )
                                                                                (VarE
                                                                                  $k/11
                                                                                )
                                                                                (VarE
                                                                                  $u/53
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/55)
                                                            (PrimE
                                                              (CPSAsync $foo__2)
                                                              (FuncE
                                                                $lambda
                                                                Local
                                                                Returns
                                                                ($@anon-async-8.29__2
                                                                  Any
                                                                )
                                                                (params
                                                                  $k/21
                                                                  $r/7
                                                                  $b/6
                                                                )
                                                                ()
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE $k/21)
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                          (IfE
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE
                                                                @call_succeeded
                                                              )
                                                              (PrimE TupPrim)
                                                            )
                                                            (PrimE
                                                              (CPSAwait
                                                                () -> ()
                                                              )
                                                              (VarE $u/55)
                                                              (PrimE
                                                                TupPrim
                                                                (VarE $k/20)
                                                                (VarE $k/19)
                                                                (VarE $k/18)
                                                              )
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $u/56)
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE
                                                                    @call_error
                                                                  )
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  WildP
                                                                  (LitE
                                                                    (IntLit
                                                                      7_775
                                                                    )
                                                                  )
                                                                )
                                                                (LetD
                                                                  WildP
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      $$thunk/0/0
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE $r/6)
                                                                  (VarE $u/56)
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim)
      )
    )
  )
  (LetD WildP (AssignE (VarLE $state/0) (LitE NullLit)))
  (foo foo)
  (__motoko_stable_var_info $__motoko_stable_var_info)
  (System
    (Pre (PrimE (ICStableWrite memory {}) (NewObjE Memory memory {})))
    (Post (PrimE TupPrim))
    (Heartbeat (PrimE TupPrim))
    (Timer
      (BlockE
        (LetD
          (VarP $r/0)
          (FuncE $r/0 Local Returns (params $e/0) () (PrimE TupPrim))
        )
        (BlockE
          (LetD (VarP $v/2) (VarE @timer_helper))
          (BlockE
            (LetD (VarP $u/0) (PrimE (CallPrim ()) (VarE $v/2) (PrimE TupPrim)))
            (IfE
              (PrimE (CallPrim) (VarE @call_succeeded) (PrimE TupPrim))
              (BlockE
                (LetD WildP (VarE $u/0))
                (BlockE
                  (LetD (VarP $u/1) (PrimE TupPrim))
                  (BlockE
                    (LetD (VarP $u/2) (PrimE TupPrim))
                    (BlockE (LetD (VarP $u/3) (PrimE TupPrim)) (PrimE TupPrim))
                  )
                )
              )
              (PrimE
                (CallPrim)
                (VarE $r/0)
                (PrimE (CallPrim) (VarE @call_error) (PrimE TupPrim))
              )
            )
          )
        )
      )
    )
    (Inspect (PrimE TupPrim))
  )
  actor {foo : shared () -> ()}
)
(ActorU
  (VarD @cycles Nat (LitE (NatLit 0)))
  (LetD
    (VarP @add_cycles)
    (FuncE
      @add_cycles
      Local
      Returns
      ($__2256 Any)
      ()
      (BlockE
        (LetD (VarP cycles) (VarE @cycles))
        (LetD WildP (PrimE (CallPrim) (VarE @reset_cycles) (PrimE TupPrim)))
        (IfE
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
          (PrimE SystemCyclesAddPrim (VarE cycles))
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @reset_cycles)
    (FuncE
      @reset_cycles
      Local
      Returns
      ()
      (AssignE (VarLE @cycles) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @immut_array_get)
    (FuncE
      @immut_array_get
      Local
      Returns
      (A__198 Any)
      (params xs)
      Nat -> A__198
      (FuncE
        @anon-func-39.3
        Local
        Returns
        (params n)
        A__198
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @mut_array_get)
    (FuncE
      @mut_array_get
      Local
      Returns
      (A__199 Any)
      (params xs)
      Nat -> A__199
      (FuncE
        @anon-func-41.3
        Local
        Returns
        (params n)
        A__199
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @immut_array_size)
    (FuncE
      @immut_array_size
      Local
      Returns
      (A__200 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-43.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_size)
    (FuncE
      @mut_array_size
      Local
      Returns
      (A__201 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-45.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_put)
    (FuncE
      @mut_array_put
      Local
      Returns
      (A__202 Any)
      (params xs)
      (Nat, A__202) -> ()
      (FuncE
        @anon-func-47.3
        Local
        Returns
        (params n x)
        ()
        (AssignE (IdxLE (VarE xs) (VarE n)) (VarE x))
      )
    )
  )
  (LetD
    (VarP @immut_array_keys)
    (FuncE
      @immut_array_keys
      Local
      Returns
      (A__203 Any)
      (params xs)
      () -> @Iter__2<Nat>
      (FuncE
        @anon-func-49.3
        Local
        Returns
        @Iter__2<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_keys)
    (FuncE
      @mut_array_keys
      Local
      Returns
      (A__204 Any)
      (params xs)
      () -> @Iter__2<Nat>
      (FuncE
        @anon-func-55.3
        Local
        Returns
        @Iter__2<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @immut_array_vals)
    (FuncE
      @immut_array_vals
      Local
      Returns
      (A__205 Any)
      (params xs)
      () -> @Iter__2<A__205>
      (FuncE
        @anon-func-61.3
        Local
        Returns
        @Iter__2<A__205>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__205
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__205})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_vals)
    (FuncE
      @mut_array_vals
      Local
      Returns
      (A__206 Any)
      (params xs)
      () -> @Iter__2<A__206>
      (FuncE
        @anon-func-67.3
        Local
        Returns
        @Iter__2<A__206>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__206
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__206})
        )
      )
    )
  )
  (LetD
    (VarP @blob_size)
    (FuncE
      @blob_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-73.3 Local Returns Nat (PrimE blob_size (VarE xs)))
    )
  )
  (LetD
    (VarP @blob_vals)
    (FuncE
      @blob_vals
      Local
      Returns
      (params xs)
      () -> @Iter__2<Nat8>
      (FuncE
        @anon-func-75.3
        Local
        Returns
        @Iter__2<Nat8>
        (BlockE
          (LetD (VarP i) (PrimE blob_vals_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat8
              (IfE
                (PrimE blob_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE blob_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat8})
        )
      )
    )
  )
  (LetD
    (VarP @text_size)
    (FuncE
      @text_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-86.3 Local Returns Nat (PrimE text_len (VarE xs)))
    )
  )
  (LetD
    (VarP @text_chars)
    (FuncE
      @text_chars
      Local
      Returns
      (params xs)
      () -> @Iter__2<Char>
      (FuncE
        @anon-func-88.3
        Local
        Returns
        @Iter__2<Char>
        (BlockE
          (LetD (VarP i) (PrimE text_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Char
              (IfE
                (PrimE text_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE text_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Char})
        )
      )
    )
  )
  (LetD
    (VarP @text_of_num)
    (FuncE
      @text_of_num
      Local
      Returns
      (params x base sep digits)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit )))
        (VarD n Nat (VarE x))
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat EqOp) (VarE n) (LitE (NatLit 0)))
            (PrimE RetPrim (LitE (TextLit 0)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD
          WildP
          (LabelE
            $done/0
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat GtOp) (VarE n) (LitE (NatLit 0)))
                (BlockE
                  (LetD
                    (VarP rem)
                    (PrimE (BinPrim Nat ModOp) (VarE n) (VarE base))
                  )
                  (LetD
                    WildP
                    (IfE
                      (IfE
                        (PrimE (RelPrim Nat GtOp) (VarE sep) (LitE (NatLit 0)))
                        (PrimE (RelPrim Nat EqOp) (VarE i) (VarE sep))
                        (LitE (BoolLit false))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE text)
                            (PrimE
                              (BinPrim Text CatOp)
                              (LitE (TextLit _))
                              (VarE text)
                            )
                          )
                        )
                        (AssignE (VarLE i) (LitE (NatLit 0)))
                      )
                      (PrimE TupPrim)
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE text)
                      (PrimE
                        (BinPrim Text CatOp)
                        (PrimE (CallPrim) (VarE digits) (VarE rem))
                        (VarE text)
                      )
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE n)
                      (PrimE (BinPrim Nat DivOp) (VarE n) (VarE base))
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/0) (PrimE TupPrim))
              )
            )
          )
        )
        (VarE text)
      )
    )
  )
  (LetD
    (VarP @left_pad)
    (FuncE
      @left_pad
      Local
      Returns
      (params pad char t)
      Text
      (IfE
        (PrimE (RelPrim Nat GtOp) (VarE pad) (PrimE text_len (VarE t)))
        (BlockE
          (VarD
            i
            Nat
            (PrimE (BinPrim Nat SubOp) (VarE pad) (PrimE text_len (VarE t)))
          )
          (VarD text Text (VarE t))
          (LetD
            WildP
            (LabelE
              $done/1
              ()
              (LoopE
                (IfE
                  (PrimE (RelPrim Nat GtOp) (VarE i) (LitE (NatLit 0)))
                  (BlockE
                    (LetD
                      WildP
                      (AssignE
                        (VarLE text)
                        (PrimE (BinPrim Text CatOp) (VarE char) (VarE text))
                      )
                    )
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat SubOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE (BreakPrim $done/1) (PrimE TupPrim))
                )
              )
            )
          )
          (VarE text)
        )
        (VarE t)
      )
    )
  )
  (LetD
    (VarP @digits_dec)
    (FuncE
      @digits_dec
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE (BinPrim Int AddOp) (VarE x) (LitE (IntLit 48)))
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Nat)
    (FuncE
      @text_of_Nat
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_num)
        (PrimE
          TupPrim
          (VarE x)
          (LitE (NatLit 10))
          (LitE (NatLit 3))
          (VarE @digits_dec)
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Int)
    (FuncE
      @text_of_Int
      Local
      Returns
      (params x)
      Text
      (IfE
        (PrimE (RelPrim Int EqOp) (VarE x) (LitE (IntLit 0)))
        (LitE (TextLit 0))
        (PrimE
          (BinPrim Text CatOp)
          (IfE
            (PrimE (RelPrim Int LtOp) (VarE x) (LitE (IntLit 0)))
            (LitE (TextLit -))
            (LitE (TextLit +))
          )
          (PrimE (CallPrim) (VarE @text_of_Nat) (PrimE abs (VarE x)))
        )
      )
    )
  )
  (LetD
    (VarP @digits_hex)
    (FuncE
      @digits_hex
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE
              (BinPrim Int AddOp)
              (VarE x)
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE x) (LitE (NatLit 10)))
                (LitE (IntLit 48))
                (LitE (IntLit 55))
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @int64ToInt)
    (FuncE
      @int64ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int64 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int32ToInt)
    (FuncE
      @int32ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int32 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int16ToInt)
    (FuncE
      @int16ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int16 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int8ToInt)
    (FuncE
      @int8ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int8 Int) (VarE n))
    )
  )
  (LetD
    (VarP @nat64ToNat)
    (FuncE
      @nat64ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat64 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat32ToNat)
    (FuncE
      @nat32ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat32 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat16ToNat)
    (FuncE
      @nat16ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat16 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat8ToNat)
    (FuncE
      @nat8ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat8 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @text_of_Nat8)
    (FuncE
      @text_of_Nat8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat8ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat16)
    (FuncE
      @text_of_Nat16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat16ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat32)
    (FuncE
      @text_of_Nat32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat32ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat64)
    (FuncE
      @text_of_Nat64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat64ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int8)
    (FuncE
      @text_of_Int8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int8ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int16)
    (FuncE
      @text_of_Int16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int16ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int32)
    (FuncE
      @text_of_Int32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int32ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int64)
    (FuncE
      @text_of_Int64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int64ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Float)
    (FuncE
      @text_of_Float
      Local
      Returns
      (params x)
      Text
      (PrimE Float->Text (VarE x))
    )
  )
  (LetD
    (VarP @text_of_Bool)
    (FuncE
      @text_of_Bool
      Local
      Returns
      (params b)
      Text
      (IfE (VarE b) (LitE (TextLit true)) (LitE (TextLit false)))
    )
  )
  (LetD
    (VarP @text_of_Text)
    (FuncE
      @text_of_Text
      Local
      Returns
      (params t)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE (BinPrim Text CatOp) (LitE (TextLit ")) (VarE t))
        (LitE (TextLit "))
      )
    )
  )
  (LetD
    (VarP @text_of_Char)
    (FuncE
      @text_of_Char
      Local
      Returns
      (params c)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE
          (BinPrim Text CatOp)
          (LitE (TextLit '))
          (PrimE conv_Char_Text (VarE c))
        )
        (LitE (TextLit '))
      )
    )
  )
  (LetD
    (VarP @text_of_Blob)
    (FuncE
      @text_of_Blob
      Local
      Returns
      (params blob)
      Text
      (BlockE
        (VarD t Text (LitE (TextLit ")))
        (LetD
          WildP
          (BlockE
            (LetD
              (VarP $nxt/0)
              (PrimE
                (DotPrim next)
                (PrimE
                  (CallPrim)
                  (PrimE (CallPrim) (VarE @blob_vals) (VarE blob))
                  (PrimE TupPrim)
                )
              )
            )
            (LabelE
              $done/2
              ()
              (LoopE
                (SwitchE
                  (PrimE (CallPrim) (VarE $nxt/0) (PrimE TupPrim))
                  (case
                    (LitP NullLit)
                    (PrimE (BreakPrim $done/2) (PrimE TupPrim))
                  )
                  (case
                    (OptP (VarP b))
                    (AssignE
                      (VarLE t)
                      (PrimE
                        (BinPrim Text CatOp)
                        (VarE t)
                        (PrimE
                          (BinPrim Text CatOp)
                          (LitE (TextLit \))
                          (PrimE
                            (CallPrim)
                            (VarE @left_pad)
                            (PrimE
                              TupPrim
                              (LitE (NatLit 2))
                              (LitE (TextLit 0))
                              (PrimE
                                (CallPrim)
                                (VarE @text_of_num)
                                (PrimE
                                  TupPrim
                                  (PrimE (CallPrim) (VarE @nat8ToNat) (VarE b))
                                  (LitE (NatLit 16))
                                  (LitE (NatLit 0))
                                  (VarE @digits_hex)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE t)
            (PrimE (BinPrim Text CatOp) (VarE t) (LitE (TextLit ")))
          )
        )
        (PrimE RetPrim (VarE t))
      )
    )
  )
  (LetD
    (VarP @text_has_parens)
    (FuncE
      @text_has_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case (OptP (LitP (CharLit 40))) (LitE (BoolLit true)))
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_needs_parens)
    (FuncE
      @text_needs_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case
          (OptP
            (AltP
              (AltP
                (AltP (LitP (CharLit 43)) (LitP (CharLit 45)))
                (LitP (CharLit 63))
              )
              (LitP (CharLit 35))
            )
          )
          (LitE (BoolLit true))
        )
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_of_option)
    (FuncE
      @text_of_option
      Local
      Returns
      (T__521 Any)
      (params f x)
      Text
      (SwitchE
        (VarE x)
        (case
          (OptP (VarP y))
          (BlockE
            (LetD (VarP fy) (PrimE (CallPrim) (VarE f) (VarE y)))
            (IfE
              (PrimE (CallPrim) (VarE @text_needs_parens) (VarE fy))
              (PrimE
                (BinPrim Text CatOp)
                (PrimE (BinPrim Text CatOp) (LitE (TextLit ?()) (VarE fy))
                (LitE (TextLit )))
              )
              (PrimE (BinPrim Text CatOp) (LitE (TextLit ?)) (VarE fy))
            )
          )
        )
        (case (LitP NullLit) (LitE (TextLit null)))
      )
    )
  )
  (LetD
    (VarP @text_of_variant)
    (FuncE
      @text_of_variant
      Local
      Returns
      (T__522 Any)
      (params l f x)
      Text
      (BlockE
        (LetD (VarP fx) (PrimE (CallPrim) (VarE f) (VarE x)))
        (IfE
          (PrimE (RelPrim Text EqOp) (VarE fx) (LitE (TextLit ())))
          (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
          (IfE
            (PrimE (CallPrim) (VarE @text_has_parens) (VarE fx))
            (PrimE
              (BinPrim Text CatOp)
              (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
              (VarE fx)
            )
            (PrimE
              (BinPrim Text CatOp)
              (PrimE
                (BinPrim Text CatOp)
                (PrimE
                  (BinPrim Text CatOp)
                  (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
                  (LitE (TextLit ())
                )
                (VarE fx)
              )
              (LitE (TextLit )))
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_array)
    (FuncE
      @text_of_array
      Local
      Returns
      (T__523 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/0) (VarE xs))
            (LetD (VarP $last/0) (PrimE GetLastArrayOffset (VarE $arr/0)))
            (VarD $indx/0 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/0) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/3
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/0) (VarE $indx/0))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (AssignE (VarLE first) (LitE (BoolLit false)))
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/0) (VarE $last/0))
                      (PrimE (BreakPrim $done/3) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/0)
                        (PrimE NextArrayOffset (VarE $indx/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @text_of_array_mut)
    (FuncE
      @text_of_array_mut
      Local
      Returns
      (T__524 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [var)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/1) (VarE xs))
            (LetD (VarP $last/1) (PrimE GetLastArrayOffset (VarE $arr/1)))
            (VarD $indx/1 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/1) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/4
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/1) (VarE $indx/1))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (BlockE
                              (LetD
                                WildP
                                (AssignE (VarLE first) (LitE (BoolLit false)))
                              )
                              (AssignE
                                (VarLE text)
                                (PrimE
                                  (BinPrim Text CatOp)
                                  (VarE text)
                                  (LitE (TextLit  ))
                                )
                              )
                            )
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/1) (VarE $last/1))
                      (PrimE (BreakPrim $done/4) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/1)
                        (PrimE NextArrayOffset (VarE $indx/1))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @equal_array)
    (FuncE
      @equal_array
      Local
      Returns
      (T__525 Any)
      (params eq a b)
      Bool
      (BlockE
        (LetD
          WildP
          (IfE
            (PrimE
              (RelPrim Bool EqOp)
              (PrimE
                (RelPrim Nat EqOp)
                (PrimE array_len (VarE a))
                (PrimE array_len (VarE b))
              )
              (LitE (BoolLit false))
            )
            (PrimE RetPrim (LitE (BoolLit false)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD (VarP s) (PrimE array_len (VarE a)))
        (LetD
          WildP
          (LabelE
            $done/5
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE i) (VarE s))
                (BlockE
                  (LetD
                    WildP
                    (IfE
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (CallPrim)
                          (VarE eq)
                          (PrimE
                            TupPrim
                            (PrimE IdxPrim (VarE a) (VarE i))
                            (PrimE IdxPrim (VarE b) (VarE i))
                          )
                        )
                        (LitE (BoolLit false))
                      )
                      (PrimE RetPrim (LitE (BoolLit false)))
                      (PrimE TupPrim)
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/5) (PrimE TupPrim))
              )
            )
          )
        )
        (PrimE RetPrim (LitE (BoolLit true)))
      )
    )
  )
  (VarD @refund Nat (LitE (NatLit 0)))
  (LetD
    (VarP @reset_refund)
    (FuncE
      @reset_refund
      Local
      Returns
      ()
      (AssignE (VarLE @refund) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @getSystemRefund)
    (FuncE
      @getSystemRefund
      Local
      Returns
      @Refund__2
      (PrimE RetPrim (PrimE SystemCyclesRefundedPrim))
    )
  )
  (LetD (VarP @cleanup) (FuncE @cleanup Local Returns () (PrimE TupPrim)))
  (LetD
    (VarP @new_async)
    (FuncE
      @new_async
      Local
      Returns
      (T__526 Any__3)
      (@Async__2<T__526>, @Cont__2<T__526>, @Cont__2<Error>, @CleanCont__2)
      (BlockE
        (LetD
          (VarP w_null)
          (FuncE
            @anon-func-317.16
            Local
            Returns
            (params r t)
            ()
            (PrimE TupPrim)
          )
        )
        (LetD
          (VarP r_null)
          (FuncE
            @anon-func-318.16
            Local
            Returns
            (params $ignored0/0)
            ()
            (PrimE TupPrim)
          )
        )
        (VarD result ?@Result__2<T__526> (LitE NullLit))
        (VarD ws (@Refund__2, T__526) -> () (VarE w_null))
        (VarD rs Error -> () (VarE r_null))
        (LetD
          (VarP getRefund)
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE @cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
        )
        (LetD
          (VarP fulfill)
          (FuncE
            fulfill
            Local
            Returns
            (params t)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP refund)
                    (IfE
                      (VarE getRefund)
                      (PrimE (CallPrim) (VarE @getSystemRefund) (PrimE TupPrim))
                      (LitE (NatLit 0))
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE
                        OptPrim
                        (PrimE (TagE ok) (PrimE TupPrim (VarE refund) (VarE t)))
                      )
                    )
                  )
                  (LetD (VarP ws_) (VarE ws))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE
                    (CallPrim)
                    (VarE ws_)
                    (PrimE TupPrim (VarE refund) (VarE t))
                  )
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (LetD
          (VarP fail)
          (FuncE
            fail
            Local
            Returns
            (params e)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE OptPrim (PrimE (TagE error) (VarE e)))
                    )
                  )
                  (LetD (VarP rs_) (VarE rs))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE (CallPrim) (VarE rs_) (VarE e))
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (VarD cleanup () -> () (VarE @cleanup))
        (LetD
          (VarP clean)
          (FuncE
            clean
            Local
            Returns
            ()
            (PrimE (CallPrim) (VarE cleanup) (PrimE TupPrim))
          )
        )
        (LetD
          (VarP enqueue)
          (FuncE
            enqueue
            Local
            Returns
            (params k r b)
            {#schedule : () -> (); #suspend}
            (BlockE
              (LetD WildP (AssignE (VarLE cleanup) (VarE b)))
              (SwitchE
                (VarE result)
                (case
                  (LitP NullLit)
                  (BlockE
                    (LetD (VarP ws_) (VarE ws))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE ws)
                        (FuncE
                          @anon-func-365.15
                          Local
                          Returns
                          (params r t)
                          ()
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE ws_)
                                (PrimE TupPrim (VarE r) (VarE t))
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                            (PrimE (CallPrim) (VarE k) (VarE t))
                          )
                        )
                      )
                    )
                    (LetD (VarP rs_) (VarE rs))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE rs)
                        (FuncE
                          @anon-func-372.15
                          Local
                          Returns
                          (params e)
                          ()
                          (BlockE
                            (LetD WildP (PrimE (CallPrim) (VarE rs_) (VarE e)))
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_refund)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE (CallPrim) (VarE r) (VarE e))
                          )
                        )
                      )
                    )
                    (PrimE (TagE suspend) (PrimE TupPrim))
                  )
                )
                (case
                  (OptP (TagP ok (TupP (VarP r) (VarP t))))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-381.20
                      Local
                      Returns
                      ()
                      (BlockE
                        (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                        (PrimE (CallPrim) (VarE k) (VarE t))
                      )
                    )
                  )
                )
                (case
                  (OptP (TagP error (VarP e)))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-384.20
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE r) (VarE e))
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim (VarE enqueue) (VarE fulfill) (VarE fail) (VarE clean))
      )
    )
  )
  (LetD (VarP @ManagementCanister) (NewObjE Module module {}))
  (LetD
    (VarP @ic00)
    (PrimE
      (ActorOfIdBlob
        actor {create_canister : shared <system>{sender_canister_version : ?Nat64; settings : ?canister_settings__2} -> replies {canister_id : Principal}; install_code : shared <system>{arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__2} -> replies ()}
      )
      (PrimE BlobOfIcUrl (LitE (TextLit aaaaa-aa)))
    )
  )
  (LetD
    (VarP @install_actor_helper)
    (FuncE
      @install_actor_helper
      Local
      Returns
      ($__2257 Any)
      (params install_arg wasm_module arg)
      (Principal -> (), Error -> (), () -> ()) -> ()
      (FuncE
        $lambda
        Local
        Returns
        (params $v/47 $e/1 $c/0)
        ()
        (PrimE
          (CallPrim $__2257)
          (FuncE
            $lambda
            Local
            Returns
            ($@anon-async*-427.24__9 Any)
            (params $k/0 $r/1 $b/0)
            ()
            (DeclareE
              $mode/2
              (DeclareE
                $canister_id/2
                (BlockE
                  (LetD
                    (VarP $k/2)
                    (FuncE
                      $k/2
                      Local
                      Returns
                      (params $param0/0 $param1/0)
                      ()
                      (BlockE
                        (LetD
                          (VarP $v/5)
                          (PrimE TupPrim (VarE $param0/0) (VarE $param1/0))
                        )
                        (BlockE
                          (LetD (TupP (VarP $v/3) (VarP $v/4)) (VarE $v/5))
                          (LetD WildP (DefineE $mode/2 Const (VarE $v/3)))
                          (LetD
                            WildP
                            (DefineE $canister_id/2 Const (VarE $v/4))
                          )
                          (BlockE
                            (LetD (VarP $u/4) (PrimE TupPrim))
                            (BlockE
                              (LetD
                                (VarP $k/1)
                                (FuncE
                                  $k/1
                                  Local
                                  Returns
                                  ()
                                  (BlockE
                                    (LetD (VarP $v/6) (PrimE TupPrim))
                                    (BlockE
                                      (LetD WildP (VarE $v/6))
                                      (BlockE
                                        (LetD (VarP $u/5) (PrimE TupPrim))
                                        (BlockE
                                          (LetD (VarP $u/6) (PrimE TupPrim))
                                          (PrimE
                                            (CallPrim)
                                            (VarE $k/0)
                                            (PrimE
                                              RetPrim
                                              (PrimE
                                                (CallPrim)
                                                (VarE $k/0)
                                                (VarE $canister_id/2)
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              (BlockE
                                (LetD
                                  (VarP $v/7)
                                  (PrimE
                                    (ActorDotPrim install_code)
                                    (VarE @ic00)
                                  )
                                )
                                (BlockE
                                  (LetD
                                    (VarP $u/7)
                                    (BlockE
                                      (LetD
                                        (TupP
                                          (VarP $async/3)
                                          (VarP $reply/1)
                                          (VarP $reject/1)
                                          (VarP $cleanup/1)
                                        )
                                        (BlockE
                                          (LetD
                                            (TupP
                                              (VarP $async/2)
                                              (VarP $fulfill/1)
                                              (VarP $fail/1)
                                              (VarP $clean/1)
                                            )
                                            (PrimE
                                              (CallPrim ())
                                              (VarE @new_async)
                                              (PrimE TupPrim)
                                            )
                                          )
                                          (PrimE
                                            TupPrim
                                            (FuncE
                                              $lambda
                                              Local
                                              Returns
                                              (params $k/22 $r/8 $b/7)
                                              {#schedule : () -> (); #suspend}
                                              (PrimE
                                                (CallPrim)
                                                (VarE $async/2)
                                                (PrimE
                                                  TupPrim
                                                  (FuncE
                                                    $lambda
                                                    Local
                                                    Returns
                                                    (params $v/50)
                                                    ()
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $k/22)
                                                      (VarE $v/50)
                                                    )
                                                  )
                                                  (VarE $r/8)
                                                  (VarE $b/7)
                                                )
                                              )
                                            )
                                            (FuncE
                                              $lambda
                                              Local
                                              Returns
                                              ()
                                              (PrimE
                                                (CallPrim)
                                                (VarE $fulfill/1)
                                                (PrimE TupPrim)
                                              )
                                            )
                                            (VarE $fail/1)
                                            (VarE $clean/1)
                                          )
                                        )
                                      )
                                      (LetD
                                        (VarP $x/2)
                                        (BlockE
                                          (LetD
                                            (VarP $$mode/0/0)
                                            (VarE $mode/2)
                                          )
                                          (LetD
                                            (VarP $$canister_id/0/0)
                                            (VarE $canister_id/2)
                                          )
                                          (LetD
                                            (VarP $$wasm_module/0/0)
                                            (VarE wasm_module)
                                          )
                                          (LetD (VarP $$arg/0/0) (VarE arg))
                                          (LetD
                                            (VarP $$sender_canister_version/1/0)
                                            (PrimE
                                              OptPrim
                                              (PrimE canister_version)
                                            )
                                          )
                                          (NewObjE
                                            Object
                                            (sender_canister_version
                                              $$sender_canister_version/1/0
                                            )
                                            (arg $$arg/0/0)
                                            (wasm_module $$wasm_module/0/0)
                                            (canister_id $$canister_id/0/0)
                                            (mode $$mode/0/0)
                                            {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__2}
                                          )
                                        )
                                      )
                                      (LetD
                                        WildP
                                        (PrimE
                                          ICCallPrim
                                          (VarE $v/7)
                                          (VarE $x/2)
                                          (VarE $reply/1)
                                          (VarE $reject/1)
                                          (VarE $cleanup/1)
                                        )
                                      )
                                      (VarE $async/3)
                                    )
                                  )
                                  (IfE
                                    (PrimE
                                      (CallPrim)
                                      (VarE @call_succeeded)
                                      (PrimE TupPrim)
                                    )
                                    (BlockE
                                      (LetD
                                        (VarP $v/49)
                                        (PrimE
                                          TupPrim
                                          (VarE $k/1)
                                          (VarE $r/1)
                                          (VarE $b/0)
                                        )
                                      )
                                      (SwitchE
                                        (PrimE
                                          (CallPrim)
                                          (VarE $u/7)
                                          (VarE $v/49)
                                        )
                                        (case
                                          (TagP suspend WildP)
                                          (PrimE TupPrim)
                                        )
                                        (case
                                          (TagP schedule (VarP $schedule/1))
                                          (BlockE
                                            (LetD
                                              (VarP $call/1)
                                              (SelfCallE
                                                ()
                                                (PrimE
                                                  (ICReplyPrim)
                                                  (PrimE TupPrim)
                                                )
                                                (VarE $schedule/1)
                                                (PrimE
                                                  (ProjPrim 1)
                                                  (VarE $v/49)
                                                )
                                                (FuncE
                                                  $lambda
                                                  Local
                                                  Returns
                                                  ()
                                                  (PrimE
                                                    (CallPrim)
                                                    (PrimE
                                                      (ProjPrim 2)
                                                      (VarE $v/49)
                                                    )
                                                    (PrimE TupPrim)
                                                  )
                                                )
                                              )
                                            )
                                            (IfE
                                              (PrimE
                                                (CallPrim)
                                                (VarE @call_succeeded)
                                                (PrimE TupPrim)
                                              )
                                              (VarE $call/1)
                                              (PrimE
                                                (CallPrim)
                                                (PrimE
                                                  (ProjPrim 1)
                                                  (VarE $v/49)
                                                )
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE @call_error)
                                                  (PrimE TupPrim)
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (PrimE
                                      (CallPrim)
                                      (VarE $r/1)
                                      (PrimE
                                        (CallPrim)
                                        (VarE @call_error)
                                        (PrimE TupPrim)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (SwitchE
                    (VarE install_arg)
                    (case
                      (TagP new (VarP $settings/2))
                      (DeclareE
                        $available/0
                        (DeclareE
                          $accepted/0
                          (DeclareE
                            $sender_canister_version/4
                            (DeclareE
                              $canister_id/3
                              (BlockE
                                (LetD
                                  (VarP $v/8)
                                  (PrimE SystemCyclesAvailablePrim)
                                )
                                (LetD
                                  WildP
                                  (DefineE $available/0 Const (VarE $v/8))
                                )
                                (BlockE
                                  (LetD (VarP $u/8) (PrimE TupPrim))
                                  (BlockE
                                    (LetD
                                      (VarP $v/9)
                                      (PrimE
                                        SystemCyclesAcceptPrim
                                        (VarE $available/0)
                                      )
                                    )
                                    (LetD
                                      WildP
                                      (DefineE $accepted/0 Const (VarE $v/9))
                                    )
                                    (BlockE
                                      (LetD (VarP $u/9) (PrimE TupPrim))
                                      (BlockE
                                        (LetD
                                          (VarP $v/10)
                                          (PrimE
                                            OptPrim
                                            (PrimE canister_version)
                                          )
                                        )
                                        (LetD
                                          WildP
                                          (DefineE
                                            $sender_canister_version/4
                                            Const
                                            (VarE $v/10)
                                          )
                                        )
                                        (BlockE
                                          (LetD (VarP $u/10) (PrimE TupPrim))
                                          (BlockE
                                            (LetD
                                              WildP
                                              (AssignE
                                                (VarLE @cycles)
                                                (PrimE
                                                  (BinPrim Nat AddOp)
                                                  (VarE @cycles)
                                                  (VarE $accepted/0)
                                                )
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $u/11)
                                                (PrimE TupPrim)
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $k/3)
                                                  (FuncE
                                                    $k/3
                                                    Local
                                                    Returns
                                                    (params $v/12)
                                                    ()
                                                    (BlockE
                                                      (LetD
                                                        (ObjP
                                                          (canister_id
                                                            (VarP $v/11)
                                                          )
                                                        )
                                                        (VarE $v/12)
                                                      )
                                                      (LetD
                                                        WildP
                                                        (DefineE
                                                          $canister_id/3
                                                          Const
                                                          (VarE $v/11)
                                                        )
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $u/12)
                                                          (PrimE TupPrim)
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/13)
                                                            (PrimE TupPrim)
                                                          )
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $k/2)
                                                            (PrimE
                                                              TupPrim
                                                              (PrimE
                                                                (TagE install)
                                                                (PrimE TupPrim)
                                                              )
                                                              (VarE
                                                                $canister_id/3
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $v/13)
                                                    (PrimE
                                                      (ActorDotPrim
                                                        create_canister
                                                      )
                                                      (VarE @ic00)
                                                    )
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $u/14)
                                                      (BlockE
                                                        (LetD
                                                          (TupP
                                                            (VarP $async/1)
                                                            (VarP $reply/0)
                                                            (VarP $reject/0)
                                                            (VarP $cleanup/0)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              (TupP
                                                                (VarP $async/0)
                                                                (VarP
                                                                  $fulfill/0
                                                                )
                                                                (VarP $fail/0)
                                                                (VarP $clean/0)
                                                              )
                                                              (PrimE
                                                                (CallPrim
                                                                  {canister_id : Principal}
                                                                )
                                                                (VarE
                                                                  @new_async
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (PrimE
                                                              TupPrim
                                                              (VarE $async/0)
                                                              (FuncE
                                                                $lambda
                                                                Local
                                                                Returns
                                                                (params $rep0/0)
                                                                ()
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE
                                                                    $fulfill/0
                                                                  )
                                                                  (VarE $rep0/0)
                                                                )
                                                              )
                                                              (VarE $fail/0)
                                                              (VarE $clean/0)
                                                            )
                                                          )
                                                        )
                                                        (LetD
                                                          (VarP $x/1)
                                                          (BlockE
                                                            (LetD
                                                              (VarP $$base/0/0)
                                                              (VarE $settings/2)
                                                            )
                                                            (LetD
                                                              (VarP
                                                                $$sender_canister_version/0/0
                                                              )
                                                              (VarE
                                                                $sender_canister_version/4
                                                              )
                                                            )
                                                            (LetD
                                                              (VarP
                                                                $$settings/0/0
                                                              )
                                                              (PrimE
                                                                (DotPrim
                                                                  settings
                                                                )
                                                                (VarE
                                                                  $$base/0/0
                                                                )
                                                              )
                                                            )
                                                            (NewObjE
                                                              Object
                                                              (settings
                                                                $$settings/0/0
                                                              )
                                                              (sender_canister_version
                                                                $$sender_canister_version/0/0
                                                              )
                                                              {sender_canister_version : ?Nat64; settings : ?canister_settings__2}
                                                            )
                                                          )
                                                        )
                                                        (LetD
                                                          WildP
                                                          (PrimE
                                                            ICCallPrim
                                                            (VarE $v/13)
                                                            (VarE $x/1)
                                                            (VarE $reply/0)
                                                            (VarE $reject/0)
                                                            (VarE $cleanup/0)
                                                          )
                                                        )
                                                        (VarE $async/1)
                                                      )
                                                    )
                                                    (IfE
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE @call_succeeded)
                                                        (PrimE TupPrim)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $v/48)
                                                          (PrimE
                                                            TupPrim
                                                            (VarE $k/3)
                                                            (VarE $r/1)
                                                            (VarE $b/0)
                                                          )
                                                        )
                                                        (SwitchE
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $u/14)
                                                            (VarE $v/48)
                                                          )
                                                          (case
                                                            (TagP suspend WildP)
                                                            (PrimE TupPrim)
                                                          )
                                                          (case
                                                            (TagP
                                                              schedule
                                                              (VarP $schedule/0)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $call/0)
                                                                (SelfCallE
                                                                  ()
                                                                  (PrimE
                                                                    (ICReplyPrim
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                  (VarE
                                                                    $schedule/0
                                                                  )
                                                                  (PrimE
                                                                    (ProjPrim 1)
                                                                    (VarE $v/48)
                                                                  )
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    ()
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          2
                                                                        )
                                                                        (VarE
                                                                          $v/48
                                                                        )
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                              (IfE
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE
                                                                    @call_succeeded
                                                                  )
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (VarE $call/0)
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (PrimE
                                                                    (ProjPrim 1)
                                                                    (VarE $v/48)
                                                                  )
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      @call_error
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE $r/1)
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE @call_error)
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    (case
                      (TagP install (VarP $principal1/0))
                      (PrimE
                        (CallPrim)
                        (VarE $k/2)
                        (PrimE
                          TupPrim
                          (PrimE (TagE install) (PrimE TupPrim))
                          (VarE $principal1/0)
                        )
                      )
                    )
                    (case
                      (TagP reinstall (VarP $actor1/0))
                      (PrimE
                        (CallPrim)
                        (VarE $k/2)
                        (PrimE
                          TupPrim
                          (PrimE (TagE reinstall) (PrimE TupPrim))
                          (PrimE (CastPrim actor {} Principal) (VarE $actor1/0))
                        )
                      )
                    )
                    (case
                      (TagP upgrade (VarP $actor2/0))
                      (PrimE
                        (CallPrim)
                        (VarE $k/2)
                        (PrimE
                          TupPrim
                          (PrimE (TagE upgrade) (PrimE TupPrim))
                          (PrimE (CastPrim actor {} Principal) (VarE $actor2/0))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
          (PrimE TupPrim (VarE $v/47) (VarE $e/1) (VarE $c/0))
        )
      )
    )
  )
  (LetD
    (VarP @create_actor_helper)
    (FuncE
      @create_actor_helper
      Local
      Returns
      ($__2258 Any)
      (params wasm_module arg)
      (Principal -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}
      (BlockE
        (LetD
          (TupP
            (VarP $async/5)
            (VarP $reply/2)
            (VarP $reject/2)
            (VarP $cleanup/2)
          )
          (BlockE
            (LetD
              (TupP
                (VarP $async/4)
                (VarP $fulfill/2)
                (VarP $fail/2)
                (VarP $clean/2)
              )
              (PrimE (CallPrim Principal) (VarE @new_async) (PrimE TupPrim))
            )
            (PrimE
              TupPrim
              (VarE $async/4)
              (FuncE
                $lambda
                Local
                Returns
                (params $rep0/1)
                ()
                (PrimE (CallPrim) (VarE $fulfill/2) (VarE $rep0/1))
              )
              (VarE $fail/2)
              (VarE $clean/2)
            )
          )
        )
        (LetD
          WildP
          (SelfCallE
            Principal
            (PrimE
              (CallPrim $__2258)
              (FuncE
                $lambda
                Local
                Returns
                ($@anon-async-463.79__9 Any)
                (params $k/4 $r/2 $b/1)
                ()
                (DeclareE
                  $available/1
                  (DeclareE
                    $accepted/1
                    (DeclareE
                      $sender_canister_version/5
                      (DeclareE
                        $canister_id/4
                        (BlockE
                          (LetD (VarP $v/14) (PrimE SystemCyclesAvailablePrim))
                          (LetD WildP (DefineE $available/1 Const (VarE $v/14)))
                          (BlockE
                            (LetD (VarP $u/15) (PrimE TupPrim))
                            (BlockE
                              (LetD
                                (VarP $v/15)
                                (PrimE
                                  SystemCyclesAcceptPrim
                                  (VarE $available/1)
                                )
                              )
                              (LetD
                                WildP
                                (DefineE $accepted/1 Const (VarE $v/15))
                              )
                              (BlockE
                                (LetD (VarP $u/16) (PrimE TupPrim))
                                (BlockE
                                  (LetD
                                    (VarP $v/16)
                                    (PrimE OptPrim (PrimE canister_version))
                                  )
                                  (LetD
                                    WildP
                                    (DefineE
                                      $sender_canister_version/5
                                      Const
                                      (VarE $v/16)
                                    )
                                  )
                                  (BlockE
                                    (LetD (VarP $u/17) (PrimE TupPrim))
                                    (BlockE
                                      (LetD
                                        WildP
                                        (AssignE
                                          (VarLE @cycles)
                                          (PrimE
                                            (BinPrim Nat AddOp)
                                            (VarE @cycles)
                                            (VarE $accepted/1)
                                          )
                                        )
                                      )
                                      (BlockE
                                        (LetD (VarP $u/18) (PrimE TupPrim))
                                        (BlockE
                                          (LetD
                                            (VarP $k/6)
                                            (FuncE
                                              $k/6
                                              Local
                                              Returns
                                              (params $v/18)
                                              ()
                                              (BlockE
                                                (LetD
                                                  (ObjP
                                                    (canister_id (VarP $v/17))
                                                  )
                                                  (VarE $v/18)
                                                )
                                                (LetD
                                                  WildP
                                                  (DefineE
                                                    $canister_id/4
                                                    Const
                                                    (VarE $v/17)
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $u/19)
                                                    (PrimE TupPrim)
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $k/5)
                                                      (FuncE
                                                        $k/5
                                                        Local
                                                        Returns
                                                        ()
                                                        (BlockE
                                                          (LetD
                                                            (VarP $v/19)
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (VarE $v/19)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $u/20)
                                                                (PrimE TupPrim)
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $u/21)
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE $k/4)
                                                                  (PrimE
                                                                    RetPrim
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        $k/4
                                                                      )
                                                                      (VarE
                                                                        $canister_id/4
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $v/20)
                                                        (PrimE
                                                          (ActorDotPrim
                                                            install_code
                                                          )
                                                          (VarE @ic00)
                                                        )
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $u/22)
                                                          (BlockE
                                                            (LetD
                                                              (TupP
                                                                (VarP $async/9)
                                                                (VarP $reply/4)
                                                                (VarP $reject/4)
                                                                (VarP
                                                                  $cleanup/4
                                                                )
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (TupP
                                                                    (VarP
                                                                      $async/8
                                                                    )
                                                                    (VarP
                                                                      $fulfill/4
                                                                    )
                                                                    (VarP
                                                                      $fail/4
                                                                    )
                                                                    (VarP
                                                                      $clean/4
                                                                    )
                                                                  )
                                                                  (PrimE
                                                                    (CallPrim
                                                                      ()
                                                                    )
                                                                    (VarE
                                                                      @new_async
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (PrimE
                                                                  TupPrim
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    (params
                                                                      $k/23
                                                                      $r/9
                                                                      $b/8
                                                                    )
                                                                    {#schedule : () -> (); #suspend}
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        $async/8
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                        (FuncE
                                                                          $lambda
                                                                          Local
                                                                          Returns
                                                                          (params
                                                                            $v/54
                                                                          )
                                                                          ()
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              $k/23
                                                                            )
                                                                            (VarE
                                                                              $v/54
                                                                            )
                                                                          )
                                                                        )
                                                                        (VarE
                                                                          $r/9
                                                                        )
                                                                        (VarE
                                                                          $b/8
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    ()
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        $fulfill/4
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                  )
                                                                  (VarE $fail/4)
                                                                  (VarE
                                                                    $clean/4
                                                                  )
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              (VarP $x/4)
                                                              (BlockE
                                                                (LetD
                                                                  (VarP
                                                                    $$mode/1/0
                                                                  )
                                                                  (PrimE
                                                                    (TagE
                                                                      install
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$canister_id/1/0
                                                                  )
                                                                  (VarE
                                                                    $canister_id/4
                                                                  )
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$wasm_module/1/0
                                                                  )
                                                                  (VarE
                                                                    wasm_module
                                                                  )
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$arg/1/0
                                                                  )
                                                                  (VarE arg)
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$sender_canister_version/3/0
                                                                  )
                                                                  (PrimE
                                                                    OptPrim
                                                                    (PrimE
                                                                      canister_version
                                                                    )
                                                                  )
                                                                )
                                                                (NewObjE
                                                                  Object
                                                                  (sender_canister_version
                                                                    $$sender_canister_version/3/0
                                                                  )
                                                                  (arg
                                                                    $$arg/1/0
                                                                  )
                                                                  (wasm_module
                                                                    $$wasm_module/1/0
                                                                  )
                                                                  (canister_id
                                                                    $$canister_id/1/0
                                                                  )
                                                                  (mode
                                                                    $$mode/1/0
                                                                  )
                                                                  {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__2}
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                ICCallPrim
                                                                (VarE $v/20)
                                                                (VarE $x/4)
                                                                (VarE $reply/4)
                                                                (VarE $reject/4)
                                                                (VarE
                                                                  $cleanup/4
                                                                )
                                                              )
                                                            )
                                                            (VarE $async/9)
                                                          )
                                                        )
                                                        (IfE
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE
                                                              @call_succeeded
                                                            )
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              (VarP $v/53)
                                                              (PrimE
                                                                TupPrim
                                                                (VarE $k/5)
                                                                (VarE $r/2)
                                                                (VarE $b/1)
                                                              )
                                                            )
                                                            (SwitchE
                                                              (PrimE
                                                                (CallPrim)
                                                                (VarE $u/22)
                                                                (VarE $v/53)
                                                              )
                                                              (case
                                                                (TagP
                                                                  suspend
                                                                  WildP
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                              (case
                                                                (TagP
                                                                  schedule
                                                                  (VarP
                                                                    $schedule/3
                                                                  )
                                                                )
                                                                (BlockE
                                                                  (LetD
                                                                    (VarP
                                                                      $call/3
                                                                    )
                                                                    (SelfCallE
                                                                      ()
                                                                      (PrimE
                                                                        (ICReplyPrim
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                      (VarE
                                                                        $schedule/3
                                                                      )
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          1
                                                                        )
                                                                        (VarE
                                                                          $v/53
                                                                        )
                                                                      )
                                                                      (FuncE
                                                                        $lambda
                                                                        Local
                                                                        Returns
                                                                        ()
                                                                        (PrimE
                                                                          (CallPrim
                                                                          )
                                                                          (PrimE
                                                                            (ProjPrim
                                                                              2
                                                                            )
                                                                            (VarE
                                                                              $v/53
                                                                            )
                                                                          )
                                                                          (PrimE
                                                                            TupPrim
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (IfE
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        @call_succeeded
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                    (VarE
                                                                      $call/3
                                                                    )
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          1
                                                                        )
                                                                        (VarE
                                                                          $v/53
                                                                        )
                                                                      )
                                                                      (PrimE
                                                                        (CallPrim
                                                                        )
                                                                        (VarE
                                                                          @call_error
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $r/2)
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE @call_error)
                                                              (PrimE TupPrim)
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                          (BlockE
                                            (LetD
                                              (VarP $v/21)
                                              (PrimE
                                                (ActorDotPrim create_canister)
                                                (VarE @ic00)
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $u/23)
                                                (BlockE
                                                  (LetD
                                                    (TupP
                                                      (VarP $async/7)
                                                      (VarP $reply/3)
                                                      (VarP $reject/3)
                                                      (VarP $cleanup/3)
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (TupP
                                                          (VarP $async/6)
                                                          (VarP $fulfill/3)
                                                          (VarP $fail/3)
                                                          (VarP $clean/3)
                                                        )
                                                        (PrimE
                                                          (CallPrim
                                                            {canister_id : Principal}
                                                          )
                                                          (VarE @new_async)
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (PrimE
                                                        TupPrim
                                                        (VarE $async/6)
                                                        (FuncE
                                                          $lambda
                                                          Local
                                                          Returns
                                                          (params $rep0/2)
                                                          ()
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $fulfill/3)
                                                            (VarE $rep0/2)
                                                          )
                                                        )
                                                        (VarE $fail/3)
                                                        (VarE $clean/3)
                                                      )
                                                    )
                                                  )
                                                  (LetD
                                                    (VarP $x/3)
                                                    (BlockE
                                                      (LetD
                                                        (VarP $$settings/1/0)
                                                        (LitE NullLit)
                                                      )
                                                      (LetD
                                                        (VarP
                                                          $$sender_canister_version/2/0
                                                        )
                                                        (VarE
                                                          $sender_canister_version/5
                                                        )
                                                      )
                                                      (NewObjE
                                                        Object
                                                        (sender_canister_version
                                                          $$sender_canister_version/2/0
                                                        )
                                                        (settings
                                                          $$settings/1/0
                                                        )
                                                        {sender_canister_version : ?Nat64; settings : ?canister_settings__2}
                                                      )
                                                    )
                                                  )
                                                  (LetD
                                                    WildP
                                                    (PrimE
                                                      ICCallPrim
                                                      (VarE $v/21)
                                                      (VarE $x/3)
                                                      (VarE $reply/3)
                                                      (VarE $reject/3)
                                                      (VarE $cleanup/3)
                                                    )
                                                  )
                                                  (VarE $async/7)
                                                )
                                              )
                                              (IfE
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE @call_succeeded)
                                                  (PrimE TupPrim)
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $v/52)
                                                    (PrimE
                                                      TupPrim
                                                      (VarE $k/6)
                                                      (VarE $r/2)
                                                      (VarE $b/1)
                                                    )
                                                  )
                                                  (SwitchE
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $u/23)
                                                      (VarE $v/52)
                                                    )
                                                    (case
                                                      (TagP suspend WildP)
                                                      (PrimE TupPrim)
                                                    )
                                                    (case
                                                      (TagP
                                                        schedule
                                                        (VarP $schedule/2)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $call/2)
                                                          (SelfCallE
                                                            ()
                                                            (PrimE
                                                              (ICReplyPrim)
                                                              (PrimE TupPrim)
                                                            )
                                                            (VarE $schedule/2)
                                                            (PrimE
                                                              (ProjPrim 1)
                                                              (VarE $v/52)
                                                            )
                                                            (FuncE
                                                              $lambda
                                                              Local
                                                              Returns
                                                              ()
                                                              (PrimE
                                                                (CallPrim)
                                                                (PrimE
                                                                  (ProjPrim 2)
                                                                  (VarE $v/52)
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                          )
                                                        )
                                                        (IfE
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE
                                                              @call_succeeded
                                                            )
                                                            (PrimE TupPrim)
                                                          )
                                                          (VarE $call/2)
                                                          (PrimE
                                                            (CallPrim)
                                                            (PrimE
                                                              (ProjPrim 1)
                                                              (VarE $v/52)
                                                            )
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE @call_error)
                                                              (PrimE TupPrim)
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE $r/2)
                                                  (PrimE
                                                    (CallPrim)
                                                    (VarE @call_error)
                                                    (PrimE TupPrim)
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
              (PrimE
                TupPrim
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $v/51)
                  ()
                  (PrimE (ICReplyPrim Principal) (VarE $v/51))
                )
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $e/2)
                  ()
                  (PrimE
                    ICRejectPrim
                    (PrimE
                      (ProjPrim 1)
                      (PrimE
                        (CastPrim
                          Error
                          ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                        )
                        (VarE $e/2)
                      )
                    )
                  )
                )
                (VarE @cleanup)
              )
            )
            (VarE $reply/2)
            (VarE $reject/2)
            (VarE $cleanup/2)
          )
        )
        (VarE $async/5)
      )
    )
  )
  (LetD
    (VarP @call_raw)
    (FuncE
      @call_raw
      Local
      Returns
      ($__2259 Any)
      (params p m a)
      (Blob -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}
      (BlockE
        (LetD
          (TupP
            (VarP $async/11)
            (VarP $reply/5)
            (VarP $reject/5)
            (VarP $cleanup/5)
          )
          (BlockE
            (LetD
              (TupP
                (VarP $async/10)
                (VarP $fulfill/5)
                (VarP $fail/5)
                (VarP $clean/5)
              )
              (PrimE (CallPrim Blob) (VarE @new_async) (PrimE TupPrim))
            )
            (PrimE
              TupPrim
              (VarE $async/10)
              (FuncE
                $lambda
                Local
                Returns
                (params $rep0/3)
                ()
                (PrimE (CallPrim) (VarE $fulfill/5) (VarE $rep0/3))
              )
              (VarE $fail/5)
              (VarE $clean/5)
            )
          )
        )
        (LetD
          WildP
          (SelfCallE
            Blob
            (PrimE
              (CallPrim $__2259)
              (FuncE
                $lambda
                Local
                Returns
                ($@call_raw__9 Any)
                (params $k/7 $r/3 $b/2)
                ()
                (BlockE
                  (LetD (VarP $v/22) (VarE p))
                  (BlockE
                    (LetD (VarP $v/23) (VarE m))
                    (BlockE
                      (LetD
                        (VarP $u/24)
                        (BlockE
                          (LetD
                            (TupP
                              (VarP $async/13)
                              (VarP $reply/6)
                              (VarP $reject/6)
                              (VarP $cleanup/6)
                            )
                            (BlockE
                              (LetD
                                (TupP
                                  (VarP $async/12)
                                  (VarP $fulfill/6)
                                  (VarP $fail/6)
                                  (VarP $clean/6)
                                )
                                (PrimE
                                  (CallPrim Blob)
                                  (VarE @new_async)
                                  (PrimE TupPrim)
                                )
                              )
                              (PrimE
                                TupPrim
                                (VarE $async/12)
                                (FuncE
                                  $lambda
                                  Local
                                  Returns
                                  (params $rep0/4)
                                  ()
                                  (PrimE
                                    (CallPrim)
                                    (VarE $fulfill/6)
                                    (VarE $rep0/4)
                                  )
                                )
                                (VarE $fail/6)
                                (VarE $clean/6)
                              )
                            )
                          )
                          (LetD
                            WildP
                            (PrimE
                              ICCallRawPrim
                              (VarE $v/22)
                              (VarE $v/23)
                              (VarE a)
                              (VarE $reply/6)
                              (VarE $reject/6)
                              (VarE $cleanup/6)
                            )
                          )
                          (VarE $async/13)
                        )
                      )
                      (IfE
                        (PrimE
                          (CallPrim)
                          (VarE @call_succeeded)
                          (PrimE TupPrim)
                        )
                        (BlockE
                          (LetD
                            (VarP $v/56)
                            (PrimE TupPrim (VarE $k/7) (VarE $r/3) (VarE $b/2))
                          )
                          (SwitchE
                            (PrimE (CallPrim) (VarE $u/24) (VarE $v/56))
                            (case (TagP suspend WildP) (PrimE TupPrim))
                            (case
                              (TagP schedule (VarP $schedule/4))
                              (BlockE
                                (LetD
                                  (VarP $call/4)
                                  (SelfCallE
                                    ()
                                    (PrimE (ICReplyPrim) (PrimE TupPrim))
                                    (VarE $schedule/4)
                                    (PrimE (ProjPrim 1) (VarE $v/56))
                                    (FuncE
                                      $lambda
                                      Local
                                      Returns
                                      ()
                                      (PrimE
                                        (CallPrim)
                                        (PrimE (ProjPrim 2) (VarE $v/56))
                                        (PrimE TupPrim)
                                      )
                                    )
                                  )
                                )
                                (IfE
                                  (PrimE
                                    (CallPrim)
                                    (VarE @call_succeeded)
                                    (PrimE TupPrim)
                                  )
                                  (VarE $call/4)
                                  (PrimE
                                    (CallPrim)
                                    (PrimE (ProjPrim 1) (VarE $v/56))
                                    (PrimE
                                      (CallPrim)
                                      (VarE @call_error)
                                      (PrimE TupPrim)
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                        (PrimE
                          (CallPrim)
                          (VarE $r/3)
                          (PrimE (CallPrim) (VarE @call_error) (PrimE TupPrim))
                        )
                      )
                    )
                  )
                )
              )
              (PrimE
                TupPrim
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $v/55)
                  ()
                  (PrimE (ICReplyPrim Blob) (VarE $v/55))
                )
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $e/3)
                  ()
                  (PrimE
                    ICRejectPrim
                    (PrimE
                      (ProjPrim 1)
                      (PrimE
                        (CastPrim
                          Error
                          ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                        )
                        (VarE $e/3)
                      )
                    )
                  )
                )
                (VarE @cleanup)
              )
            )
            (VarE $reply/5)
            (VarE $reject/5)
            (VarE $cleanup/5)
          )
        )
        (VarE $async/11)
      )
    )
  )
  (LetD
    (VarP @call_succeeded)
    (FuncE
      @call_succeeded
      Local
      Returns
      Bool
      (PrimE
        (RelPrim Nat32 EqOp)
        (PrimE call_perform_status)
        (LitE (Nat32Lit 0))
      )
    )
  )
  (LetD
    (VarP @call_error)
    (FuncE
      @call_error
      Local
      Returns
      Error
      (BlockE
        (LetD (VarP status) (PrimE call_perform_status))
        (LetD (VarP message) (PrimE call_perform_message))
        (LetD
          (VarP code)
          (PrimE
            (TagE call_error)
            (BlockE
              (LetD (VarP $err_code/0) (VarE status))
              (NewObjE Object (err_code $err_code/0) {err_code : Nat32})
            )
          )
        )
        (PrimE
          (CastPrim ({#call_error : {err_code : Nat32}}, Text) Error)
          (PrimE TupPrim (VarE code) (VarE message))
        )
      )
    )
  )
  (VarD @timers ?@Node__2 (LitE NullLit))
  (LetD
    (VarP @prune)
    (FuncE
      @prune
      Local
      Returns
      (params n)
      ?@Node__2
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE NullLit))
        (case
          (OptP (VarP n))
          (IfE
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE
                IdxPrim
                (PrimE (DotPrim expire) (VarE n))
                (LitE (NatLit 0))
              )
              (LitE (Nat64Lit 0))
            )
            (PrimE (CallPrim) (VarE @prune) (PrimE (DotPrim post) (VarE n)))
            (PrimE
              OptPrim
              (BlockE
                (LetD (VarP $base/1) (VarE n))
                (LetD
                  (VarP $pre/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim pre) (VarE n))
                  )
                )
                (LetD
                  (VarP $post/0)
                  (PrimE
                    (CallPrim)
                    (VarE @prune)
                    (PrimE (DotPrim post) (VarE n))
                  )
                )
                (LetD (VarP $delay/0) (PrimE (DotPrim delay) (VarE $base/1)))
                (LetD (VarP $expire/0) (PrimE (DotPrim expire) (VarE $base/1)))
                (LetD (VarP $id/0) (PrimE (DotPrim id) (VarE $base/1)))
                (LetD (VarP $job/0) (PrimE (DotPrim job) (VarE $base/1)))
                (NewObjE
                  Object
                  (job $job/0)
                  (id $id/0)
                  (expire $expire/0)
                  (delay $delay/0)
                  (post $post/0)
                  (pre $pre/0)
                  {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @nextExpiration)
    (FuncE
      @nextExpiration
      Local
      Returns
      (params n)
      Nat64
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE (Nat64Lit 0)))
        (case
          (OptP (VarP n))
          (BlockE
            (VarD
              exp
              Nat64
              (PrimE
                (CallPrim)
                (VarE @nextExpiration)
                (PrimE (DotPrim pre) (VarE n))
              )
            )
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                  )
                  (IfE
                    (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        (CallPrim)
                        (VarE @nextExpiration)
                        (PrimE (DotPrim post) (VarE n))
                      )
                    )
                    (PrimE TupPrim)
                  )
                )
                (PrimE TupPrim)
              )
            )
            (VarE exp)
          )
        )
      )
    )
  )
  (LetD
    (VarP @timer_helper)
    (FuncE
      @timer_helper
      Local
      Returns
      ($__2260 Any)
      (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}
      (BlockE
        (LetD
          (TupP
            (VarP $async/15)
            (VarP $reply/7)
            (VarP $reject/7)
            (VarP $cleanup/7)
          )
          (BlockE
            (LetD
              (TupP
                (VarP $async/14)
                (VarP $fulfill/7)
                (VarP $fail/7)
                (VarP $clean/7)
              )
              (PrimE (CallPrim ()) (VarE @new_async) (PrimE TupPrim))
            )
            (PrimE
              TupPrim
              (FuncE
                $lambda
                Local
                Returns
                (params $k/24 $r/10 $b/9)
                {#schedule : () -> (); #suspend}
                (PrimE
                  (CallPrim)
                  (VarE $async/14)
                  (PrimE
                    TupPrim
                    (FuncE
                      $lambda
                      Local
                      Returns
                      (params $v/57)
                      ()
                      (PrimE (CallPrim) (VarE $k/24) (VarE $v/57))
                    )
                    (VarE $r/10)
                    (VarE $b/9)
                  )
                )
              )
              (FuncE
                $lambda
                Local
                Returns
                ()
                (PrimE (CallPrim) (VarE $fulfill/7) (PrimE TupPrim))
              )
              (VarE $fail/7)
              (VarE $clean/7)
            )
          )
        )
        (LetD
          WildP
          (SelfCallE
            ()
            (PrimE
              (CallPrim $__2260)
              (FuncE
                $lambda
                Local
                Returns
                ($@timer_helper__9 Any)
                (params $k/8 $r/4 $b/3)
                ()
                (DeclareE
                  $Array_init/0
                  (DeclareE
                    $now/0
                    (DeclareE
                      $gathered/0
                      (DeclareE
                        $thunks/0
                        (DeclareE
                          $gatherExpired/0
                          (DeclareE
                            $exp/0
                            (BlockE
                              (LetD
                                (VarP $v/24)
                                (FuncE
                                  Array_init
                                  Local
                                  Returns
                                  (T__527 Any)
                                  (params $len/0 $x/0)
                                  [var T__527]
                                  (PrimE Array.init (VarE $len/0) (VarE $x/0))
                                )
                              )
                              (LetD
                                WildP
                                (DefineE $Array_init/0 Const (VarE $v/24))
                              )
                              (BlockE
                                (LetD (VarP $u/25) (PrimE TupPrim))
                                (BlockE
                                  (LetD (VarP $v/25) (PrimE SystemTimePrim))
                                  (LetD
                                    WildP
                                    (DefineE $now/0 Const (VarE $v/25))
                                  )
                                  (BlockE
                                    (LetD (VarP $u/26) (PrimE TupPrim))
                                    (BlockE
                                      (LetD
                                        (VarP $u/27)
                                        (DefineE
                                          $gathered/0
                                          Var
                                          (LitE (NatLit 0))
                                        )
                                      )
                                      (BlockE
                                        (LetD
                                          (VarP $v/26)
                                          (PrimE
                                            (CallPrim
                                              ?(<system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend})
                                            )
                                            (VarE $Array_init/0)
                                            (PrimE
                                              TupPrim
                                              (LitE (NatLit 10))
                                              (LitE NullLit)
                                            )
                                          )
                                        )
                                        (LetD
                                          WildP
                                          (DefineE $thunks/0 Const (VarE $v/26))
                                        )
                                        (BlockE
                                          (LetD (VarP $u/28) (PrimE TupPrim))
                                          (BlockE
                                            (LetD
                                              (VarP $v/27)
                                              (FuncE
                                                gatherExpired
                                                Local
                                                Returns
                                                (params $n/0)
                                                ()
                                                (SwitchE
                                                  (VarE $n/0)
                                                  (case
                                                    (LitP NullLit)
                                                    (PrimE TupPrim)
                                                  )
                                                  (case
                                                    (OptP (VarP $n/1))
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE
                                                            $gatherExpired/0
                                                          )
                                                          (PrimE
                                                            (DotPrim pre)
                                                            (VarE $n/1)
                                                          )
                                                        )
                                                      )
                                                      (LetD
                                                        WildP
                                                        (IfE
                                                          (IfE
                                                            (IfE
                                                              (PrimE
                                                                (RelPrim
                                                                  Nat64
                                                                  GtOp
                                                                )
                                                                (PrimE
                                                                  IdxPrim
                                                                  (PrimE
                                                                    (DotPrim
                                                                      expire
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                  (LitE
                                                                    (NatLit 0)
                                                                  )
                                                                )
                                                                (LitE
                                                                  (Nat64Lit 0)
                                                                )
                                                              )
                                                              (PrimE
                                                                (RelPrim
                                                                  Nat64
                                                                  LeOp
                                                                )
                                                                (PrimE
                                                                  IdxPrim
                                                                  (PrimE
                                                                    (DotPrim
                                                                      expire
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                  (LitE
                                                                    (NatLit 0)
                                                                  )
                                                                )
                                                                (VarE $now/0)
                                                              )
                                                              (LitE
                                                                (BoolLit false)
                                                              )
                                                            )
                                                            (PrimE
                                                              (RelPrim Nat LtOp)
                                                              (VarE $gathered/0)
                                                              (PrimE
                                                                array_len
                                                                (VarE $thunks/0)
                                                              )
                                                            )
                                                            (LitE
                                                              (BoolLit false)
                                                            )
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (AssignE
                                                                (IdxLE
                                                                  (VarE
                                                                    $thunks/0
                                                                  )
                                                                  (VarE
                                                                    $gathered/0
                                                                  )
                                                                )
                                                                (PrimE
                                                                  OptPrim
                                                                  (PrimE
                                                                    (DotPrim
                                                                      job
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (SwitchE
                                                                (PrimE
                                                                  (DotPrim
                                                                    delay
                                                                  )
                                                                  (VarE $n/1)
                                                                )
                                                                (case
                                                                  (AltP
                                                                    (LitP
                                                                      NullLit
                                                                    )
                                                                    (OptP
                                                                      (LitP
                                                                        (Nat64Lit
                                                                          0
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (case
                                                                  (OptP
                                                                    (VarP
                                                                      $delay/9
                                                                    )
                                                                  )
                                                                  (BlockE
                                                                    (LetD
                                                                      (VarP
                                                                        $expire/9
                                                                      )
                                                                      (PrimE
                                                                        (BinPrim
                                                                          Nat64
                                                                          AddOp
                                                                        )
                                                                        (PrimE
                                                                          IdxPrim
                                                                          (PrimE
                                                                            (DotPrim
                                                                              expire
                                                                            )
                                                                            (VarE
                                                                              $n/1
                                                                            )
                                                                          )
                                                                          (LitE
                                                                            (NatLit
                                                                              0
                                                                            )
                                                                          )
                                                                        )
                                                                        (PrimE
                                                                          (BinPrim
                                                                            Nat64
                                                                            MulOp
                                                                          )
                                                                          (VarE
                                                                            $delay/9
                                                                          )
                                                                          (PrimE
                                                                            (BinPrim
                                                                              Nat64
                                                                              AddOp
                                                                            )
                                                                            (LitE
                                                                              (Nat64Lit
                                                                                1
                                                                              )
                                                                            )
                                                                            (PrimE
                                                                              (BinPrim
                                                                                Nat64
                                                                                DivOp
                                                                              )
                                                                              (PrimE
                                                                                (BinPrim
                                                                                  Nat64
                                                                                  SubOp
                                                                                )
                                                                                (VarE
                                                                                  $now/0
                                                                                )
                                                                                (PrimE
                                                                                  IdxPrim
                                                                                  (PrimE
                                                                                    (DotPrim
                                                                                      expire
                                                                                    )
                                                                                    (VarE
                                                                                      $n/1
                                                                                    )
                                                                                  )
                                                                                  (LitE
                                                                                    (NatLit
                                                                                      0
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                              (VarE
                                                                                $delay/9
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (LetD
                                                                      WildP
                                                                      (AssignE
                                                                        (IdxLE
                                                                          (PrimE
                                                                            (DotPrim
                                                                              expire
                                                                            )
                                                                            (VarE
                                                                              $n/1
                                                                            )
                                                                          )
                                                                          (LitE
                                                                            (NatLit
                                                                              0
                                                                            )
                                                                          )
                                                                        )
                                                                        (LitE
                                                                          (Nat64Lit
                                                                            0
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (LetD
                                                                      (VarP
                                                                        $reinsert/0
                                                                      )
                                                                      (FuncE
                                                                        reinsert
                                                                        Local
                                                                        Returns
                                                                        (params
                                                                          $m/0
                                                                        )
                                                                        @Node__2
                                                                        (SwitchE
                                                                          (VarE
                                                                            $m/0
                                                                          )
                                                                          (case
                                                                            (LitP
                                                                              NullLit
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                (VarP
                                                                                  $$base/2/0
                                                                                )
                                                                                (VarE
                                                                                  $n/1
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$expire/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (ArrayPrim
                                                                                    Var
                                                                                    Nat64
                                                                                  )
                                                                                  (VarE
                                                                                    $expire/9
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$pre/1/0
                                                                                )
                                                                                (LitE
                                                                                  NullLit
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$post/1/0
                                                                                )
                                                                                (LitE
                                                                                  NullLit
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$delay/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (DotPrim
                                                                                    delay
                                                                                  )
                                                                                  (VarE
                                                                                    $$base/2/0
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$id/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (DotPrim
                                                                                    id
                                                                                  )
                                                                                  (VarE
                                                                                    $$base/2/0
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$job/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (DotPrim
                                                                                    job
                                                                                  )
                                                                                  (VarE
                                                                                    $$base/2/0
                                                                                  )
                                                                                )
                                                                              )
                                                                              (NewObjE
                                                                                Object
                                                                                (job
                                                                                  $$job/1/0
                                                                                )
                                                                                (id
                                                                                  $$id/1/0
                                                                                )
                                                                                (delay
                                                                                  $$delay/1/0
                                                                                )
                                                                                (post
                                                                                  $$post/1/0
                                                                                )
                                                                                (pre
                                                                                  $$pre/1/0
                                                                                )
                                                                                (expire
                                                                                  $$expire/1/0
                                                                                )
                                                                                {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : Null; pre : Null}
                                                                              )
                                                                            )
                                                                          )
                                                                          (case
                                                                            (OptP
                                                                              (VarP
                                                                                $m/1
                                                                              )
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                WildP
                                                                                (PrimE
                                                                                  AssertPrim
                                                                                  (PrimE
                                                                                    (RelPrim
                                                                                      Bool
                                                                                      EqOp
                                                                                    )
                                                                                    (PrimE
                                                                                      (RelPrim
                                                                                        Nat64
                                                                                        EqOp
                                                                                      )
                                                                                      (PrimE
                                                                                        IdxPrim
                                                                                        (PrimE
                                                                                          (DotPrim
                                                                                            expire
                                                                                          )
                                                                                          (VarE
                                                                                            $m/1
                                                                                          )
                                                                                        )
                                                                                        (LitE
                                                                                          (NatLit
                                                                                            0
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                      (LitE
                                                                                        (Nat64Lit
                                                                                          0
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                    (LitE
                                                                                      (BoolLit
                                                                                        false
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                              (IfE
                                                                                (PrimE
                                                                                  (RelPrim
                                                                                    Nat64
                                                                                    LtOp
                                                                                  )
                                                                                  (VarE
                                                                                    $expire/9
                                                                                  )
                                                                                  (PrimE
                                                                                    IdxPrim
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        expire
                                                                                      )
                                                                                      (VarE
                                                                                        $m/1
                                                                                      )
                                                                                    )
                                                                                    (LitE
                                                                                      (NatLit
                                                                                        0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                (BlockE
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$base/4/0
                                                                                    )
                                                                                    (VarE
                                                                                      $m/1
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$pre/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      OptPrim
                                                                                      (PrimE
                                                                                        (CallPrim
                                                                                        )
                                                                                        (VarE
                                                                                          $reinsert/0
                                                                                        )
                                                                                        (PrimE
                                                                                          (DotPrim
                                                                                            pre
                                                                                          )
                                                                                          (VarE
                                                                                            $m/1
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$delay/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        delay
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$expire/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        expire
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$id/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        id
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$job/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        job
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$post/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        post
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (NewObjE
                                                                                    Object
                                                                                    (post
                                                                                      $$post/3/0
                                                                                    )
                                                                                    (job
                                                                                      $$job/3/0
                                                                                    )
                                                                                    (id
                                                                                      $$id/3/0
                                                                                    )
                                                                                    (expire
                                                                                      $$expire/3/0
                                                                                    )
                                                                                    (delay
                                                                                      $$delay/3/0
                                                                                    )
                                                                                    (pre
                                                                                      $$pre/3/0
                                                                                    )
                                                                                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                                                                                  )
                                                                                )
                                                                                (BlockE
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$base/3/0
                                                                                    )
                                                                                    (VarE
                                                                                      $m/1
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$post/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      OptPrim
                                                                                      (PrimE
                                                                                        (CallPrim
                                                                                        )
                                                                                        (VarE
                                                                                          $reinsert/0
                                                                                        )
                                                                                        (PrimE
                                                                                          (DotPrim
                                                                                            post
                                                                                          )
                                                                                          (VarE
                                                                                            $m/1
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$delay/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        delay
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$expire/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        expire
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$id/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        id
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$job/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        job
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$pre/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        pre
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (NewObjE
                                                                                    Object
                                                                                    (pre
                                                                                      $$pre/2/0
                                                                                    )
                                                                                    (job
                                                                                      $$job/2/0
                                                                                    )
                                                                                    (id
                                                                                      $$id/2/0
                                                                                    )
                                                                                    (expire
                                                                                      $$expire/2/0
                                                                                    )
                                                                                    (delay
                                                                                      $$delay/2/0
                                                                                    )
                                                                                    (post
                                                                                      $$post/2/0
                                                                                    )
                                                                                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (AssignE
                                                                      (VarLE
                                                                        @timers
                                                                      )
                                                                      (PrimE
                                                                        OptPrim
                                                                        (PrimE
                                                                          (CallPrim
                                                                          )
                                                                          (VarE
                                                                            $reinsert/0
                                                                          )
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              @prune
                                                                            )
                                                                            (VarE
                                                                              @timers
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (AssignE
                                                                (IdxLE
                                                                  (PrimE
                                                                    (DotPrim
                                                                      expire
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                  (LitE
                                                                    (NatLit 0)
                                                                  )
                                                                )
                                                                (LitE
                                                                  (Nat64Lit 0)
                                                                )
                                                              )
                                                            )
                                                            (AssignE
                                                              (VarLE
                                                                $gathered/0
                                                              )
                                                              (PrimE
                                                                (BinPrim
                                                                  Nat
                                                                  AddOp
                                                                )
                                                                (VarE
                                                                  $gathered/0
                                                                )
                                                                (LitE
                                                                  (NatLit 1)
                                                                )
                                                              )
                                                            )
                                                          )
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE $gatherExpired/0)
                                                        (PrimE
                                                          (DotPrim post)
                                                          (VarE $n/1)
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                            (LetD
                                              WildP
                                              (DefineE
                                                $gatherExpired/0
                                                Const
                                                (VarE $v/27)
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $u/29)
                                                (PrimE TupPrim)
                                              )
                                              (BlockE
                                                (LetD
                                                  WildP
                                                  (PrimE
                                                    (CallPrim)
                                                    (VarE $gatherExpired/0)
                                                    (VarE @timers)
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $u/30)
                                                    (PrimE TupPrim)
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $v/28)
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE @nextExpiration)
                                                        (VarE @timers)
                                                      )
                                                    )
                                                    (LetD
                                                      WildP
                                                      (DefineE
                                                        $exp/0
                                                        Const
                                                        (VarE $v/28)
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $u/31)
                                                        (PrimE TupPrim)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          WildP
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                global_timer_set
                                                                (VarE $exp/0)
                                                              )
                                                            )
                                                            (PrimE TupPrim)
                                                          )
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/32)
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (IfE
                                                                (PrimE
                                                                  (RelPrim
                                                                    Nat64
                                                                    EqOp
                                                                  )
                                                                  (VarE $exp/0)
                                                                  (LitE
                                                                    (Nat64Lit 0)
                                                                  )
                                                                )
                                                                (AssignE
                                                                  (VarLE
                                                                    @timers
                                                                  )
                                                                  (LitE NullLit)
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $u/33)
                                                                (PrimE TupPrim)
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $u/34)
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (DeclareE
                                                                  $$arr/2/0
                                                                  (DeclareE
                                                                    $$last/2/0
                                                                    (DeclareE
                                                                      $$indx/2/0
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $v/29
                                                                          )
                                                                          (VarE
                                                                            $thunks/0
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          WildP
                                                                          (DefineE
                                                                            $$arr/2/0
                                                                            Const
                                                                            (VarE
                                                                              $v/29
                                                                            )
                                                                          )
                                                                        )
                                                                        (BlockE
                                                                          (LetD
                                                                            (VarP
                                                                              $u/35
                                                                            )
                                                                            (PrimE
                                                                              TupPrim
                                                                            )
                                                                          )
                                                                          (BlockE
                                                                            (LetD
                                                                              (VarP
                                                                                $v/30
                                                                              )
                                                                              (PrimE
                                                                                GetLastArrayOffset
                                                                                (VarE
                                                                                  $$arr/2/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              WildP
                                                                              (DefineE
                                                                                $$last/2/0
                                                                                Const
                                                                                (VarE
                                                                                  $v/30
                                                                                )
                                                                              )
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                (VarP
                                                                                  $u/36
                                                                                )
                                                                                (PrimE
                                                                                  TupPrim
                                                                                )
                                                                              )
                                                                              (BlockE
                                                                                (LetD
                                                                                  (VarP
                                                                                    $u/37
                                                                                  )
                                                                                  (DefineE
                                                                                    $$indx/2/0
                                                                                    Var
                                                                                    (LitE
                                                                                      (NatLit
                                                                                        0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                (BlockE
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $u/38
                                                                                    )
                                                                                    (PrimE
                                                                                      TupPrim
                                                                                    )
                                                                                  )
                                                                                  (IfE
                                                                                    (PrimE
                                                                                      EqArrayOffset
                                                                                      (VarE
                                                                                        $$last/2/0
                                                                                      )
                                                                                      (LitE
                                                                                        (IntLit
                                                                                          -1
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                    (PrimE
                                                                                      (CallPrim
                                                                                      )
                                                                                      (VarE
                                                                                        $k/8
                                                                                      )
                                                                                      (PrimE
                                                                                        TupPrim
                                                                                      )
                                                                                    )
                                                                                    (BlockE
                                                                                      (LetD
                                                                                        (VarP
                                                                                          $loop/0
                                                                                        )
                                                                                        (FuncE
                                                                                          $loop/0
                                                                                          Local
                                                                                          Returns
                                                                                          ()
                                                                                          (BlockE
                                                                                            (LetD
                                                                                              (VarP
                                                                                                $v/31
                                                                                              )
                                                                                              (PrimE
                                                                                                TupPrim
                                                                                              )
                                                                                            )
                                                                                            (DeclareE
                                                                                              $o/0
                                                                                              (BlockE
                                                                                                (LetD
                                                                                                  (VarP
                                                                                                    $v/32
                                                                                                  )
                                                                                                  (PrimE
                                                                                                    DerefArrayOffset
                                                                                                    (VarE
                                                                                                      $$arr/2/0
                                                                                                    )
                                                                                                    (VarE
                                                                                                      $$indx/2/0
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                                (LetD
                                                                                                  WildP
                                                                                                  (DefineE
                                                                                                    $o/0
                                                                                                    Const
                                                                                                    (VarE
                                                                                                      $v/32
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                                (BlockE
                                                                                                  (LetD
                                                                                                    (VarP
                                                                                                      $u/39
                                                                                                    )
                                                                                                    (PrimE
                                                                                                      TupPrim
                                                                                                    )
                                                                                                  )
                                                                                                  (BlockE
                                                                                                    (LetD
                                                                                                      (VarP
                                                                                                        $k/9
                                                                                                      )
                                                                                                      (FuncE
                                                                                                        $k/9
                                                                                                        Local
                                                                                                        Returns
                                                                                                        ()
                                                                                                        (BlockE
                                                                                                          (LetD
                                                                                                            (VarP
                                                                                                              $v/33
                                                                                                            )
                                                                                                            (PrimE
                                                                                                              TupPrim
                                                                                                            )
                                                                                                          )
                                                                                                          (BlockE
                                                                                                            (LetD
                                                                                                              WildP
                                                                                                              (VarE
                                                                                                                $v/33
                                                                                                              )
                                                                                                            )
                                                                                                            (BlockE
                                                                                                              (LetD
                                                                                                                (VarP
                                                                                                                  $u/40
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                              (BlockE
                                                                                                                (LetD
                                                                                                                  (VarP
                                                                                                                    $u/41
                                                                                                                  )
                                                                                                                  (PrimE
                                                                                                                    TupPrim
                                                                                                                  )
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  (CallPrim
                                                                                                                  )
                                                                                                                  (VarE
                                                                                                                    $loop/0
                                                                                                                  )
                                                                                                                  (IfE
                                                                                                                    (PrimE
                                                                                                                      EqArrayOffset
                                                                                                                      (VarE
                                                                                                                        $$indx/2/0
                                                                                                                      )
                                                                                                                      (VarE
                                                                                                                        $$last/2/0
                                                                                                                      )
                                                                                                                    )
                                                                                                                    (PrimE
                                                                                                                      RetPrim
                                                                                                                      (PrimE
                                                                                                                        (CallPrim
                                                                                                                        )
                                                                                                                        (VarE
                                                                                                                          $k/8
                                                                                                                        )
                                                                                                                        (PrimE
                                                                                                                          TupPrim
                                                                                                                        )
                                                                                                                      )
                                                                                                                    )
                                                                                                                    (AssignE
                                                                                                                      (VarLE
                                                                                                                        $$indx/2/0
                                                                                                                      )
                                                                                                                      (PrimE
                                                                                                                        NextArrayOffset
                                                                                                                        (VarE
                                                                                                                          $$indx/2/0
                                                                                                                        )
                                                                                                                      )
                                                                                                                    )
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                    (SwitchE
                                                                                                      (VarE
                                                                                                        $o/0
                                                                                                      )
                                                                                                      (case
                                                                                                        (OptP
                                                                                                          (VarP
                                                                                                            $thunk/3
                                                                                                          )
                                                                                                        )
                                                                                                        (BlockE
                                                                                                          (LetD
                                                                                                            (VarP
                                                                                                              $v/34
                                                                                                            )
                                                                                                            (VarE
                                                                                                              $thunk/3
                                                                                                            )
                                                                                                          )
                                                                                                          (BlockE
                                                                                                            (LetD
                                                                                                              (VarP
                                                                                                                $u/42
                                                                                                              )
                                                                                                              (PrimE
                                                                                                                (CallPrim
                                                                                                                  $@timer_helper__9
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  $v/34
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                            (IfE
                                                                                                              (PrimE
                                                                                                                (CallPrim
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  @call_succeeded
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                              (BlockE
                                                                                                                (LetD
                                                                                                                  WildP
                                                                                                                  (VarE
                                                                                                                    $u/42
                                                                                                                  )
                                                                                                                )
                                                                                                                (BlockE
                                                                                                                  (LetD
                                                                                                                    (VarP
                                                                                                                      $u/43
                                                                                                                    )
                                                                                                                    (PrimE
                                                                                                                      TupPrim
                                                                                                                    )
                                                                                                                  )
                                                                                                                  (BlockE
                                                                                                                    (LetD
                                                                                                                      (VarP
                                                                                                                        $u/44
                                                                                                                      )
                                                                                                                      (PrimE
                                                                                                                        TupPrim
                                                                                                                      )
                                                                                                                    )
                                                                                                                    (PrimE
                                                                                                                      (CallPrim
                                                                                                                      )
                                                                                                                      (VarE
                                                                                                                        $k/9
                                                                                                                      )
                                                                                                                      (PrimE
                                                                                                                        TupPrim
                                                                                                                      )
                                                                                                                    )
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                              (PrimE
                                                                                                                (CallPrim
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  $r/4
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  (CallPrim
                                                                                                                  )
                                                                                                                  (VarE
                                                                                                                    @call_error
                                                                                                                  )
                                                                                                                  (PrimE
                                                                                                                    TupPrim
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                      (case
                                                                                                        WildP
                                                                                                        (PrimE
                                                                                                          (CallPrim
                                                                                                          )
                                                                                                          (VarE
                                                                                                            $k/9
                                                                                                          )
                                                                                                          (PrimE
                                                                                                            TupPrim
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                      (PrimE
                                                                                        (CallPrim
                                                                                        )
                                                                                        (VarE
                                                                                          $loop/0
                                                                                        )
                                                                                        (PrimE
                                                                                          TupPrim
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
              (PrimE
                TupPrim
                (FuncE
                  $lambda
                  Local
                  Returns
                  ()
                  (BlockE
                    (LetD (VarP $v/58) (PrimE TupPrim))
                    (PrimE (ICReplyPrim) (VarE $v/58))
                  )
                )
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $e/4)
                  ()
                  (PrimE
                    ICRejectPrim
                    (PrimE
                      (ProjPrim 1)
                      (PrimE
                        (CastPrim
                          Error
                          ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                        )
                        (VarE $e/4)
                      )
                    )
                  )
                )
                (VarE @cleanup)
              )
            )
            (VarE $reply/7)
            (VarE $reject/7)
            (VarE $cleanup/7)
          )
        )
        (VarE $async/15)
      )
    )
  )
  (VarD @lastTimerId Nat (LitE (NatLit 0)))
  (LetD
    (VarP @setTimer)
    (FuncE
      @setTimer
      Local
      Returns
      ($__2261 Any)
      (params delayNanos recurring job)
      Nat
      (BlockE
        (LetD
          WildP
          (AssignE
            (VarLE @lastTimerId)
            (PrimE (BinPrim Nat AddOp) (VarE @lastTimerId) (LitE (NatLit 1)))
          )
        )
        (LetD (VarP id) (VarE @lastTimerId))
        (LetD (VarP now) (PrimE SystemTimePrim))
        (LetD
          (VarP expire)
          (PrimE (BinPrim Nat64 AddOp) (VarE now) (VarE delayNanos))
        )
        (LetD
          (VarP delay)
          (IfE
            (VarE recurring)
            (PrimE OptPrim (VarE delayNanos))
            (LitE NullLit)
          )
        )
        (LetD
          (VarP insert)
          (FuncE
            insert
            Local
            Returns
            (params n)
            @Node__2
            (SwitchE
              (VarE n)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP $expire/4)
                    (PrimE (ArrayPrim Var Nat64) (VarE expire))
                  )
                  (LetD (VarP $id/4) (VarE id))
                  (LetD (VarP $delay/4) (VarE delay))
                  (LetD (VarP $job/4) (VarE job))
                  (LetD (VarP $pre/4) (LitE NullLit))
                  (LetD (VarP $post/4) (LitE NullLit))
                  (NewObjE
                    Object
                    (post $post/4)
                    (pre $pre/4)
                    (job $job/4)
                    (delay $delay/4)
                    (id $id/4)
                    (expire $expire/4)
                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                  )
                )
              )
              (case
                (OptP (VarP n))
                (BlockE
                  (LetD
                    WildP
                    (PrimE
                      AssertPrim
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (RelPrim Nat64 EqOp)
                          (PrimE
                            IdxPrim
                            (PrimE (DotPrim expire) (VarE n))
                            (LitE (NatLit 0))
                          )
                          (LitE (Nat64Lit 0))
                        )
                        (LitE (BoolLit false))
                      )
                    )
                  )
                  (IfE
                    (PrimE
                      (RelPrim Nat64 LtOp)
                      (VarE expire)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/6) (VarE n))
                      (LetD
                        (VarP $pre/6)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim pre) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/6)
                        (PrimE (DotPrim delay) (VarE $base/6))
                      )
                      (LetD
                        (VarP $expire/6)
                        (PrimE (DotPrim expire) (VarE $base/6))
                      )
                      (LetD (VarP $id/6) (PrimE (DotPrim id) (VarE $base/6)))
                      (LetD (VarP $job/6) (PrimE (DotPrim job) (VarE $base/6)))
                      (LetD
                        (VarP $post/6)
                        (PrimE (DotPrim post) (VarE $base/6))
                      )
                      (NewObjE
                        Object
                        (post $post/6)
                        (job $job/6)
                        (id $id/6)
                        (expire $expire/6)
                        (delay $delay/6)
                        (pre $pre/6)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/5) (VarE n))
                      (LetD
                        (VarP $post/5)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/5)
                        (PrimE (DotPrim delay) (VarE $base/5))
                      )
                      (LetD
                        (VarP $expire/5)
                        (PrimE (DotPrim expire) (VarE $base/5))
                      )
                      (LetD (VarP $id/5) (PrimE (DotPrim id) (VarE $base/5)))
                      (LetD (VarP $job/5) (PrimE (DotPrim job) (VarE $base/5)))
                      (LetD (VarP $pre/5) (PrimE (DotPrim pre) (VarE $base/5)))
                      (NewObjE
                        Object
                        (pre $pre/5)
                        (job $job/5)
                        (id $id/5)
                        (expire $expire/5)
                        (delay $delay/5)
                        (post $post/5)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE
              OptPrim
              (PrimE
                (CallPrim)
                (VarE insert)
                (PrimE (CallPrim) (VarE @prune) (VarE @timers))
              )
            )
          )
        )
        (LetD
          (VarP exp)
          (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
        )
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
            (AssignE (VarLE @timers) (LitE NullLit))
            (PrimE TupPrim)
          )
        )
        (LetD
          WildP
          (BlockE
            (LetD WildP (PrimE global_timer_set (VarE exp)))
            (PrimE TupPrim)
          )
        )
        (VarE id)
      )
    )
  )
  (LetD
    (VarP @cancelTimer)
    (FuncE
      @cancelTimer
      Local
      Returns
      (params id)
      ()
      (BlockE
        (LetD
          (VarP graft)
          (FuncE
            graft
            Local
            Returns
            (params onto branch)
            ?@Node__2
            (SwitchE
              (PrimE TupPrim (VarE onto) (VarE branch))
              (case (TupP (LitP NullLit) (LitP NullLit)) (LitE NullLit))
              (case (TupP (LitP NullLit) WildP) (VarE branch))
              (case (TupP WildP (LitP NullLit)) (VarE onto))
              (case
                (TupP (OptP (VarP onto)) WildP)
                (PrimE
                  OptPrim
                  (BlockE
                    (LetD (VarP $base/7) (VarE onto))
                    (LetD
                      (VarP $post/7)
                      (PrimE
                        (CallPrim)
                        (VarE graft)
                        (PrimE
                          TupPrim
                          (PrimE (DotPrim post) (VarE onto))
                          (VarE branch)
                        )
                      )
                    )
                    (LetD
                      (VarP $delay/7)
                      (PrimE (DotPrim delay) (VarE $base/7))
                    )
                    (LetD
                      (VarP $expire/7)
                      (PrimE (DotPrim expire) (VarE $base/7))
                    )
                    (LetD (VarP $id/7) (PrimE (DotPrim id) (VarE $base/7)))
                    (LetD (VarP $job/7) (PrimE (DotPrim job) (VarE $base/7)))
                    (LetD (VarP $pre/7) (PrimE (DotPrim pre) (VarE $base/7)))
                    (NewObjE
                      Object
                      (pre $pre/7)
                      (job $job/7)
                      (id $id/7)
                      (expire $expire/7)
                      (delay $delay/7)
                      (post $post/7)
                      {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          (VarP hunt)
          (FuncE
            hunt
            Local
            Returns
            (params n)
            ?@Node__2
            (SwitchE
              (VarE n)
              (case (LitP NullLit) (VarE n))
              (case
                (OptP
                  (ObjP (id (VarP node)) (pre (VarP pre)) (post (VarP post)))
                )
                (IfE
                  (PrimE (RelPrim Nat EqOp) (VarE node) (VarE id))
                  (PrimE
                    (CallPrim)
                    (VarE graft)
                    (PrimE TupPrim (VarE pre) (VarE post))
                  )
                  (LabelE
                    !
                    ?@Node__2
                    (PrimE
                      OptPrim
                      (BlockE
                        (LetD
                          (VarP $base/8)
                          (SwitchE
                            (VarE n)
                            (case
                              (LitP NullLit)
                              (PrimE (BreakPrim !) (LitE NullLit))
                            )
                            (case (OptP (VarP $v/1)) (VarE $v/1))
                          )
                        )
                        (LetD
                          (VarP $pre/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE pre))
                        )
                        (LetD
                          (VarP $post/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE post))
                        )
                        (LetD
                          (VarP $delay/8)
                          (PrimE (DotPrim delay) (VarE $base/8))
                        )
                        (LetD
                          (VarP $expire/8)
                          (PrimE (DotPrim expire) (VarE $base/8))
                        )
                        (LetD (VarP $id/8) (PrimE (DotPrim id) (VarE $base/8)))
                        (LetD
                          (VarP $job/8)
                          (PrimE (DotPrim job) (VarE $base/8))
                        )
                        (NewObjE
                          Object
                          (job $job/8)
                          (id $id/8)
                          (expire $expire/8)
                          (delay $delay/8)
                          (post $post/8)
                          (pre $pre/8)
                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE (CallPrim) (VarE hunt) (VarE @timers))
          )
        )
        (IfE
          (PrimE
            (RelPrim Nat64 EqOp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
            (LitE (Nat64Lit 0))
          )
          (BlockE
            (LetD
              WildP
              (BlockE
                (LetD WildP (PrimE global_timer_set (LitE (Nat64Lit 0))))
                (PrimE TupPrim)
              )
            )
            (AssignE (VarLE @timers) (LitE NullLit))
          )
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @set_global_timer)
    (FuncE
      @set_global_timer
      Local
      Returns
      (params time)
      ()
      (BlockE (LetD WildP (PrimE global_timer_set (VarE time))) (PrimE TupPrim))
    )
  )
  (LetD
    (VarP file$@prim)
    (BlockE
      (LetD (VarP Types) (NewObjE Module module {}))
      (LetD
        (VarP abs)
        (FuncE abs Local Returns (params x) Nat (PrimE abs (VarE x)))
      )
      (LetD
        (VarP shiftLeft)
        (FuncE
          shiftLeft
          Local
          Returns
          (params x shift)
          Nat
          (PrimE lsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP shiftRight)
        (FuncE
          shiftRight
          Local
          Returns
          (params x shift)
          Nat
          (PrimE rsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP idlHash)
        (FuncE idlHash Local Returns (params x) Nat32 (PrimE idlHash (VarE x)))
      )
      (LetD
        (VarP debugPrint)
        (FuncE debugPrint Local Returns (params x) () (PrimE print (VarE x)))
      )
      (LetD
        (VarP debugPrintNat)
        (FuncE
          debugPrintNat
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Nat) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintInt)
        (FuncE
          debugPrintInt
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Int) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintChar)
        (FuncE
          debugPrintChar
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE charToText) (VarE x))
          )
        )
      )
      (LetD
        (VarP trap)
        (FuncE trap Local Returns (params x) None__3 (PrimE trap (VarE x)))
      )
      (LetD
        (VarP rts_version)
        (FuncE rts_version Local Returns Text (PrimE rts_version))
      )
      (LetD
        (VarP rts_memory_size)
        (FuncE rts_memory_size Local Returns Nat (PrimE rts_memory_size))
      )
      (LetD
        (VarP rts_heap_size)
        (FuncE rts_heap_size Local Returns Nat (PrimE rts_heap_size))
      )
      (LetD
        (VarP rts_total_allocation)
        (FuncE
          rts_total_allocation
          Local
          Returns
          Nat
          (PrimE rts_total_allocation)
        )
      )
      (LetD
        (VarP rts_reclaimed)
        (FuncE rts_reclaimed Local Returns Nat (PrimE rts_reclaimed))
      )
      (LetD
        (VarP rts_max_live_size)
        (FuncE rts_max_live_size Local Returns Nat (PrimE rts_max_live_size))
      )
      (LetD
        (VarP rts_max_stack_size)
        (FuncE rts_max_stack_size Local Returns Nat (PrimE rts_max_stack_size))
      )
      (LetD
        (VarP rts_callback_table_count)
        (FuncE
          rts_callback_table_count
          Local
          Returns
          Nat
          (PrimE rts_callback_table_count)
        )
      )
      (LetD
        (VarP rts_callback_table_size)
        (FuncE
          rts_callback_table_size
          Local
          Returns
          Nat
          (PrimE rts_callback_table_size)
        )
      )
      (LetD
        (VarP rts_mutator_instructions)
        (FuncE
          rts_mutator_instructions
          Local
          Returns
          Nat
          (PrimE rts_mutator_instructions)
        )
      )
      (LetD
        (VarP rts_collector_instructions)
        (FuncE
          rts_collector_instructions
          Local
          Returns
          Nat
          (PrimE rts_collector_instructions)
        )
      )
      (LetD
        (VarP rts_stable_memory_size)
        (FuncE
          rts_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_stable_memory_size)
        )
      )
      (LetD
        (VarP rts_logical_stable_memory_size)
        (FuncE
          rts_logical_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_logical_stable_memory_size)
        )
      )
      (LetD (VarP int64ToInt) (VarE @int64ToInt))
      (LetD (VarP int32ToInt) (VarE @int32ToInt))
      (LetD (VarP int16ToInt) (VarE @int16ToInt))
      (LetD (VarP int8ToInt) (VarE @int8ToInt))
      (LetD (VarP nat64ToNat) (VarE @nat64ToNat))
      (LetD (VarP nat32ToNat) (VarE @nat32ToNat))
      (LetD (VarP nat16ToNat) (VarE @nat16ToNat))
      (LetD (VarP nat8ToNat) (VarE @nat8ToNat))
      (LetD
        (VarP intToInt64)
        (FuncE
          intToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32)
        (FuncE
          intToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16)
        (FuncE
          intToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8)
        (FuncE
          intToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP natToNat64)
        (FuncE
          natToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat Nat64) (VarE n))
        )
      )
      (LetD
        (VarP natToNat32)
        (FuncE
          natToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat Nat32) (VarE n))
        )
      )
      (LetD
        (VarP natToNat16)
        (FuncE
          natToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat Nat16) (VarE n))
        )
      )
      (LetD
        (VarP natToNat8)
        (FuncE
          natToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat Nat8) (VarE n))
        )
      )
      (LetD
        (VarP intToInt64Wrap)
        (FuncE
          intToInt64Wrap
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32Wrap)
        (FuncE
          intToInt32Wrap
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16Wrap)
        (FuncE
          intToInt16Wrap
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8Wrap)
        (FuncE
          intToInt8Wrap
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP intToNat64Wrap)
        (FuncE
          intToNat64Wrap
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int Nat64) (VarE n))
        )
      )
      (LetD
        (VarP intToNat32Wrap)
        (FuncE
          intToNat32Wrap
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int Nat32) (VarE n))
        )
      )
      (LetD
        (VarP intToNat16Wrap)
        (FuncE
          intToNat16Wrap
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int Nat16) (VarE n))
        )
      )
      (LetD
        (VarP intToNat8Wrap)
        (FuncE
          intToNat8Wrap
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int64ToNat64)
        (FuncE
          int64ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int64 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToInt64)
        (FuncE
          nat64ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Nat64 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int32ToNat32)
        (FuncE
          int32ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int32 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToInt32)
        (FuncE
          nat32ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Nat32 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int16ToNat16)
        (FuncE
          int16ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int16 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToInt16)
        (FuncE
          nat16ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Nat16 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int8ToNat8)
        (FuncE
          int8ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int8 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToInt8)
        (FuncE
          nat8ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Nat8 Int8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToNat16)
        (FuncE
          nat8ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat8 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat32)
        (FuncE
          nat16ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat16 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat64)
        (FuncE
          nat32ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat32 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToNat32)
        (FuncE
          nat64ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat64 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat16)
        (FuncE
          nat32ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat32 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat8)
        (FuncE
          nat16ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat16 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int8ToInt16)
        (FuncE
          int8ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int8 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt32)
        (FuncE
          int16ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int16 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt64)
        (FuncE
          int32ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int32 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int64ToInt32)
        (FuncE
          int64ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int64 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt16)
        (FuncE
          int32ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int32 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt8)
        (FuncE
          int16ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int16 Int8) (VarE n))
        )
      )
      (LetD
        (VarP charToNat32)
        (FuncE
          charToNat32
          Local
          Returns
          (params c)
          Nat32
          (PrimE (NumConvWrapPrim Char Nat32) (VarE c))
        )
      )
      (LetD
        (VarP nat32ToChar)
        (FuncE
          nat32ToChar
          Local
          Returns
          (params w)
          Char
          (PrimE (NumConvTrapPrim Nat32 Char) (VarE w))
        )
      )
      (LetD
        (VarP charToText)
        (FuncE
          charToText
          Local
          Returns
          (params c)
          Text
          (PrimE conv_Char_Text (VarE c))
        )
      )
      (LetD
        (VarP charToUpper)
        (FuncE
          charToUpper
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_upper (VarE c))
        )
      )
      (LetD
        (VarP charToLower)
        (FuncE
          charToLower
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_lower (VarE c))
        )
      )
      (LetD
        (VarP charIsWhitespace)
        (FuncE
          charIsWhitespace
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_whitespace (VarE c))
        )
      )
      (LetD
        (VarP charIsLowercase)
        (FuncE
          charIsLowercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_lowercase (VarE c))
        )
      )
      (LetD
        (VarP charIsUppercase)
        (FuncE
          charIsUppercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_uppercase (VarE c))
        )
      )
      (LetD
        (VarP charIsAlphabetic)
        (FuncE
          charIsAlphabetic
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_alphabetic (VarE c))
        )
      )
      (LetD
        (VarP blobCompare)
        (FuncE
          blobCompare
          Local
          Returns
          (params b1 b2)
          Int8
          (PrimE blob_compare (VarE b1) (VarE b2))
        )
      )
      (LetD
        (VarP hashBlob)
        (FuncE
          hashBlob
          Local
          Returns
          (params b)
          Nat32
          (PrimE crc32Hash (VarE b))
        )
      )
      (LetD
        (VarP decodeUtf8)
        (FuncE
          decodeUtf8
          Local
          Returns
          (params b)
          ?Text
          (PrimE DecodeUtf8 (VarE b))
        )
      )
      (LetD
        (VarP encodeUtf8)
        (FuncE
          encodeUtf8
          Local
          Returns
          (params t)
          Blob
          (PrimE EncodeUtf8 (VarE t))
        )
      )
      (LetD
        (VarP textCompare)
        (FuncE
          textCompare
          Local
          Returns
          (params t1 t2)
          Int8
          (PrimE text_compare (VarE t1) (VarE t2))
        )
      )
      (LetD
        (VarP textLowercase)
        (FuncE
          textLowercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_lowercase (VarE t))
        )
      )
      (LetD
        (VarP textUppercase)
        (FuncE
          textUppercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_uppercase (VarE t))
        )
      )
      (LetD
        (VarP popcntNat8)
        (FuncE
          popcntNat8
          Local
          Returns
          (params w)
          Nat8
          (PrimE popcnt8 (VarE w))
        )
      )
      (LetD
        (VarP clzNat8)
        (FuncE clzNat8 Local Returns (params w) Nat8 (PrimE clz8 (VarE w)))
      )
      (LetD
        (VarP ctzNat8)
        (FuncE ctzNat8 Local Returns (params w) Nat8 (PrimE ctz8 (VarE w)))
      )
      (LetD
        (VarP btstNat8)
        (FuncE
          btstNat8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat8 EqOp)
              (PrimE btst8 (VarE w) (VarE amount))
              (LitE (Nat8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat16)
        (FuncE
          popcntNat16
          Local
          Returns
          (params w)
          Nat16
          (PrimE popcnt16 (VarE w))
        )
      )
      (LetD
        (VarP clzNat16)
        (FuncE clzNat16 Local Returns (params w) Nat16 (PrimE clz16 (VarE w)))
      )
      (LetD
        (VarP ctzNat16)
        (FuncE ctzNat16 Local Returns (params w) Nat16 (PrimE ctz16 (VarE w)))
      )
      (LetD
        (VarP btstNat16)
        (FuncE
          btstNat16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat16 EqOp)
              (PrimE btst16 (VarE w) (VarE amount))
              (LitE (Nat16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat32)
        (FuncE
          popcntNat32
          Local
          Returns
          (params w)
          Nat32
          (PrimE popcnt32 (VarE w))
        )
      )
      (LetD
        (VarP clzNat32)
        (FuncE clzNat32 Local Returns (params w) Nat32 (PrimE clz32 (VarE w)))
      )
      (LetD
        (VarP ctzNat32)
        (FuncE ctzNat32 Local Returns (params w) Nat32 (PrimE ctz32 (VarE w)))
      )
      (LetD
        (VarP btstNat32)
        (FuncE
          btstNat32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat32 EqOp)
              (PrimE btst32 (VarE w) (VarE amount))
              (LitE (Nat32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat64)
        (FuncE
          popcntNat64
          Local
          Returns
          (params w)
          Nat64
          (PrimE popcnt64 (VarE w))
        )
      )
      (LetD
        (VarP clzNat64)
        (FuncE clzNat64 Local Returns (params w) Nat64 (PrimE clz64 (VarE w)))
      )
      (LetD
        (VarP ctzNat64)
        (FuncE ctzNat64 Local Returns (params w) Nat64 (PrimE ctz64 (VarE w)))
      )
      (LetD
        (VarP btstNat64)
        (FuncE
          btstNat64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE btst64 (VarE w) (VarE amount))
              (LitE (Nat64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt8)
        (FuncE
          popcntInt8
          Local
          Returns
          (params w)
          Int8
          (PrimE popcntInt8 (VarE w))
        )
      )
      (LetD
        (VarP clzInt8)
        (FuncE clzInt8 Local Returns (params w) Int8 (PrimE clzInt8 (VarE w)))
      )
      (LetD
        (VarP ctzInt8)
        (FuncE ctzInt8 Local Returns (params w) Int8 (PrimE ctzInt8 (VarE w)))
      )
      (LetD
        (VarP btstInt8)
        (FuncE
          btstInt8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int8 EqOp)
              (PrimE btstInt8 (VarE w) (VarE amount))
              (LitE (Int8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt16)
        (FuncE
          popcntInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE popcntInt16 (VarE w))
        )
      )
      (LetD
        (VarP clzInt16)
        (FuncE
          clzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE clzInt16 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt16)
        (FuncE
          ctzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE ctzInt16 (VarE w))
        )
      )
      (LetD
        (VarP btstInt16)
        (FuncE
          btstInt16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int16 EqOp)
              (PrimE btstInt16 (VarE w) (VarE amount))
              (LitE (Int16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt32)
        (FuncE
          popcntInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE popcntInt32 (VarE w))
        )
      )
      (LetD
        (VarP clzInt32)
        (FuncE
          clzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE clzInt32 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt32)
        (FuncE
          ctzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE ctzInt32 (VarE w))
        )
      )
      (LetD
        (VarP btstInt32)
        (FuncE
          btstInt32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int32 EqOp)
              (PrimE btstInt32 (VarE w) (VarE amount))
              (LitE (Int32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt64)
        (FuncE
          popcntInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE popcntInt64 (VarE w))
        )
      )
      (LetD
        (VarP clzInt64)
        (FuncE
          clzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE clzInt64 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt64)
        (FuncE
          ctzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE ctzInt64 (VarE w))
        )
      )
      (LetD
        (VarP btstInt64)
        (FuncE
          btstInt64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int64 EqOp)
              (PrimE btstInt64 (VarE w) (VarE amount))
              (LitE (Int64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP floatAbs)
        (FuncE floatAbs Local Returns (params f) Float (PrimE fabs (VarE f)))
      )
      (LetD
        (VarP floatSqrt)
        (FuncE floatSqrt Local Returns (params f) Float (PrimE fsqrt (VarE f)))
      )
      (LetD
        (VarP floatCeil)
        (FuncE floatCeil Local Returns (params f) Float (PrimE fceil (VarE f)))
      )
      (LetD
        (VarP floatFloor)
        (FuncE
          floatFloor
          Local
          Returns
          (params f)
          Float
          (PrimE ffloor (VarE f))
        )
      )
      (LetD
        (VarP floatTrunc)
        (FuncE
          floatTrunc
          Local
          Returns
          (params f)
          Float
          (PrimE ftrunc (VarE f))
        )
      )
      (LetD
        (VarP floatNearest)
        (FuncE
          floatNearest
          Local
          Returns
          (params f)
          Float
          (PrimE fnearest (VarE f))
        )
      )
      (LetD
        (VarP floatMin)
        (FuncE
          floatMin
          Local
          Returns
          (params f g)
          Float
          (PrimE fmin (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatMax)
        (FuncE
          floatMax
          Local
          Returns
          (params f g)
          Float
          (PrimE fmax (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatCopySign)
        (FuncE
          floatCopySign
          Local
          Returns
          (params f g)
          Float
          (PrimE fcopysign (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatToInt)
        (FuncE
          floatToInt
          Local
          Returns
          (params f)
          Int
          (PrimE (NumConvTrapPrim Float Int) (VarE f))
        )
      )
      (LetD
        (VarP intToFloat)
        (FuncE
          intToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int Float) (VarE n))
        )
      )
      (LetD
        (VarP floatToInt64)
        (FuncE
          floatToInt64
          Local
          Returns
          (params f)
          Int64
          (PrimE (NumConvTrapPrim Float Int64) (VarE f))
        )
      )
      (LetD
        (VarP int64ToFloat)
        (FuncE
          int64ToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int64 Float) (VarE n))
        )
      )
      (LetD (VarP floatToText) (VarE @text_of_Float))
      (LetD
        (VarP floatToFormattedText)
        (FuncE
          floatToFormattedText
          Local
          Returns
          (params f prec mode)
          Text
          (PrimE fmtFloat->Text (VarE f) (VarE prec) (VarE mode))
        )
      )
      (LetD
        (VarP sin)
        (FuncE sin Local Returns (params f) Float (PrimE fsin (VarE f)))
      )
      (LetD
        (VarP cos)
        (FuncE cos Local Returns (params f) Float (PrimE fcos (VarE f)))
      )
      (LetD
        (VarP tan)
        (FuncE tan Local Returns (params f) Float (PrimE ftan (VarE f)))
      )
      (LetD
        (VarP arcsin)
        (FuncE arcsin Local Returns (params f) Float (PrimE fasin (VarE f)))
      )
      (LetD
        (VarP arccos)
        (FuncE arccos Local Returns (params f) Float (PrimE facos (VarE f)))
      )
      (LetD
        (VarP arctan)
        (FuncE arctan Local Returns (params f) Float (PrimE fatan (VarE f)))
      )
      (LetD
        (VarP arctan2)
        (FuncE
          arctan2
          Local
          Returns
          (params y x)
          Float
          (PrimE fatan2 (VarE y) (VarE x))
        )
      )
      (LetD
        (VarP exp)
        (FuncE exp Local Returns (params f) Float (PrimE fexp (VarE f)))
      )
      (LetD
        (VarP log)
        (FuncE log Local Returns (params f) Float (PrimE flog (VarE f)))
      )
      (LetD
        (VarP Array_init)
        (FuncE
          Array_init
          Local
          Returns
          (T__528 Any)
          (params len x)
          [var T__528]
          (PrimE Array.init (VarE len) (VarE x))
        )
      )
      (LetD
        (VarP Array_tabulate)
        (FuncE
          Array_tabulate
          Local
          Returns
          (T__529 Any)
          (params len gen)
          [T__529]
          (PrimE Array.tabulate (VarE len) (VarE gen))
        )
      )
      (LetD
        (VarP blobToArray)
        (FuncE
          blobToArray
          Local
          Returns
          (params b)
          [Nat8]
          (PrimE blobToArray (VarE b))
        )
      )
      (LetD
        (VarP blobToArrayMut)
        (FuncE
          blobToArrayMut
          Local
          Returns
          (params b)
          [var Nat8]
          (PrimE blobToArrayMut (VarE b))
        )
      )
      (LetD
        (VarP arrayToBlob)
        (FuncE
          arrayToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayToBlob (VarE a))
        )
      )
      (LetD
        (VarP arrayMutToBlob)
        (FuncE
          arrayMutToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayMutToBlob (VarE a))
        )
      )
      (LetD
        (VarP error)
        (FuncE
          error
          Local
          Returns
          (params message)
          Error
          (BlockE
            (LetD
              (VarP e)
              (PrimE
                TupPrim
                (PrimE (TagE canister_reject) (PrimE TupPrim))
                (VarE message)
              )
            )
            (PrimE (CastPrim (ErrorCode__2, Text) Error) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorCode)
        (FuncE
          errorCode
          Local
          Returns
          (params e)
          ErrorCode__2
          (PrimE
            (ProjPrim 0)
            (PrimE (CastPrim Error (ErrorCode__2, Text)) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorMessage)
        (FuncE
          errorMessage
          Local
          Returns
          (params e)
          Text
          (PrimE
            (ProjPrim 1)
            (PrimE (CastPrim Error (ErrorCode__2, Text)) (VarE e))
          )
        )
      )
      (LetD (VarP time) (FuncE time Local Returns Nat64 (PrimE SystemTimePrim)))
      (LetD
        (VarP blobOfPrincipal)
        (FuncE
          blobOfPrincipal
          Local
          Returns
          (params id)
          Blob
          (PrimE (CastPrim Principal Blob) (VarE id))
        )
      )
      (LetD
        (VarP principalOfBlob)
        (FuncE
          principalOfBlob
          Local
          Returns
          (params act)
          Principal
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE
                  (RelPrim Nat GtOp)
                  (PrimE blob_size (VarE act))
                  (LitE (NatLit 29))
                )
                (PrimE
                  (CallPrim)
                  (VarE trap)
                  (LitE (TextLit blob too long for principal))
                )
                (PrimE TupPrim)
              )
            )
            (PrimE (CastPrim Blob Principal) (VarE act))
          )
        )
      )
      (LetD
        (VarP principalOfActor)
        (FuncE
          principalOfActor
          Local
          Returns
          (params act)
          Principal
          (PrimE (CastPrim actor {} Principal) (VarE act))
        )
      )
      (LetD
        (VarP isController)
        (FuncE
          isController
          Local
          Returns
          (params p)
          Bool
          (PrimE is_controller (VarE p))
        )
      )
      (LetD
        (VarP canisterVersion)
        (FuncE canisterVersion Local Returns Nat64 (PrimE canister_version))
      )
      (LetD (VarP createActor) (VarE @create_actor_helper))
      (LetD
        (VarP cyclesBalance)
        (FuncE cyclesBalance Local Returns Nat (PrimE SystemCyclesBalancePrim))
      )
      (LetD
        (VarP cyclesAvailable)
        (FuncE
          cyclesAvailable
          Local
          Returns
          Nat
          (PrimE SystemCyclesAvailablePrim)
        )
      )
      (LetD
        (VarP cyclesRefunded)
        (FuncE cyclesRefunded Local Returns Nat (VarE @refund))
      )
      (LetD
        (VarP cyclesAccept)
        (FuncE
          cyclesAccept
          Local
          Returns
          ($__2262 Any)
          (params amount)
          Nat
          (PrimE SystemCyclesAcceptPrim (VarE amount))
        )
      )
      (LetD
        (VarP cyclesAdd)
        (FuncE
          cyclesAdd
          Local
          Returns
          ($__2263 Any)
          (params amount)
          ()
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat EqOp) (VarE amount) (LitE (NatLit 0)))
                (PrimE RetPrim (PrimE TupPrim))
                (PrimE TupPrim)
              )
            )
            (LetD
              WildP
              (AssignE
                (VarLE @cycles)
                (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE amount))
              )
            )
            (IfE
              (PrimE
                (RelPrim Nat GtOp)
                (VarE @cycles)
                (LitE
                  (NatLit 340_282_366_920_938_463_463_374_607_431_768_211_455)
                )
              )
              (PrimE
                (CallPrim)
                (VarE trap)
                (LitE (TextLit cannot add more than 2^128 cycles))
              )
              (PrimE TupPrim)
            )
          )
        )
      )
      (LetD
        (VarP setCertifiedData)
        (FuncE
          setCertifiedData
          Local
          Returns
          (params data)
          ()
          (PrimE SetCertifiedData (VarE data))
        )
      )
      (LetD
        (VarP getCertificate)
        (FuncE getCertificate Local Returns ?Blob (PrimE GetCertificate))
      )
      (LetD
        (VarP stableMemorySize)
        (FuncE stableMemorySize Local Returns Nat64 (PrimE stableMemorySize))
      )
      (LetD
        (VarP stableMemoryGrow)
        (FuncE
          stableMemoryGrow
          Local
          Returns
          (params pages)
          Nat64
          (PrimE stableMemoryGrow (VarE pages))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat32)
        (FuncE
          stableMemoryLoadNat32
          Local
          Returns
          (params offset)
          Nat32
          (PrimE stableMemoryLoadNat32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat32)
        (FuncE
          stableMemoryStoreNat32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat8)
        (FuncE
          stableMemoryLoadNat8
          Local
          Returns
          (params offset)
          Nat8
          (PrimE stableMemoryLoadNat8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat8)
        (FuncE
          stableMemoryStoreNat8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat16)
        (FuncE
          stableMemoryLoadNat16
          Local
          Returns
          (params offset)
          Nat16
          (PrimE stableMemoryLoadNat16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat16)
        (FuncE
          stableMemoryStoreNat16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat64)
        (FuncE
          stableMemoryLoadNat64
          Local
          Returns
          (params offset)
          Nat64
          (PrimE stableMemoryLoadNat64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat64)
        (FuncE
          stableMemoryStoreNat64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt32)
        (FuncE
          stableMemoryLoadInt32
          Local
          Returns
          (params offset)
          Int32
          (PrimE stableMemoryLoadInt32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt32)
        (FuncE
          stableMemoryStoreInt32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt8)
        (FuncE
          stableMemoryLoadInt8
          Local
          Returns
          (params offset)
          Int8
          (PrimE stableMemoryLoadInt8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt8)
        (FuncE
          stableMemoryStoreInt8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt16)
        (FuncE
          stableMemoryLoadInt16
          Local
          Returns
          (params offset)
          Int16
          (PrimE stableMemoryLoadInt16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt16)
        (FuncE
          stableMemoryStoreInt16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt64)
        (FuncE
          stableMemoryLoadInt64
          Local
          Returns
          (params offset)
          Int64
          (PrimE stableMemoryLoadInt64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt64)
        (FuncE
          stableMemoryStoreInt64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadFloat)
        (FuncE
          stableMemoryLoadFloat
          Local
          Returns
          (params offset)
          Float
          (PrimE stableMemoryLoadFloat (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreFloat)
        (FuncE
          stableMemoryStoreFloat
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreFloat (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadBlob)
        (FuncE
          stableMemoryLoadBlob
          Local
          Returns
          (params offset size)
          Blob
          (PrimE stableMemoryLoadBlob (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP stableMemoryStoreBlob)
        (FuncE
          stableMemoryStoreBlob
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreBlob (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableVarQuery)
        (FuncE
          stableVarQuery
          Local
          Returns
          shared query <system>() -> replies {size : Nat64}
          (PrimE stableVarQuery)
        )
      )
      (LetD
        (VarP regionNew)
        (FuncE regionNew Local Returns Region (PrimE regionNew))
      )
      (LetD
        (VarP regionId)
        (FuncE regionId Local Returns (params r) Nat (PrimE regionId (VarE r)))
      )
      (LetD
        (VarP regionSize)
        (FuncE
          regionSize
          Local
          Returns
          (params r)
          Nat64
          (PrimE regionSize (VarE r))
        )
      )
      (LetD
        (VarP regionGrow)
        (FuncE
          regionGrow
          Local
          Returns
          (params r pages)
          Nat64
          (PrimE regionGrow (VarE r) (VarE pages))
        )
      )
      (LetD
        (VarP regionLoadNat32)
        (FuncE
          regionLoadNat32
          Local
          Returns
          (params r offset)
          Nat32
          (PrimE regionLoadNat32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat32)
        (FuncE
          regionStoreNat32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat8)
        (FuncE
          regionLoadNat8
          Local
          Returns
          (params r offset)
          Nat8
          (PrimE regionLoadNat8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat8)
        (FuncE
          regionStoreNat8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat16)
        (FuncE
          regionLoadNat16
          Local
          Returns
          (params r offset)
          Nat16
          (PrimE regionLoadNat16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat16)
        (FuncE
          regionStoreNat16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat64)
        (FuncE
          regionLoadNat64
          Local
          Returns
          (params r offset)
          Nat64
          (PrimE regionLoadNat64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat64)
        (FuncE
          regionStoreNat64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt32)
        (FuncE
          regionLoadInt32
          Local
          Returns
          (params r offset)
          Int32
          (PrimE regionLoadInt32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt32)
        (FuncE
          regionStoreInt32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt8)
        (FuncE
          regionLoadInt8
          Local
          Returns
          (params r offset)
          Int8
          (PrimE regionLoadInt8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt8)
        (FuncE
          regionStoreInt8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt16)
        (FuncE
          regionLoadInt16
          Local
          Returns
          (params r offset)
          Int16
          (PrimE regionLoadInt16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt16)
        (FuncE
          regionStoreInt16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt64)
        (FuncE
          regionLoadInt64
          Local
          Returns
          (params r offset)
          Int64
          (PrimE regionLoadInt64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt64)
        (FuncE
          regionStoreInt64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadFloat)
        (FuncE
          regionLoadFloat
          Local
          Returns
          (params r offset)
          Float
          (PrimE regionLoadFloat (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreFloat)
        (FuncE
          regionStoreFloat
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreFloat (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadBlob)
        (FuncE
          regionLoadBlob
          Local
          Returns
          (params r offset size)
          Blob
          (PrimE regionLoadBlob (VarE r) (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP regionStoreBlob)
        (FuncE
          regionStoreBlob
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreBlob (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD (VarP call_raw) (VarE @call_raw))
      (LetD
        (VarP performanceCounter)
        (FuncE
          performanceCounter
          Local
          Returns
          (params counter)
          Nat64
          (PrimE performanceCounter (VarE counter))
        )
      )
      (LetD
        (VarP forall)
        (FuncE
          forall
          Local
          Returns
          (T__530 Any)
          (params f)
          Bool
          (PrimE forall (VarE f))
        )
      )
      (LetD
        (VarP exists)
        (FuncE
          exists
          Local
          Returns
          (T__531 Any)
          (params f)
          Bool
          (PrimE exists (VarE f))
        )
      )
      (LetD
        (VarP Ret)
        (FuncE Ret Local Returns (T__532 Any) T__532 (PrimE viperRet))
      )
      (LetD (VarP setTimer) (VarE @setTimer))
      (LetD (VarP cancelTimer) (VarE @cancelTimer))
      (NewObjE
        Module
        (trap trap)
        (time time)
        (textUppercase textUppercase)
        (textLowercase textLowercase)
        (textCompare textCompare)
        (tan tan)
        (stableVarQuery stableVarQuery)
        (stableMemoryStoreNat8 stableMemoryStoreNat8)
        (stableMemoryStoreNat64 stableMemoryStoreNat64)
        (stableMemoryStoreNat32 stableMemoryStoreNat32)
        (stableMemoryStoreNat16 stableMemoryStoreNat16)
        (stableMemoryStoreInt8 stableMemoryStoreInt8)
        (stableMemoryStoreInt64 stableMemoryStoreInt64)
        (stableMemoryStoreInt32 stableMemoryStoreInt32)
        (stableMemoryStoreInt16 stableMemoryStoreInt16)
        (stableMemoryStoreFloat stableMemoryStoreFloat)
        (stableMemoryStoreBlob stableMemoryStoreBlob)
        (stableMemorySize stableMemorySize)
        (stableMemoryLoadNat8 stableMemoryLoadNat8)
        (stableMemoryLoadNat64 stableMemoryLoadNat64)
        (stableMemoryLoadNat32 stableMemoryLoadNat32)
        (stableMemoryLoadNat16 stableMemoryLoadNat16)
        (stableMemoryLoadInt8 stableMemoryLoadInt8)
        (stableMemoryLoadInt64 stableMemoryLoadInt64)
        (stableMemoryLoadInt32 stableMemoryLoadInt32)
        (stableMemoryLoadInt16 stableMemoryLoadInt16)
        (stableMemoryLoadFloat stableMemoryLoadFloat)
        (stableMemoryLoadBlob stableMemoryLoadBlob)
        (stableMemoryGrow stableMemoryGrow)
        (sin sin)
        (shiftRight shiftRight)
        (shiftLeft shiftLeft)
        (setTimer setTimer)
        (setCertifiedData setCertifiedData)
        (rts_version rts_version)
        (rts_total_allocation rts_total_allocation)
        (rts_stable_memory_size rts_stable_memory_size)
        (rts_reclaimed rts_reclaimed)
        (rts_mutator_instructions rts_mutator_instructions)
        (rts_memory_size rts_memory_size)
        (rts_max_stack_size rts_max_stack_size)
        (rts_max_live_size rts_max_live_size)
        (rts_logical_stable_memory_size rts_logical_stable_memory_size)
        (rts_heap_size rts_heap_size)
        (rts_collector_instructions rts_collector_instructions)
        (rts_callback_table_size rts_callback_table_size)
        (rts_callback_table_count rts_callback_table_count)
        (regionStoreNat8 regionStoreNat8)
        (regionStoreNat64 regionStoreNat64)
        (regionStoreNat32 regionStoreNat32)
        (regionStoreNat16 regionStoreNat16)
        (regionStoreInt8 regionStoreInt8)
        (regionStoreInt64 regionStoreInt64)
        (regionStoreInt32 regionStoreInt32)
        (regionStoreInt16 regionStoreInt16)
        (regionStoreFloat regionStoreFloat)
        (regionStoreBlob regionStoreBlob)
        (regionSize regionSize)
        (regionNew regionNew)
        (regionLoadNat8 regionLoadNat8)
        (regionLoadNat64 regionLoadNat64)
        (regionLoadNat32 regionLoadNat32)
        (regionLoadNat16 regionLoadNat16)
        (regionLoadInt8 regionLoadInt8)
        (regionLoadInt64 regionLoadInt64)
        (regionLoadInt32 regionLoadInt32)
        (regionLoadInt16 regionLoadInt16)
        (regionLoadFloat regionLoadFloat)
        (regionLoadBlob regionLoadBlob)
        (regionId regionId)
        (regionGrow regionGrow)
        (principalOfBlob principalOfBlob)
        (principalOfActor principalOfActor)
        (popcntNat8 popcntNat8)
        (popcntNat64 popcntNat64)
        (popcntNat32 popcntNat32)
        (popcntNat16 popcntNat16)
        (popcntInt8 popcntInt8)
        (popcntInt64 popcntInt64)
        (popcntInt32 popcntInt32)
        (popcntInt16 popcntInt16)
        (performanceCounter performanceCounter)
        (natToNat8 natToNat8)
        (natToNat64 natToNat64)
        (natToNat32 natToNat32)
        (natToNat16 natToNat16)
        (nat8ToNat16 nat8ToNat16)
        (nat8ToNat nat8ToNat)
        (nat8ToInt8 nat8ToInt8)
        (nat64ToNat32 nat64ToNat32)
        (nat64ToNat nat64ToNat)
        (nat64ToInt64 nat64ToInt64)
        (nat32ToNat64 nat32ToNat64)
        (nat32ToNat16 nat32ToNat16)
        (nat32ToNat nat32ToNat)
        (nat32ToInt32 nat32ToInt32)
        (nat32ToChar nat32ToChar)
        (nat16ToNat8 nat16ToNat8)
        (nat16ToNat32 nat16ToNat32)
        (nat16ToNat nat16ToNat)
        (nat16ToInt16 nat16ToInt16)
        (log log)
        (isController isController)
        (intToNat8Wrap intToNat8Wrap)
        (intToNat64Wrap intToNat64Wrap)
        (intToNat32Wrap intToNat32Wrap)
        (intToNat16Wrap intToNat16Wrap)
        (intToInt8Wrap intToInt8Wrap)
        (intToInt8 intToInt8)
        (intToInt64Wrap intToInt64Wrap)
        (intToInt64 intToInt64)
        (intToInt32Wrap intToInt32Wrap)
        (intToInt32 intToInt32)
        (intToInt16Wrap intToInt16Wrap)
        (intToInt16 intToInt16)
        (intToFloat intToFloat)
        (int8ToNat8 int8ToNat8)
        (int8ToInt16 int8ToInt16)
        (int8ToInt int8ToInt)
        (int64ToNat64 int64ToNat64)
        (int64ToInt32 int64ToInt32)
        (int64ToInt int64ToInt)
        (int64ToFloat int64ToFloat)
        (int32ToNat32 int32ToNat32)
        (int32ToInt64 int32ToInt64)
        (int32ToInt16 int32ToInt16)
        (int32ToInt int32ToInt)
        (int16ToNat16 int16ToNat16)
        (int16ToInt8 int16ToInt8)
        (int16ToInt32 int16ToInt32)
        (int16ToInt int16ToInt)
        (idlHash idlHash)
        (hashBlob hashBlob)
        (getCertificate getCertificate)
        (forall forall)
        (floatTrunc floatTrunc)
        (floatToText floatToText)
        (floatToInt64 floatToInt64)
        (floatToInt floatToInt)
        (floatToFormattedText floatToFormattedText)
        (floatSqrt floatSqrt)
        (floatNearest floatNearest)
        (floatMin floatMin)
        (floatMax floatMax)
        (floatFloor floatFloor)
        (floatCopySign floatCopySign)
        (floatCeil floatCeil)
        (floatAbs floatAbs)
        (exp exp)
        (exists exists)
        (errorMessage errorMessage)
        (errorCode errorCode)
        (error error)
        (encodeUtf8 encodeUtf8)
        (decodeUtf8 decodeUtf8)
        (debugPrintNat debugPrintNat)
        (debugPrintInt debugPrintInt)
        (debugPrintChar debugPrintChar)
        (debugPrint debugPrint)
        (cyclesRefunded cyclesRefunded)
        (cyclesBalance cyclesBalance)
        (cyclesAvailable cyclesAvailable)
        (cyclesAdd cyclesAdd)
        (cyclesAccept cyclesAccept)
        (ctzNat8 ctzNat8)
        (ctzNat64 ctzNat64)
        (ctzNat32 ctzNat32)
        (ctzNat16 ctzNat16)
        (ctzInt8 ctzInt8)
        (ctzInt64 ctzInt64)
        (ctzInt32 ctzInt32)
        (ctzInt16 ctzInt16)
        (createActor createActor)
        (cos cos)
        (clzNat8 clzNat8)
        (clzNat64 clzNat64)
        (clzNat32 clzNat32)
        (clzNat16 clzNat16)
        (clzInt8 clzInt8)
        (clzInt64 clzInt64)
        (clzInt32 clzInt32)
        (clzInt16 clzInt16)
        (charToUpper charToUpper)
        (charToText charToText)
        (charToNat32 charToNat32)
        (charToLower charToLower)
        (charIsWhitespace charIsWhitespace)
        (charIsUppercase charIsUppercase)
        (charIsLowercase charIsLowercase)
        (charIsAlphabetic charIsAlphabetic)
        (canisterVersion canisterVersion)
        (cancelTimer cancelTimer)
        (call_raw call_raw)
        (btstNat8 btstNat8)
        (btstNat64 btstNat64)
        (btstNat32 btstNat32)
        (btstNat16 btstNat16)
        (btstInt8 btstInt8)
        (btstInt64 btstInt64)
        (btstInt32 btstInt32)
        (btstInt16 btstInt16)
        (blobToArrayMut blobToArrayMut)
        (blobToArray blobToArray)
        (blobOfPrincipal blobOfPrincipal)
        (blobCompare blobCompare)
        (arrayToBlob arrayToBlob)
        (arrayMutToBlob arrayMutToBlob)
        (arctan2 arctan2)
        (arctan arctan)
        (arcsin arcsin)
        (arccos arccos)
        (abs abs)
        (Types Types)
        (Ret Ret)
        (Array_tabulate Array_tabulate)
        (Array_init Array_init)
        module {Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; Ret : <T>() -> T; Types : module {}; abs : Int -> Nat; arccos : Float -> Float; arcsin : Float -> Float; arctan : Float -> Float; arctan2 : (Float, Float) -> Float; arrayMutToBlob : [var Nat8] -> Blob; arrayToBlob : [Nat8] -> Blob; blobCompare : (Blob, Blob) -> Int8; blobOfPrincipal : Principal -> Blob; blobToArray : Blob -> [Nat8]; blobToArrayMut : Blob -> [var Nat8]; btstInt16 : (Int16, Int16) -> Bool; btstInt32 : (Int32, Int32) -> Bool; btstInt64 : (Int64, Int64) -> Bool; btstInt8 : (Int8, Int8) -> Bool; btstNat16 : (Nat16, Nat16) -> Bool; btstNat32 : (Nat32, Nat32) -> Bool; btstNat64 : (Nat64, Nat64) -> Bool; btstNat8 : (Nat8, Nat8) -> Bool; call_raw : <system>(Principal, Text, Blob) -> (Blob -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; cancelTimer : Nat -> (); canisterVersion : () -> Nat64; charIsAlphabetic : Char -> Bool; charIsLowercase : Char -> Bool; charIsUppercase : Char -> Bool; charIsWhitespace : Char -> Bool; charToLower : Char -> Char; charToNat32 : Char -> Nat32; charToText : Char -> Text; charToUpper : Char -> Char; clzInt16 : Int16 -> Int16; clzInt32 : Int32 -> Int32; clzInt64 : Int64 -> Int64; clzInt8 : Int8 -> Int8; clzNat16 : Nat16 -> Nat16; clzNat32 : Nat32 -> Nat32; clzNat64 : Nat64 -> Nat64; clzNat8 : Nat8 -> Nat8; cos : Float -> Float; createActor : <system>(Blob, Blob) -> (Principal -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; ctzInt16 : Int16 -> Int16; ctzInt32 : Int32 -> Int32; ctzInt64 : Int64 -> Int64; ctzInt8 : Int8 -> Int8; ctzNat16 : Nat16 -> Nat16; ctzNat32 : Nat32 -> Nat32; ctzNat64 : Nat64 -> Nat64; ctzNat8 : Nat8 -> Nat8; cyclesAccept : <system>Nat -> Nat; cyclesAdd : <system>Nat -> (); cyclesAvailable : () -> Nat; cyclesBalance : () -> Nat; cyclesRefunded : () -> Nat; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); decodeUtf8 : Blob -> ?Text; encodeUtf8 : Text -> Blob; error : Text -> Error; errorCode : Error -> ErrorCode__2; errorMessage : Error -> Text; exists : <T>(T -> Bool) -> Bool; exp : Float -> Float; floatAbs : Float -> Float; floatCeil : Float -> Float; floatCopySign : (Float, Float) -> Float; floatFloor : Float -> Float; floatMax : (Float, Float) -> Float; floatMin : (Float, Float) -> Float; floatNearest : Float -> Float; floatSqrt : Float -> Float; floatToFormattedText : (Float, Nat8, Nat8) -> Text; floatToInt : Float -> Int; floatToInt64 : Float -> Int64; floatToText : Float -> Text; floatTrunc : Float -> Float; forall : <T>(T -> Bool) -> Bool; getCertificate : () -> ?Blob; hashBlob : Blob -> Nat32; idlHash : Text -> Nat32; int16ToInt : Int16 -> Int; int16ToInt32 : Int16 -> Int32; int16ToInt8 : Int16 -> Int8; int16ToNat16 : Int16 -> Nat16; int32ToInt : Int32 -> Int; int32ToInt16 : Int32 -> Int16; int32ToInt64 : Int32 -> Int64; int32ToNat32 : Int32 -> Nat32; int64ToFloat : Int64 -> Float; int64ToInt : Int64 -> Int; int64ToInt32 : Int64 -> Int32; int64ToNat64 : Int64 -> Nat64; int8ToInt : Int8 -> Int; int8ToInt16 : Int8 -> Int16; int8ToNat8 : Int8 -> Nat8; intToFloat : Int -> Float; intToInt16 : Int -> Int16; intToInt16Wrap : Int -> Int16; intToInt32 : Int -> Int32; intToInt32Wrap : Int -> Int32; intToInt64 : Int -> Int64; intToInt64Wrap : Int -> Int64; intToInt8 : Int -> Int8; intToInt8Wrap : Int -> Int8; intToNat16Wrap : Int -> Nat16; intToNat32Wrap : Int -> Nat32; intToNat64Wrap : Int -> Nat64; intToNat8Wrap : Int -> Nat8; isController : Principal -> Bool; log : Float -> Float; nat16ToInt16 : Nat16 -> Int16; nat16ToNat : Nat16 -> Nat; nat16ToNat32 : Nat16 -> Nat32; nat16ToNat8 : Nat16 -> Nat8; nat32ToChar : Nat32 -> Char; nat32ToInt32 : Nat32 -> Int32; nat32ToNat : Nat32 -> Nat; nat32ToNat16 : Nat32 -> Nat16; nat32ToNat64 : Nat32 -> Nat64; nat64ToInt64 : Nat64 -> Int64; nat64ToNat : Nat64 -> Nat; nat64ToNat32 : Nat64 -> Nat32; nat8ToInt8 : Nat8 -> Int8; nat8ToNat : Nat8 -> Nat; nat8ToNat16 : Nat8 -> Nat16; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; performanceCounter : Nat32 -> Nat64; popcntInt16 : Int16 -> Int16; popcntInt32 : Int32 -> Int32; popcntInt64 : Int64 -> Int64; popcntInt8 : Int8 -> Int8; popcntNat16 : Nat16 -> Nat16; popcntNat32 : Nat32 -> Nat32; popcntNat64 : Nat64 -> Nat64; popcntNat8 : Nat8 -> Nat8; principalOfActor : (actor {}) -> Principal; principalOfBlob : Blob -> Principal; regionGrow : (Region, Nat64) -> Nat64; regionId : Region -> Nat; regionLoadBlob : (Region, Nat64, Nat) -> Blob; regionLoadFloat : (Region, Nat64) -> Float; regionLoadInt16 : (Region, Nat64) -> Int16; regionLoadInt32 : (Region, Nat64) -> Int32; regionLoadInt64 : (Region, Nat64) -> Int64; regionLoadInt8 : (Region, Nat64) -> Int8; regionLoadNat16 : (Region, Nat64) -> Nat16; regionLoadNat32 : (Region, Nat64) -> Nat32; regionLoadNat64 : (Region, Nat64) -> Nat64; regionLoadNat8 : (Region, Nat64) -> Nat8; regionNew : () -> Region; regionSize : Region -> Nat64; regionStoreBlob : (Region, Nat64, Blob) -> (); regionStoreFloat : (Region, Nat64, Float) -> (); regionStoreInt16 : (Region, Nat64, Int16) -> (); regionStoreInt32 : (Region, Nat64, Int32) -> (); regionStoreInt64 : (Region, Nat64, Int64) -> (); regionStoreInt8 : (Region, Nat64, Int8) -> (); regionStoreNat16 : (Region, Nat64, Nat16) -> (); regionStoreNat32 : (Region, Nat64, Nat32) -> (); regionStoreNat64 : (Region, Nat64, Nat64) -> (); regionStoreNat8 : (Region, Nat64, Nat8) -> (); rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_collector_instructions : () -> Nat; rts_heap_size : () -> Nat; rts_logical_stable_memory_size : () -> Nat; rts_max_live_size : () -> Nat; rts_max_stack_size : () -> Nat; rts_memory_size : () -> Nat; rts_mutator_instructions : () -> Nat; rts_reclaimed : () -> Nat; rts_stable_memory_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; setCertifiedData : Blob -> (); setTimer : <system>(Nat64, Bool, <system_1>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}) -> Nat; shiftLeft : (Nat, Nat32) -> Nat; shiftRight : (Nat, Nat32) -> Nat; sin : Float -> Float; stableMemoryGrow : Nat64 -> Nat64; stableMemoryLoadBlob : (Nat64, Nat) -> Blob; stableMemoryLoadFloat : Nat64 -> Float; stableMemoryLoadInt16 : Nat64 -> Int16; stableMemoryLoadInt32 : Nat64 -> Int32; stableMemoryLoadInt64 : Nat64 -> Int64; stableMemoryLoadInt8 : Nat64 -> Int8; stableMemoryLoadNat16 : Nat64 -> Nat16; stableMemoryLoadNat32 : Nat64 -> Nat32; stableMemoryLoadNat64 : Nat64 -> Nat64; stableMemoryLoadNat8 : Nat64 -> Nat8; stableMemorySize : () -> Nat64; stableMemoryStoreBlob : (Nat64, Blob) -> (); stableMemoryStoreFloat : (Nat64, Float) -> (); stableMemoryStoreInt16 : (Nat64, Int16) -> (); stableMemoryStoreInt32 : (Nat64, Int32) -> (); stableMemoryStoreInt64 : (Nat64, Int64) -> (); stableMemoryStoreInt8 : (Nat64, Int8) -> (); stableMemoryStoreNat16 : (Nat64, Nat16) -> (); stableMemoryStoreNat32 : (Nat64, Nat32) -> (); stableMemoryStoreNat64 : (Nat64, Nat64) -> (); stableMemoryStoreNat8 : (Nat64, Nat8) -> (); stableVarQuery : () -> shared query <system>() -> replies {size : Nat64}; tan : Float -> Float; textCompare : (Text, Text) -> Int8; textLowercase : Text -> Text; textUppercase : Text -> Text; time : () -> Nat64; trap : Text -> None__3}
      )
    )
  )
  (LetD
    (ObjP
      (debugPrint (VarP debugPrint))
      (error (VarP error))
      (errorMessage (VarP errorMessage))
      (call_raw (VarP call_raw))
      (principalOfActor (VarP principalOfActor))
    )
    (VarE file$@prim)
  )
  (LetD
    (VarP $__motoko_stable_var_info)
    (FuncE
      $__motoko_stable_var_info
      Shared Query
      Replies
      (T1__17 Any)
      {size : Nat64}
      (PrimE
        (CallPrim T1__17)
        (FuncE
          $lambda
          Local
          Returns
          (T2__9 Any)
          (params $k/10 $r/5 $b/4)
          ()
          (PrimE
            (CallPrim)
            (VarE $k/10)
            (BlockE
              (LetD (VarP $$caller/0/0) (PrimE ICCallerPrim))
              (LetD
                WildP
                (PrimE
                  AssertPrim
                  (IfE
                    (PrimE
                      (RelPrim Principal EqOp)
                      (VarE $$caller/0/0)
                      (PrimE (SelfRef Principal))
                    )
                    (LitE (BoolLit true))
                    (PrimE is_controller (VarE $$caller/0/0))
                  )
                )
              )
              (LetD
                (VarP $$size/0/0)
                (PrimE (ICStableSize memory {}) (NewObjE Memory memory {}))
              )
              (NewObjE Object (size $$size/0/0) {size : Nat64})
            )
          )
        )
        (PrimE
          TupPrim
          (FuncE
            $lambda
            Local
            Returns
            (params $v/59)
            ()
            (PrimE (ICReplyPrim {size : Nat64}) (VarE $v/59))
          )
          (FuncE
            $lambda
            Local
            Returns
            (params $e/5)
            ()
            (PrimE
              ICRejectPrim
              (PrimE
                (ProjPrim 1)
                (PrimE
                  (CastPrim
                    Error
                    ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                  )
                  (VarE $e/5)
                )
              )
            )
          )
          (VarE @cleanup)
        )
      )
    )
  )
  (VarD $state/0 ?(memory {}) (PrimE OptPrim (PrimE (ICStableRead memory {}))))
  (LetD
    (VarP $getState/0)
    (FuncE
      $getState/0
      Local
      Returns
      memory {}
      (SwitchE
        (VarE $state/0)
        (case (LitP NullLit) (LoopE (PrimE TupPrim)))
        (case (OptP (VarP $v/0)) (VarE $v/0))
      )
    )
  )
  (LetD
    (VarP foo)
    (FuncE
      foo
      Shared
      Returns
      ($__2264 Any)
      ()
      (PrimE
        (CallPrim $__2264)
        (FuncE
          $lambda
          Local
          Returns
          ($foo__9 Any)
          (params $k/11 $r/6 $b/5)
          ()
          (DeclareE
            $$thunk/0/0
            (BlockE
              (LetD
                (VarP $v/35)
                (FuncE
                  $cleanup
                  Local
                  Returns
                  ()
                  (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT0)))
                )
              )
              (LetD WildP (DefineE $$thunk/0/0 Const (VarE $v/35)))
              (BlockE
                (LetD (VarP $u/45) (PrimE TupPrim))
                (BlockE
                  (LetD (VarP $u/46) (PrimE TupPrim))
                  (BlockE
                    (LetD
                      (VarP $k/12)
                      (FuncE
                        $k/12
                        Local
                        Returns
                        (params $v/36)
                        ()
                        (BlockE
                          (LetD WildP (LitE (IntLit 7_771)))
                          (LetD
                            WildP
                            (PrimE
                              (CallPrim)
                              (VarE $$thunk/0/0)
                              (PrimE TupPrim)
                            )
                          )
                          (PrimE (CallPrim) (VarE $r/6) (VarE $v/36))
                        )
                      )
                    )
                    (BlockE
                      (LetD
                        (VarP $k/13)
                        (FuncE
                          $k/13
                          Local
                          Returns
                          ()
                          (BlockE
                            (LetD (VarP $v/37) (PrimE TupPrim))
                            (BlockE
                              (LetD WildP (LitE (IntLit 7_771)))
                              (LetD
                                WildP
                                (PrimE
                                  (CallPrim)
                                  (VarE $$thunk/0/0)
                                  (PrimE TupPrim)
                                )
                              )
                              (PrimE (CallPrim) (VarE $k/11) (VarE $v/37))
                            )
                          )
                        )
                      )
                      (DeclareE
                        $$thunk/1/0
                        (BlockE
                          (LetD
                            (VarP $v/38)
                            (FuncE
                              $cleanup
                              Local
                              Returns
                              ()
                              (PrimE
                                (CallPrim)
                                (VarE debugPrint)
                                (LitE (TextLit OUT1))
                              )
                            )
                          )
                          (LetD WildP (DefineE $$thunk/1/0 Const (VarE $v/38)))
                          (BlockE
                            (LetD (VarP $u/47) (PrimE TupPrim))
                            (BlockE
                              (LetD (VarP $u/48) (PrimE TupPrim))
                              (BlockE
                                (LetD
                                  (VarP $k/14)
                                  (FuncE
                                    $k/14
                                    Local
                                    Returns
                                    (params $v/39)
                                    ()
                                    (BlockE
                                      (LetD WildP (LitE (IntLit 7_772)))
                                      (LetD
                                        WildP
                                        (PrimE
                                          (CallPrim)
                                          (VarE $$thunk/0/0)
                                          (PrimE TupPrim)
                                        )
                                      )
                                      (PrimE
                                        (CallPrim)
                                        (VarE $r/6)
                                        (VarE $v/39)
                                      )
                                    )
                                  )
                                )
                                (BlockE
                                  (LetD
                                    (VarP $k/15)
                                    (FuncE
                                      $k/15
                                      Local
                                      Returns
                                      ()
                                      (BlockE
                                        (LetD (VarP $v/40) (PrimE TupPrim))
                                        (BlockE
                                          (LetD WildP (LitE (IntLit 7_771)))
                                          (LetD
                                            WildP
                                            (PrimE
                                              (CallPrim)
                                              (VarE $$thunk/1/0)
                                              (PrimE TupPrim)
                                            )
                                          )
                                          (PrimE
                                            (CallPrim)
                                            (VarE $k/13)
                                            (VarE $v/40)
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (DeclareE
                                    $$thunk/2/0
                                    (BlockE
                                      (LetD
                                        (VarP $v/41)
                                        (FuncE
                                          $cleanup
                                          Local
                                          Returns
                                          ()
                                          (PrimE
                                            (CallPrim)
                                            (VarE debugPrint)
                                            (LitE (TextLit OUT2))
                                          )
                                        )
                                      )
                                      (LetD
                                        WildP
                                        (DefineE $$thunk/2/0 Const (VarE $v/41))
                                      )
                                      (BlockE
                                        (LetD (VarP $u/49) (PrimE TupPrim))
                                        (BlockE
                                          (LetD (VarP $u/50) (PrimE TupPrim))
                                          (BlockE
                                            (LetD
                                              (VarP $k/16)
                                              (FuncE
                                                $k/16
                                                Local
                                                Returns
                                                (params $v/42)
                                                ()
                                                (BlockE
                                                  (LetD
                                                    WildP
                                                    (LitE (IntLit 7_773))
                                                  )
                                                  (LetD
                                                    WildP
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $$thunk/0/0)
                                                      (PrimE TupPrim)
                                                    )
                                                  )
                                                  (PrimE
                                                    (CallPrim)
                                                    (VarE $r/6)
                                                    (VarE $v/42)
                                                  )
                                                )
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $k/17)
                                                (FuncE
                                                  $k/17
                                                  Local
                                                  Returns
                                                  ()
                                                  (BlockE
                                                    (LetD
                                                      (VarP $v/43)
                                                      (PrimE TupPrim)
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (LitE (IntLit 7_771))
                                                      )
                                                      (LetD
                                                        WildP
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $$thunk/2/0)
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE $k/15)
                                                        (VarE $v/43)
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $k/18)
                                                  (FuncE
                                                    $k/18
                                                    Local
                                                    Returns
                                                    ()
                                                    (BlockE
                                                      (LetD
                                                        (VarP $v/44)
                                                        (PrimE TupPrim)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          WildP
                                                          (LitE (IntLit 7_771))
                                                        )
                                                        (LetD
                                                          WildP
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $$thunk/0/0)
                                                            (PrimE TupPrim)
                                                          )
                                                        )
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $b/5)
                                                          (VarE $v/44)
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $k/19)
                                                    (FuncE
                                                      $k/19
                                                      Local
                                                      Returns
                                                      (params $v/45)
                                                      ()
                                                      (BlockE
                                                        (LetD
                                                          WildP
                                                          (LitE (IntLit 7_774))
                                                        )
                                                        (LetD
                                                          WildP
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $$thunk/0/0)
                                                            (PrimE TupPrim)
                                                          )
                                                        )
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $r/6)
                                                          (VarE $v/45)
                                                        )
                                                      )
                                                    )
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $k/20)
                                                      (FuncE
                                                        $k/20
                                                        Local
                                                        Returns
                                                        ()
                                                        (BlockE
                                                          (LetD
                                                            (VarP $v/46)
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (VarE $v/46)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $u/51)
                                                                (PrimE TupPrim)
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $u/52)
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE $k/17)
                                                                  (IfE
                                                                    (LitE
                                                                      (BoolLit
                                                                        true
                                                                      )
                                                                    )
                                                                    (PrimE
                                                                      RetPrim
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $u/54
                                                                          )
                                                                          (PrimE
                                                                            TupPrim
                                                                          )
                                                                        )
                                                                        (BlockE
                                                                          (LetD
                                                                            WildP
                                                                            (LitE
                                                                              (IntLit
                                                                                7_772
                                                                              )
                                                                            )
                                                                          )
                                                                          (LetD
                                                                            WildP
                                                                            (PrimE
                                                                              (CallPrim
                                                                              )
                                                                              (VarE
                                                                                $$thunk/0/0
                                                                              )
                                                                              (PrimE
                                                                                TupPrim
                                                                              )
                                                                            )
                                                                          )
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              $k/11
                                                                            )
                                                                            (VarE
                                                                              $u/54
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (PrimE
                                                                      RetPrim
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $u/53
                                                                          )
                                                                          (PrimE
                                                                            TupPrim
                                                                          )
                                                                        )
                                                                        (BlockE
                                                                          (LetD
                                                                            WildP
                                                                            (LitE
                                                                              (IntLit
                                                                                7_771
                                                                              )
                                                                            )
                                                                          )
                                                                          (LetD
                                                                            WildP
                                                                            (PrimE
                                                                              (CallPrim
                                                                              )
                                                                              (VarE
                                                                                $$thunk/0/0
                                                                              )
                                                                              (PrimE
                                                                                TupPrim
                                                                              )
                                                                            )
                                                                          )
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              $k/11
                                                                            )
                                                                            (VarE
                                                                              $u/53
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $u/55)
                                                        (BlockE
                                                          (LetD
                                                            (TupP
                                                              (VarP $async/17)
                                                              (VarP $reply/8)
                                                              (VarP $reject/8)
                                                              (VarP $cleanup/8)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (TupP
                                                                  (VarP
                                                                    $async/16
                                                                  )
                                                                  (VarP
                                                                    $fulfill/8
                                                                  )
                                                                  (VarP $fail/8)
                                                                  (VarP
                                                                    $clean/8
                                                                  )
                                                                )
                                                                (PrimE
                                                                  (CallPrim ())
                                                                  (VarE
                                                                    @new_async
                                                                  )
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                              )
                                                              (PrimE
                                                                TupPrim
                                                                (FuncE
                                                                  $lambda
                                                                  Local
                                                                  Returns
                                                                  (params
                                                                    $k/25
                                                                    $r/11
                                                                    $b/10
                                                                  )
                                                                  {#schedule : () -> (); #suspend}
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      $async/16
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                      (FuncE
                                                                        $lambda
                                                                        Local
                                                                        Returns
                                                                        (params
                                                                          $v/62
                                                                        )
                                                                        ()
                                                                        (PrimE
                                                                          (CallPrim
                                                                          )
                                                                          (VarE
                                                                            $k/25
                                                                          )
                                                                          (VarE
                                                                            $v/62
                                                                          )
                                                                        )
                                                                      )
                                                                      (VarE
                                                                        $r/11
                                                                      )
                                                                      (VarE
                                                                        $b/10
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                (FuncE
                                                                  $lambda
                                                                  Local
                                                                  Returns
                                                                  ()
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      $fulfill/8
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (VarE $fail/8)
                                                                (VarE $clean/8)
                                                              )
                                                            )
                                                          )
                                                          (LetD
                                                            WildP
                                                            (SelfCallE
                                                              ()
                                                              (PrimE
                                                                (CallPrim
                                                                  $foo__9
                                                                )
                                                                (FuncE
                                                                  $lambda
                                                                  Local
                                                                  Returns
                                                                  ($@anon-async-8.29__9
                                                                    Any
                                                                  )
                                                                  (params
                                                                    $k/21
                                                                    $r/7
                                                                    $b/6
                                                                  )
                                                                  ()
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE $k/21)
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (PrimE
                                                                  TupPrim
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    ()
                                                                    (BlockE
                                                                      (LetD
                                                                        (VarP
                                                                          $v/63
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                      (PrimE
                                                                        (ICReplyPrim
                                                                        )
                                                                        (VarE
                                                                          $v/63
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    (params
                                                                      $e/7
                                                                    )
                                                                    ()
                                                                    (PrimE
                                                                      ICRejectPrim
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          1
                                                                        )
                                                                        (PrimE
                                                                          (CastPrim
                                                                            Error
                                                                            ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                                                                          )
                                                                          (VarE
                                                                            $e/7
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (VarE
                                                                    @cleanup
                                                                  )
                                                                )
                                                              )
                                                              (VarE $reply/8)
                                                              (VarE $reject/8)
                                                              (VarE $cleanup/8)
                                                            )
                                                          )
                                                          (VarE $async/17)
                                                        )
                                                      )
                                                      (IfE
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE @call_succeeded)
                                                          (PrimE TupPrim)
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $v/61)
                                                            (PrimE
                                                              TupPrim
                                                              (VarE $k/20)
                                                              (VarE $k/19)
                                                              (VarE $k/18)
                                                            )
                                                          )
                                                          (SwitchE
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE $u/55)
                                                              (VarE $v/61)
                                                            )
                                                            (case
                                                              (TagP
                                                                suspend
                                                                WildP
                                                              )
                                                              (PrimE TupPrim)
                                                            )
                                                            (case
                                                              (TagP
                                                                schedule
                                                                (VarP
                                                                  $schedule/5
                                                                )
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $call/5)
                                                                  (SelfCallE
                                                                    ()
                                                                    (PrimE
                                                                      (ICReplyPrim
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                    (VarE
                                                                      $schedule/5
                                                                    )
                                                                    (PrimE
                                                                      (ProjPrim
                                                                        1
                                                                      )
                                                                      (VarE
                                                                        $v/61
                                                                      )
                                                                    )
                                                                    (FuncE
                                                                      $lambda
                                                                      Local
                                                                      Returns
                                                                      ()
                                                                      (PrimE
                                                                        (CallPrim
                                                                        )
                                                                        (PrimE
                                                                          (ProjPrim
                                                                            2
                                                                          )
                                                                          (VarE
                                                                            $v/61
                                                                          )
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                (IfE
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      @call_succeeded
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                  (VarE $call/5)
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (PrimE
                                                                      (ProjPrim
                                                                        1
                                                                      )
                                                                      (VarE
                                                                        $v/61
                                                                      )
                                                                    )
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        @call_error
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/56)
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE @call_error)
                                                              (PrimE TupPrim)
                                                            )
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (LitE
                                                                (IntLit 7_775)
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                (CallPrim)
                                                                (VarE
                                                                  $$thunk/0/0
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE $r/6)
                                                              (VarE $u/56)
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE
          TupPrim
          (FuncE
            $lambda
            Local
            Returns
            ()
            (BlockE (LetD (VarP $v/60) (PrimE TupPrim)) (PrimE TupPrim))
          )
          (FuncE $lambda Local Returns (params $e/6) () (PrimE TupPrim))
          (VarE @cleanup)
        )
      )
    )
  )
  (LetD WildP (AssignE (VarLE $state/0) (LitE NullLit)))
  (foo foo)
  (__motoko_stable_var_info $__motoko_stable_var_info)
  (System
    (Pre (PrimE (ICStableWrite memory {}) (NewObjE Memory memory {})))
    (Post (PrimE TupPrim))
    (Heartbeat (PrimE TupPrim))
    (Timer
      (BlockE
        (LetD
          (VarP $r/0)
          (FuncE $r/0 Local Returns (params $e/0) () (PrimE TupPrim))
        )
        (BlockE
          (LetD (VarP $v/2) (VarE @timer_helper))
          (BlockE
            (LetD (VarP $u/0) (PrimE (CallPrim ()) (VarE $v/2) (PrimE TupPrim)))
            (IfE
              (PrimE (CallPrim) (VarE @call_succeeded) (PrimE TupPrim))
              (BlockE
                (LetD WildP (VarE $u/0))
                (BlockE
                  (LetD (VarP $u/1) (PrimE TupPrim))
                  (BlockE
                    (LetD (VarP $u/2) (PrimE TupPrim))
                    (BlockE (LetD (VarP $u/3) (PrimE TupPrim)) (PrimE TupPrim))
                  )
                )
              )
              (PrimE
                (CallPrim)
                (VarE $r/0)
                (PrimE (CallPrim) (VarE @call_error) (PrimE TupPrim))
              )
            )
          )
        )
      )
    )
    (Inspect (PrimE TupPrim))
  )
  actor {foo : shared () -> ()}
)
(ActorU
  (VarD @cycles Nat (LitE (NatLit 0)))
  (LetD
    (VarP @add_cycles)
    (FuncE
      @add_cycles
      Local
      Returns
      ($__2256 Any)
      ()
      (BlockE
        (LetD (VarP cycles) (VarE @cycles))
        (LetD WildP (PrimE (CallPrim) (VarE @reset_cycles) (PrimE TupPrim)))
        (IfE
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
          (PrimE SystemCyclesAddPrim (VarE cycles))
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @reset_cycles)
    (FuncE
      @reset_cycles
      Local
      Returns
      ()
      (AssignE (VarLE @cycles) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @immut_array_get)
    (FuncE
      @immut_array_get
      Local
      Returns
      (A__198 Any)
      (params xs)
      Nat -> A__198
      (FuncE
        @anon-func-39.3
        Local
        Returns
        (params n)
        A__198
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @mut_array_get)
    (FuncE
      @mut_array_get
      Local
      Returns
      (A__199 Any)
      (params xs)
      Nat -> A__199
      (FuncE
        @anon-func-41.3
        Local
        Returns
        (params n)
        A__199
        (PrimE IdxPrim (VarE xs) (VarE n))
      )
    )
  )
  (LetD
    (VarP @immut_array_size)
    (FuncE
      @immut_array_size
      Local
      Returns
      (A__200 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-43.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_size)
    (FuncE
      @mut_array_size
      Local
      Returns
      (A__201 Any)
      (params xs)
      () -> Nat
      (FuncE @anon-func-45.3 Local Returns Nat (PrimE array_len (VarE xs)))
    )
  )
  (LetD
    (VarP @mut_array_put)
    (FuncE
      @mut_array_put
      Local
      Returns
      (A__202 Any)
      (params xs)
      (Nat, A__202) -> ()
      (FuncE
        @anon-func-47.3
        Local
        Returns
        (params n x)
        ()
        (AssignE (IdxLE (VarE xs) (VarE n)) (VarE x))
      )
    )
  )
  (LetD
    (VarP @immut_array_keys)
    (FuncE
      @immut_array_keys
      Local
      Returns
      (A__203 Any)
      (params xs)
      () -> @Iter__2<Nat>
      (FuncE
        @anon-func-49.3
        Local
        Returns
        @Iter__2<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_keys)
    (FuncE
      @mut_array_keys
      Local
      Returns
      (A__204 Any)
      (params xs)
      () -> @Iter__2<Nat>
      (FuncE
        @anon-func-55.3
        Local
        Returns
        @Iter__2<Nat>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (VarE j))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat})
        )
      )
    )
  )
  (LetD
    (VarP @immut_array_vals)
    (FuncE
      @immut_array_vals
      Local
      Returns
      (A__205 Any)
      (params xs)
      () -> @Iter__2<A__205>
      (FuncE
        @anon-func-61.3
        Local
        Returns
        @Iter__2<A__205>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__205
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__205})
        )
      )
    )
  )
  (LetD
    (VarP @mut_array_vals)
    (FuncE
      @mut_array_vals
      Local
      Returns
      (A__206 Any)
      (params xs)
      () -> @Iter__2<A__206>
      (FuncE
        @anon-func-67.3
        Local
        Returns
        @Iter__2<A__206>
        (BlockE
          (VarD i Nat (LitE (NatLit 0)))
          (LetD (VarP l) (PrimE array_len (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?A__206
              (IfE
                (PrimE (RelPrim Nat GeOp) (VarE i) (VarE l))
                (LitE NullLit)
                (BlockE
                  (LetD (VarP j) (VarE i))
                  (LetD
                    WildP
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE OptPrim (PrimE IdxPrim (VarE xs) (VarE j)))
                )
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?A__206})
        )
      )
    )
  )
  (LetD
    (VarP @blob_size)
    (FuncE
      @blob_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-73.3 Local Returns Nat (PrimE blob_size (VarE xs)))
    )
  )
  (LetD
    (VarP @blob_vals)
    (FuncE
      @blob_vals
      Local
      Returns
      (params xs)
      () -> @Iter__2<Nat8>
      (FuncE
        @anon-func-75.3
        Local
        Returns
        @Iter__2<Nat8>
        (BlockE
          (LetD (VarP i) (PrimE blob_vals_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Nat8
              (IfE
                (PrimE blob_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE blob_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Nat8})
        )
      )
    )
  )
  (LetD
    (VarP @text_size)
    (FuncE
      @text_size
      Local
      Returns
      (params xs)
      () -> Nat
      (FuncE @anon-func-86.3 Local Returns Nat (PrimE text_len (VarE xs)))
    )
  )
  (LetD
    (VarP @text_chars)
    (FuncE
      @text_chars
      Local
      Returns
      (params xs)
      () -> @Iter__2<Char>
      (FuncE
        @anon-func-88.3
        Local
        Returns
        @Iter__2<Char>
        (BlockE
          (LetD (VarP i) (PrimE text_iter (VarE xs)))
          (LetD
            (VarP next)
            (FuncE
              next
              Local
              Returns
              ?Char
              (IfE
                (PrimE text_iter_done (VarE i))
                (LitE NullLit)
                (PrimE OptPrim (PrimE text_iter_next (VarE i)))
              )
            )
          )
          (NewObjE Object (next next) {next : () -> ?Char})
        )
      )
    )
  )
  (LetD
    (VarP @text_of_num)
    (FuncE
      @text_of_num
      Local
      Returns
      (params x base sep digits)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit )))
        (VarD n Nat (VarE x))
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat EqOp) (VarE n) (LitE (NatLit 0)))
            (PrimE RetPrim (LitE (TextLit 0)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD
          WildP
          (LabelE
            $done/0
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat GtOp) (VarE n) (LitE (NatLit 0)))
                (BlockE
                  (LetD
                    (VarP rem)
                    (PrimE (BinPrim Nat ModOp) (VarE n) (VarE base))
                  )
                  (LetD
                    WildP
                    (IfE
                      (IfE
                        (PrimE (RelPrim Nat GtOp) (VarE sep) (LitE (NatLit 0)))
                        (PrimE (RelPrim Nat EqOp) (VarE i) (VarE sep))
                        (LitE (BoolLit false))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE text)
                            (PrimE
                              (BinPrim Text CatOp)
                              (LitE (TextLit _))
                              (VarE text)
                            )
                          )
                        )
                        (AssignE (VarLE i) (LitE (NatLit 0)))
                      )
                      (PrimE TupPrim)
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE text)
                      (PrimE
                        (BinPrim Text CatOp)
                        (PrimE (CallPrim) (VarE digits) (VarE rem))
                        (VarE text)
                      )
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE n)
                      (PrimE (BinPrim Nat DivOp) (VarE n) (VarE base))
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/0) (PrimE TupPrim))
              )
            )
          )
        )
        (VarE text)
      )
    )
  )
  (LetD
    (VarP @left_pad)
    (FuncE
      @left_pad
      Local
      Returns
      (params pad char t)
      Text
      (IfE
        (PrimE (RelPrim Nat GtOp) (VarE pad) (PrimE text_len (VarE t)))
        (BlockE
          (VarD
            i
            Nat
            (PrimE (BinPrim Nat SubOp) (VarE pad) (PrimE text_len (VarE t)))
          )
          (VarD text Text (VarE t))
          (LetD
            WildP
            (LabelE
              $done/1
              ()
              (LoopE
                (IfE
                  (PrimE (RelPrim Nat GtOp) (VarE i) (LitE (NatLit 0)))
                  (BlockE
                    (LetD
                      WildP
                      (AssignE
                        (VarLE text)
                        (PrimE (BinPrim Text CatOp) (VarE char) (VarE text))
                      )
                    )
                    (AssignE
                      (VarLE i)
                      (PrimE (BinPrim Nat SubOp) (VarE i) (LitE (NatLit 1)))
                    )
                  )
                  (PrimE (BreakPrim $done/1) (PrimE TupPrim))
                )
              )
            )
          )
          (VarE text)
        )
        (VarE t)
      )
    )
  )
  (LetD
    (VarP @digits_dec)
    (FuncE
      @digits_dec
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE (BinPrim Int AddOp) (VarE x) (LitE (IntLit 48)))
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Nat)
    (FuncE
      @text_of_Nat
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_num)
        (PrimE
          TupPrim
          (VarE x)
          (LitE (NatLit 10))
          (LitE (NatLit 3))
          (VarE @digits_dec)
        )
      )
    )
  )
  (LetD
    (VarP @text_of_Int)
    (FuncE
      @text_of_Int
      Local
      Returns
      (params x)
      Text
      (IfE
        (PrimE (RelPrim Int EqOp) (VarE x) (LitE (IntLit 0)))
        (LitE (TextLit 0))
        (PrimE
          (BinPrim Text CatOp)
          (IfE
            (PrimE (RelPrim Int LtOp) (VarE x) (LitE (IntLit 0)))
            (LitE (TextLit -))
            (LitE (TextLit +))
          )
          (PrimE (CallPrim) (VarE @text_of_Nat) (PrimE abs (VarE x)))
        )
      )
    )
  )
  (LetD
    (VarP @digits_hex)
    (FuncE
      @digits_hex
      Local
      Returns
      (params x)
      Text
      (PrimE
        conv_Char_Text
        (PrimE
          (NumConvTrapPrim Nat32 Char)
          (PrimE
            (NumConvWrapPrim Int Nat32)
            (PrimE
              (BinPrim Int AddOp)
              (VarE x)
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE x) (LitE (NatLit 10)))
                (LitE (IntLit 48))
                (LitE (IntLit 55))
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @int64ToInt)
    (FuncE
      @int64ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int64 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int32ToInt)
    (FuncE
      @int32ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int32 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int16ToInt)
    (FuncE
      @int16ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int16 Int) (VarE n))
    )
  )
  (LetD
    (VarP @int8ToInt)
    (FuncE
      @int8ToInt
      Local
      Returns
      (params n)
      Int
      (PrimE (NumConvTrapPrim Int8 Int) (VarE n))
    )
  )
  (LetD
    (VarP @nat64ToNat)
    (FuncE
      @nat64ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat64 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat32ToNat)
    (FuncE
      @nat32ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat32 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat16ToNat)
    (FuncE
      @nat16ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat16 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @nat8ToNat)
    (FuncE
      @nat8ToNat
      Local
      Returns
      (params n)
      Nat
      (PrimE (NumConvTrapPrim Nat8 Nat) (VarE n))
    )
  )
  (LetD
    (VarP @text_of_Nat8)
    (FuncE
      @text_of_Nat8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat8ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat16)
    (FuncE
      @text_of_Nat16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat16ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat32)
    (FuncE
      @text_of_Nat32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat32ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Nat64)
    (FuncE
      @text_of_Nat64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Nat)
        (PrimE (CallPrim) (VarE @nat64ToNat) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int8)
    (FuncE
      @text_of_Int8
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int8ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int16)
    (FuncE
      @text_of_Int16
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int16ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int32)
    (FuncE
      @text_of_Int32
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int32ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Int64)
    (FuncE
      @text_of_Int64
      Local
      Returns
      (params x)
      Text
      (PrimE
        (CallPrim)
        (VarE @text_of_Int)
        (PrimE (CallPrim) (VarE @int64ToInt) (VarE x))
      )
    )
  )
  (LetD
    (VarP @text_of_Float)
    (FuncE
      @text_of_Float
      Local
      Returns
      (params x)
      Text
      (PrimE Float->Text (VarE x))
    )
  )
  (LetD
    (VarP @text_of_Bool)
    (FuncE
      @text_of_Bool
      Local
      Returns
      (params b)
      Text
      (IfE (VarE b) (LitE (TextLit true)) (LitE (TextLit false)))
    )
  )
  (LetD
    (VarP @text_of_Text)
    (FuncE
      @text_of_Text
      Local
      Returns
      (params t)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE (BinPrim Text CatOp) (LitE (TextLit ")) (VarE t))
        (LitE (TextLit "))
      )
    )
  )
  (LetD
    (VarP @text_of_Char)
    (FuncE
      @text_of_Char
      Local
      Returns
      (params c)
      Text
      (PrimE
        (BinPrim Text CatOp)
        (PrimE
          (BinPrim Text CatOp)
          (LitE (TextLit '))
          (PrimE conv_Char_Text (VarE c))
        )
        (LitE (TextLit '))
      )
    )
  )
  (LetD
    (VarP @text_of_Blob)
    (FuncE
      @text_of_Blob
      Local
      Returns
      (params blob)
      Text
      (BlockE
        (VarD t Text (LitE (TextLit ")))
        (LetD
          WildP
          (BlockE
            (LetD
              (VarP $nxt/0)
              (PrimE
                (DotPrim next)
                (PrimE
                  (CallPrim)
                  (PrimE (CallPrim) (VarE @blob_vals) (VarE blob))
                  (PrimE TupPrim)
                )
              )
            )
            (LabelE
              $done/2
              ()
              (LoopE
                (SwitchE
                  (PrimE (CallPrim) (VarE $nxt/0) (PrimE TupPrim))
                  (case
                    (LitP NullLit)
                    (PrimE (BreakPrim $done/2) (PrimE TupPrim))
                  )
                  (case
                    (OptP (VarP b))
                    (AssignE
                      (VarLE t)
                      (PrimE
                        (BinPrim Text CatOp)
                        (VarE t)
                        (PrimE
                          (BinPrim Text CatOp)
                          (LitE (TextLit \))
                          (PrimE
                            (CallPrim)
                            (VarE @left_pad)
                            (PrimE
                              TupPrim
                              (LitE (NatLit 2))
                              (LitE (TextLit 0))
                              (PrimE
                                (CallPrim)
                                (VarE @text_of_num)
                                (PrimE
                                  TupPrim
                                  (PrimE (CallPrim) (VarE @nat8ToNat) (VarE b))
                                  (LitE (NatLit 16))
                                  (LitE (NatLit 0))
                                  (VarE @digits_hex)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE t)
            (PrimE (BinPrim Text CatOp) (VarE t) (LitE (TextLit ")))
          )
        )
        (PrimE RetPrim (VarE t))
      )
    )
  )
  (LetD
    (VarP @text_has_parens)
    (FuncE
      @text_has_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case (OptP (LitP (CharLit 40))) (LitE (BoolLit true)))
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_needs_parens)
    (FuncE
      @text_needs_parens
      Local
      Returns
      (params t)
      Bool
      (SwitchE
        (PrimE
          (CallPrim)
          (PrimE
            (DotPrim next)
            (PrimE
              (CallPrim)
              (PrimE (CallPrim) (VarE @text_chars) (VarE t))
              (PrimE TupPrim)
            )
          )
          (PrimE TupPrim)
        )
        (case
          (OptP
            (AltP
              (AltP
                (AltP (LitP (CharLit 43)) (LitP (CharLit 45)))
                (LitP (CharLit 63))
              )
              (LitP (CharLit 35))
            )
          )
          (LitE (BoolLit true))
        )
        (case WildP (LitE (BoolLit false)))
      )
    )
  )
  (LetD
    (VarP @text_of_option)
    (FuncE
      @text_of_option
      Local
      Returns
      (T__521 Any)
      (params f x)
      Text
      (SwitchE
        (VarE x)
        (case
          (OptP (VarP y))
          (BlockE
            (LetD (VarP fy) (PrimE (CallPrim) (VarE f) (VarE y)))
            (IfE
              (PrimE (CallPrim) (VarE @text_needs_parens) (VarE fy))
              (PrimE
                (BinPrim Text CatOp)
                (PrimE (BinPrim Text CatOp) (LitE (TextLit ?()) (VarE fy))
                (LitE (TextLit )))
              )
              (PrimE (BinPrim Text CatOp) (LitE (TextLit ?)) (VarE fy))
            )
          )
        )
        (case (LitP NullLit) (LitE (TextLit null)))
      )
    )
  )
  (LetD
    (VarP @text_of_variant)
    (FuncE
      @text_of_variant
      Local
      Returns
      (T__522 Any)
      (params l f x)
      Text
      (BlockE
        (LetD (VarP fx) (PrimE (CallPrim) (VarE f) (VarE x)))
        (IfE
          (PrimE (RelPrim Text EqOp) (VarE fx) (LitE (TextLit ())))
          (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
          (IfE
            (PrimE (CallPrim) (VarE @text_has_parens) (VarE fx))
            (PrimE
              (BinPrim Text CatOp)
              (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
              (VarE fx)
            )
            (PrimE
              (BinPrim Text CatOp)
              (PrimE
                (BinPrim Text CatOp)
                (PrimE
                  (BinPrim Text CatOp)
                  (PrimE (BinPrim Text CatOp) (LitE (TextLit #)) (VarE l))
                  (LitE (TextLit ())
                )
                (VarE fx)
              )
              (LitE (TextLit )))
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @text_of_array)
    (FuncE
      @text_of_array
      Local
      Returns
      (T__523 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/0) (VarE xs))
            (LetD (VarP $last/0) (PrimE GetLastArrayOffset (VarE $arr/0)))
            (VarD $indx/0 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/0) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/3
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/0) (VarE $indx/0))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (AssignE (VarLE first) (LitE (BoolLit false)))
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/0) (VarE $last/0))
                      (PrimE (BreakPrim $done/3) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/0)
                        (PrimE NextArrayOffset (VarE $indx/0))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @text_of_array_mut)
    (FuncE
      @text_of_array_mut
      Local
      Returns
      (T__524 Any)
      (params f xs)
      Text
      (BlockE
        (VarD text Text (LitE (TextLit [var)))
        (VarD first Bool (LitE (BoolLit true)))
        (LetD
          WildP
          (BlockE
            (LetD (VarP $arr/1) (VarE xs))
            (LetD (VarP $last/1) (PrimE GetLastArrayOffset (VarE $arr/1)))
            (VarD $indx/1 Nat (LitE (NatLit 0)))
            (IfE
              (PrimE EqArrayOffset (VarE $last/1) (LitE (IntLit -1)))
              (PrimE TupPrim)
              (LabelE
                $done/4
                ()
                (LoopE
                  (BlockE
                    (LetD
                      (VarP x)
                      (PrimE DerefArrayOffset (VarE $arr/1) (VarE $indx/1))
                    )
                    (LetD
                      WildP
                      (BlockE
                        (LetD
                          WildP
                          (IfE
                            (VarE first)
                            (BlockE
                              (LetD
                                WildP
                                (AssignE (VarLE first) (LitE (BoolLit false)))
                              )
                              (AssignE
                                (VarLE text)
                                (PrimE
                                  (BinPrim Text CatOp)
                                  (VarE text)
                                  (LitE (TextLit  ))
                                )
                              )
                            )
                            (AssignE
                              (VarLE text)
                              (PrimE
                                (BinPrim Text CatOp)
                                (VarE text)
                                (LitE (TextLit , ))
                              )
                            )
                          )
                        )
                        (AssignE
                          (VarLE text)
                          (PrimE
                            (BinPrim Text CatOp)
                            (VarE text)
                            (PrimE (CallPrim) (VarE f) (VarE x))
                          )
                        )
                      )
                    )
                    (IfE
                      (PrimE EqArrayOffset (VarE $indx/1) (VarE $last/1))
                      (PrimE (BreakPrim $done/4) (PrimE TupPrim))
                      (AssignE
                        (VarLE $indx/1)
                        (PrimE NextArrayOffset (VarE $indx/1))
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE (BinPrim Text CatOp) (VarE text) (LitE (TextLit ])))
      )
    )
  )
  (LetD
    (VarP @equal_array)
    (FuncE
      @equal_array
      Local
      Returns
      (T__525 Any)
      (params eq a b)
      Bool
      (BlockE
        (LetD
          WildP
          (IfE
            (PrimE
              (RelPrim Bool EqOp)
              (PrimE
                (RelPrim Nat EqOp)
                (PrimE array_len (VarE a))
                (PrimE array_len (VarE b))
              )
              (LitE (BoolLit false))
            )
            (PrimE RetPrim (LitE (BoolLit false)))
            (PrimE TupPrim)
          )
        )
        (VarD i Nat (LitE (NatLit 0)))
        (LetD (VarP s) (PrimE array_len (VarE a)))
        (LetD
          WildP
          (LabelE
            $done/5
            ()
            (LoopE
              (IfE
                (PrimE (RelPrim Nat LtOp) (VarE i) (VarE s))
                (BlockE
                  (LetD
                    WildP
                    (IfE
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (CallPrim)
                          (VarE eq)
                          (PrimE
                            TupPrim
                            (PrimE IdxPrim (VarE a) (VarE i))
                            (PrimE IdxPrim (VarE b) (VarE i))
                          )
                        )
                        (LitE (BoolLit false))
                      )
                      (PrimE RetPrim (LitE (BoolLit false)))
                      (PrimE TupPrim)
                    )
                  )
                  (AssignE
                    (VarLE i)
                    (PrimE (BinPrim Nat AddOp) (VarE i) (LitE (NatLit 1)))
                  )
                )
                (PrimE (BreakPrim $done/5) (PrimE TupPrim))
              )
            )
          )
        )
        (PrimE RetPrim (LitE (BoolLit true)))
      )
    )
  )
  (VarD @refund Nat (LitE (NatLit 0)))
  (LetD
    (VarP @reset_refund)
    (FuncE
      @reset_refund
      Local
      Returns
      ()
      (AssignE (VarLE @refund) (LitE (NatLit 0)))
    )
  )
  (LetD
    (VarP @getSystemRefund)
    (FuncE
      @getSystemRefund
      Local
      Returns
      @Refund__2
      (PrimE RetPrim (PrimE SystemCyclesRefundedPrim))
    )
  )
  (LetD (VarP @cleanup) (FuncE @cleanup Local Returns () (PrimE TupPrim)))
  (LetD
    (VarP @new_async)
    (FuncE
      @new_async
      Local
      Returns
      (T__526 Any__3)
      (@Async__2<T__526>, @Cont__2<T__526>, @Cont__2<Error>, @CleanCont__2)
      (BlockE
        (LetD
          (VarP w_null)
          (FuncE
            @anon-func-317.16
            Local
            Returns
            (params r t)
            ()
            (PrimE TupPrim)
          )
        )
        (LetD
          (VarP r_null)
          (FuncE
            @anon-func-318.16
            Local
            Returns
            (params $ignored0/0)
            ()
            (PrimE TupPrim)
          )
        )
        (VarD result ?@Result__2<T__526> (LitE NullLit))
        (VarD ws (@Refund__2, T__526) -> () (VarE w_null))
        (VarD rs Error -> () (VarE r_null))
        (LetD
          (VarP getRefund)
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE (RelPrim Nat EqOp) (VarE @cycles) (LitE (NatLit 0)))
            (LitE (BoolLit false))
          )
        )
        (LetD
          (VarP fulfill)
          (FuncE
            fulfill
            Local
            Returns
            (params t)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP refund)
                    (IfE
                      (VarE getRefund)
                      (PrimE (CallPrim) (VarE @getSystemRefund) (PrimE TupPrim))
                      (LitE (NatLit 0))
                    )
                  )
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE
                        OptPrim
                        (PrimE (TagE ok) (PrimE TupPrim (VarE refund) (VarE t)))
                      )
                    )
                  )
                  (LetD (VarP ws_) (VarE ws))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE
                    (CallPrim)
                    (VarE ws_)
                    (PrimE TupPrim (VarE refund) (VarE t))
                  )
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (LetD
          (VarP fail)
          (FuncE
            fail
            Local
            Returns
            (params e)
            ()
            (SwitchE
              (VarE result)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE result)
                      (PrimE OptPrim (PrimE (TagE error) (VarE e)))
                    )
                  )
                  (LetD (VarP rs_) (VarE rs))
                  (LetD WildP (AssignE (VarLE ws) (VarE w_null)))
                  (LetD WildP (AssignE (VarLE rs) (VarE r_null)))
                  (PrimE (CallPrim) (VarE rs_) (VarE e))
                )
              )
              (case (OptP WildP) (PrimE AssertPrim (LitE (BoolLit false))))
            )
          )
        )
        (VarD cleanup () -> () (VarE @cleanup))
        (LetD
          (VarP clean)
          (FuncE
            clean
            Local
            Returns
            ()
            (PrimE (CallPrim) (VarE cleanup) (PrimE TupPrim))
          )
        )
        (LetD
          (VarP enqueue)
          (FuncE
            enqueue
            Local
            Returns
            (params k r b)
            {#schedule : () -> (); #suspend}
            (BlockE
              (LetD WildP (AssignE (VarLE cleanup) (VarE b)))
              (SwitchE
                (VarE result)
                (case
                  (LitP NullLit)
                  (BlockE
                    (LetD (VarP ws_) (VarE ws))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE ws)
                        (FuncE
                          @anon-func-365.15
                          Local
                          Returns
                          (params r t)
                          ()
                          (BlockE
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE ws_)
                                (PrimE TupPrim (VarE r) (VarE t))
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                            (PrimE (CallPrim) (VarE k) (VarE t))
                          )
                        )
                      )
                    )
                    (LetD (VarP rs_) (VarE rs))
                    (LetD
                      WildP
                      (AssignE
                        (VarLE rs)
                        (FuncE
                          @anon-func-372.15
                          Local
                          Returns
                          (params e)
                          ()
                          (BlockE
                            (LetD WildP (PrimE (CallPrim) (VarE rs_) (VarE e)))
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_cycles)
                                (PrimE TupPrim)
                              )
                            )
                            (LetD
                              WildP
                              (PrimE
                                (CallPrim)
                                (VarE @reset_refund)
                                (PrimE TupPrim)
                              )
                            )
                            (PrimE (CallPrim) (VarE r) (VarE e))
                          )
                        )
                      )
                    )
                    (PrimE (TagE suspend) (PrimE TupPrim))
                  )
                )
                (case
                  (OptP (TagP ok (TupP (VarP r) (VarP t))))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-381.20
                      Local
                      Returns
                      ()
                      (BlockE
                        (LetD WildP (AssignE (VarLE @refund) (VarE r)))
                        (PrimE (CallPrim) (VarE k) (VarE t))
                      )
                    )
                  )
                )
                (case
                  (OptP (TagP error (VarP e)))
                  (PrimE
                    (TagE schedule)
                    (FuncE
                      @anon-func-384.20
                      Local
                      Returns
                      ()
                      (PrimE (CallPrim) (VarE r) (VarE e))
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE TupPrim (VarE enqueue) (VarE fulfill) (VarE fail) (VarE clean))
      )
    )
  )
  (LetD (VarP @ManagementCanister) (NewObjE Module module {}))
  (LetD
    (VarP @ic00)
    (PrimE
      (ActorOfIdBlob
        actor {create_canister : shared <system>{sender_canister_version : ?Nat64; settings : ?canister_settings__2} -> replies {canister_id : Principal}; install_code : shared <system>{arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__2} -> replies ()}
      )
      (PrimE BlobOfIcUrl (LitE (TextLit aaaaa-aa)))
    )
  )
  (LetD
    (VarP @install_actor_helper)
    (FuncE
      @install_actor_helper
      Local
      Returns
      ($__2257 Any)
      (params install_arg wasm_module arg)
      (Principal -> (), Error -> (), () -> ()) -> ()
      (FuncE
        $lambda
        Local
        Returns
        (params $v/47 $e/1 $c/0)
        ()
        (PrimE
          (CallPrim $__2257)
          (FuncE
            $lambda
            Local
            Returns
            ($@anon-async*-427.24__9 Any)
            (params $k/0 $r/1 $b/0)
            ()
            (DeclareE
              $mode/2
              (DeclareE
                $canister_id/2
                (BlockE
                  (LetD
                    (VarP $k/2)
                    (FuncE
                      $k/2
                      Local
                      Returns
                      (params $param0/0 $param1/0)
                      ()
                      (BlockE
                        (LetD
                          (VarP $v/5)
                          (PrimE TupPrim (VarE $param0/0) (VarE $param1/0))
                        )
                        (BlockE
                          (LetD (TupP (VarP $v/3) (VarP $v/4)) (VarE $v/5))
                          (LetD WildP (DefineE $mode/2 Const (VarE $v/3)))
                          (LetD
                            WildP
                            (DefineE $canister_id/2 Const (VarE $v/4))
                          )
                          (BlockE
                            (LetD (VarP $u/4) (PrimE TupPrim))
                            (BlockE
                              (LetD
                                (VarP $k/1)
                                (FuncE
                                  $k/1
                                  Local
                                  Returns
                                  ()
                                  (BlockE
                                    (LetD (VarP $v/6) (PrimE TupPrim))
                                    (BlockE
                                      (LetD WildP (VarE $v/6))
                                      (BlockE
                                        (LetD (VarP $u/5) (PrimE TupPrim))
                                        (BlockE
                                          (LetD (VarP $u/6) (PrimE TupPrim))
                                          (PrimE
                                            (CallPrim)
                                            (VarE $k/0)
                                            (PrimE
                                              RetPrim
                                              (PrimE
                                                (CallPrim)
                                                (VarE $k/0)
                                                (VarE $canister_id/2)
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              (BlockE
                                (LetD
                                  (VarP $v/7)
                                  (PrimE
                                    (ActorDotPrim install_code)
                                    (VarE @ic00)
                                  )
                                )
                                (BlockE
                                  (LetD
                                    (VarP $u/7)
                                    (BlockE
                                      (LetD
                                        (TupP
                                          (VarP $async/3)
                                          (VarP $reply/1)
                                          (VarP $reject/1)
                                          (VarP $cleanup/1)
                                        )
                                        (BlockE
                                          (LetD
                                            (TupP
                                              (VarP $async/2)
                                              (VarP $fulfill/1)
                                              (VarP $fail/1)
                                              (VarP $clean/1)
                                            )
                                            (PrimE
                                              (CallPrim ())
                                              (VarE @new_async)
                                              (PrimE TupPrim)
                                            )
                                          )
                                          (PrimE
                                            TupPrim
                                            (FuncE
                                              $lambda
                                              Local
                                              Returns
                                              (params $k/22 $r/8 $b/7)
                                              {#schedule : () -> (); #suspend}
                                              (PrimE
                                                (CallPrim)
                                                (VarE $async/2)
                                                (PrimE
                                                  TupPrim
                                                  (FuncE
                                                    $lambda
                                                    Local
                                                    Returns
                                                    (params $v/50)
                                                    ()
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $k/22)
                                                      (VarE $v/50)
                                                    )
                                                  )
                                                  (VarE $r/8)
                                                  (VarE $b/7)
                                                )
                                              )
                                            )
                                            (FuncE
                                              $lambda
                                              Local
                                              Returns
                                              ()
                                              (PrimE
                                                (CallPrim)
                                                (VarE $fulfill/1)
                                                (PrimE TupPrim)
                                              )
                                            )
                                            (VarE $fail/1)
                                            (VarE $clean/1)
                                          )
                                        )
                                      )
                                      (LetD
                                        (VarP $x/2)
                                        (BlockE
                                          (LetD
                                            (VarP $$mode/0/0)
                                            (VarE $mode/2)
                                          )
                                          (LetD
                                            (VarP $$canister_id/0/0)
                                            (VarE $canister_id/2)
                                          )
                                          (LetD
                                            (VarP $$wasm_module/0/0)
                                            (VarE wasm_module)
                                          )
                                          (LetD (VarP $$arg/0/0) (VarE arg))
                                          (LetD
                                            (VarP $$sender_canister_version/1/0)
                                            (PrimE
                                              OptPrim
                                              (PrimE canister_version)
                                            )
                                          )
                                          (NewObjE
                                            Object
                                            (sender_canister_version
                                              $$sender_canister_version/1/0
                                            )
                                            (arg $$arg/0/0)
                                            (wasm_module $$wasm_module/0/0)
                                            (canister_id $$canister_id/0/0)
                                            (mode $$mode/0/0)
                                            {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__2}
                                          )
                                        )
                                      )
                                      (LetD
                                        WildP
                                        (PrimE
                                          ICCallPrim
                                          (VarE $v/7)
                                          (VarE $x/2)
                                          (VarE $reply/1)
                                          (VarE $reject/1)
                                          (VarE $cleanup/1)
                                        )
                                      )
                                      (VarE $async/3)
                                    )
                                  )
                                  (IfE
                                    (PrimE
                                      (CallPrim)
                                      (VarE @call_succeeded)
                                      (PrimE TupPrim)
                                    )
                                    (BlockE
                                      (LetD
                                        (VarP $v/49)
                                        (PrimE
                                          TupPrim
                                          (VarE $k/1)
                                          (VarE $r/1)
                                          (VarE $b/0)
                                        )
                                      )
                                      (SwitchE
                                        (PrimE
                                          (CallPrim)
                                          (VarE $u/7)
                                          (VarE $v/49)
                                        )
                                        (case
                                          (TagP suspend WildP)
                                          (PrimE TupPrim)
                                        )
                                        (case
                                          (TagP schedule (VarP $schedule/1))
                                          (BlockE
                                            (LetD
                                              (VarP $call/1)
                                              (SelfCallE
                                                ()
                                                (PrimE
                                                  (ICReplyPrim)
                                                  (PrimE TupPrim)
                                                )
                                                (VarE $schedule/1)
                                                (PrimE
                                                  (ProjPrim 1)
                                                  (VarE $v/49)
                                                )
                                                (FuncE
                                                  $lambda
                                                  Local
                                                  Returns
                                                  ()
                                                  (PrimE
                                                    (CallPrim)
                                                    (PrimE
                                                      (ProjPrim 2)
                                                      (VarE $v/49)
                                                    )
                                                    (PrimE TupPrim)
                                                  )
                                                )
                                              )
                                            )
                                            (IfE
                                              (PrimE
                                                (CallPrim)
                                                (VarE @call_succeeded)
                                                (PrimE TupPrim)
                                              )
                                              (VarE $call/1)
                                              (PrimE
                                                (CallPrim)
                                                (PrimE
                                                  (ProjPrim 1)
                                                  (VarE $v/49)
                                                )
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE @call_error)
                                                  (PrimE TupPrim)
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (PrimE
                                      (CallPrim)
                                      (VarE $r/1)
                                      (PrimE
                                        (CallPrim)
                                        (VarE @call_error)
                                        (PrimE TupPrim)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (SwitchE
                    (VarE install_arg)
                    (case
                      (TagP new (VarP $settings/2))
                      (DeclareE
                        $available/0
                        (DeclareE
                          $accepted/0
                          (DeclareE
                            $sender_canister_version/4
                            (DeclareE
                              $canister_id/3
                              (BlockE
                                (LetD
                                  (VarP $v/8)
                                  (PrimE SystemCyclesAvailablePrim)
                                )
                                (LetD
                                  WildP
                                  (DefineE $available/0 Const (VarE $v/8))
                                )
                                (BlockE
                                  (LetD (VarP $u/8) (PrimE TupPrim))
                                  (BlockE
                                    (LetD
                                      (VarP $v/9)
                                      (PrimE
                                        SystemCyclesAcceptPrim
                                        (VarE $available/0)
                                      )
                                    )
                                    (LetD
                                      WildP
                                      (DefineE $accepted/0 Const (VarE $v/9))
                                    )
                                    (BlockE
                                      (LetD (VarP $u/9) (PrimE TupPrim))
                                      (BlockE
                                        (LetD
                                          (VarP $v/10)
                                          (PrimE
                                            OptPrim
                                            (PrimE canister_version)
                                          )
                                        )
                                        (LetD
                                          WildP
                                          (DefineE
                                            $sender_canister_version/4
                                            Const
                                            (VarE $v/10)
                                          )
                                        )
                                        (BlockE
                                          (LetD (VarP $u/10) (PrimE TupPrim))
                                          (BlockE
                                            (LetD
                                              WildP
                                              (AssignE
                                                (VarLE @cycles)
                                                (PrimE
                                                  (BinPrim Nat AddOp)
                                                  (VarE @cycles)
                                                  (VarE $accepted/0)
                                                )
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $u/11)
                                                (PrimE TupPrim)
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $k/3)
                                                  (FuncE
                                                    $k/3
                                                    Local
                                                    Returns
                                                    (params $v/12)
                                                    ()
                                                    (BlockE
                                                      (LetD
                                                        (ObjP
                                                          (canister_id
                                                            (VarP $v/11)
                                                          )
                                                        )
                                                        (VarE $v/12)
                                                      )
                                                      (LetD
                                                        WildP
                                                        (DefineE
                                                          $canister_id/3
                                                          Const
                                                          (VarE $v/11)
                                                        )
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $u/12)
                                                          (PrimE TupPrim)
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/13)
                                                            (PrimE TupPrim)
                                                          )
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $k/2)
                                                            (PrimE
                                                              TupPrim
                                                              (PrimE
                                                                (TagE install)
                                                                (PrimE TupPrim)
                                                              )
                                                              (VarE
                                                                $canister_id/3
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $v/13)
                                                    (PrimE
                                                      (ActorDotPrim
                                                        create_canister
                                                      )
                                                      (VarE @ic00)
                                                    )
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $u/14)
                                                      (BlockE
                                                        (LetD
                                                          (TupP
                                                            (VarP $async/1)
                                                            (VarP $reply/0)
                                                            (VarP $reject/0)
                                                            (VarP $cleanup/0)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              (TupP
                                                                (VarP $async/0)
                                                                (VarP
                                                                  $fulfill/0
                                                                )
                                                                (VarP $fail/0)
                                                                (VarP $clean/0)
                                                              )
                                                              (PrimE
                                                                (CallPrim
                                                                  {canister_id : Principal}
                                                                )
                                                                (VarE
                                                                  @new_async
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (PrimE
                                                              TupPrim
                                                              (VarE $async/0)
                                                              (FuncE
                                                                $lambda
                                                                Local
                                                                Returns
                                                                (params $rep0/0)
                                                                ()
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE
                                                                    $fulfill/0
                                                                  )
                                                                  (VarE $rep0/0)
                                                                )
                                                              )
                                                              (VarE $fail/0)
                                                              (VarE $clean/0)
                                                            )
                                                          )
                                                        )
                                                        (LetD
                                                          (VarP $x/1)
                                                          (BlockE
                                                            (LetD
                                                              (VarP $$base/0/0)
                                                              (VarE $settings/2)
                                                            )
                                                            (LetD
                                                              (VarP
                                                                $$sender_canister_version/0/0
                                                              )
                                                              (VarE
                                                                $sender_canister_version/4
                                                              )
                                                            )
                                                            (LetD
                                                              (VarP
                                                                $$settings/0/0
                                                              )
                                                              (PrimE
                                                                (DotPrim
                                                                  settings
                                                                )
                                                                (VarE
                                                                  $$base/0/0
                                                                )
                                                              )
                                                            )
                                                            (NewObjE
                                                              Object
                                                              (settings
                                                                $$settings/0/0
                                                              )
                                                              (sender_canister_version
                                                                $$sender_canister_version/0/0
                                                              )
                                                              {sender_canister_version : ?Nat64; settings : ?canister_settings__2}
                                                            )
                                                          )
                                                        )
                                                        (LetD
                                                          WildP
                                                          (PrimE
                                                            ICCallPrim
                                                            (VarE $v/13)
                                                            (VarE $x/1)
                                                            (VarE $reply/0)
                                                            (VarE $reject/0)
                                                            (VarE $cleanup/0)
                                                          )
                                                        )
                                                        (VarE $async/1)
                                                      )
                                                    )
                                                    (IfE
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE @call_succeeded)
                                                        (PrimE TupPrim)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $v/48)
                                                          (PrimE
                                                            TupPrim
                                                            (VarE $k/3)
                                                            (VarE $r/1)
                                                            (VarE $b/0)
                                                          )
                                                        )
                                                        (SwitchE
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $u/14)
                                                            (VarE $v/48)
                                                          )
                                                          (case
                                                            (TagP suspend WildP)
                                                            (PrimE TupPrim)
                                                          )
                                                          (case
                                                            (TagP
                                                              schedule
                                                              (VarP $schedule/0)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $call/0)
                                                                (SelfCallE
                                                                  ()
                                                                  (PrimE
                                                                    (ICReplyPrim
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                  (VarE
                                                                    $schedule/0
                                                                  )
                                                                  (PrimE
                                                                    (ProjPrim 1)
                                                                    (VarE $v/48)
                                                                  )
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    ()
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          2
                                                                        )
                                                                        (VarE
                                                                          $v/48
                                                                        )
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                              (IfE
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE
                                                                    @call_succeeded
                                                                  )
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (VarE $call/0)
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (PrimE
                                                                    (ProjPrim 1)
                                                                    (VarE $v/48)
                                                                  )
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      @call_error
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE $r/1)
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE @call_error)
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    (case
                      (TagP install (VarP $principal1/0))
                      (PrimE
                        (CallPrim)
                        (VarE $k/2)
                        (PrimE
                          TupPrim
                          (PrimE (TagE install) (PrimE TupPrim))
                          (VarE $principal1/0)
                        )
                      )
                    )
                    (case
                      (TagP reinstall (VarP $actor1/0))
                      (PrimE
                        (CallPrim)
                        (VarE $k/2)
                        (PrimE
                          TupPrim
                          (PrimE (TagE reinstall) (PrimE TupPrim))
                          (PrimE (CastPrim actor {} Principal) (VarE $actor1/0))
                        )
                      )
                    )
                    (case
                      (TagP upgrade (VarP $actor2/0))
                      (PrimE
                        (CallPrim)
                        (VarE $k/2)
                        (PrimE
                          TupPrim
                          (PrimE (TagE upgrade) (PrimE TupPrim))
                          (PrimE (CastPrim actor {} Principal) (VarE $actor2/0))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
          (PrimE TupPrim (VarE $v/47) (VarE $e/1) (VarE $c/0))
        )
      )
    )
  )
  (LetD
    (VarP @create_actor_helper)
    (FuncE
      @create_actor_helper
      Local
      Returns
      ($__2258 Any)
      (params wasm_module arg)
      (Principal -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}
      (BlockE
        (LetD
          (TupP
            (VarP $async/5)
            (VarP $reply/2)
            (VarP $reject/2)
            (VarP $cleanup/2)
          )
          (BlockE
            (LetD
              (TupP
                (VarP $async/4)
                (VarP $fulfill/2)
                (VarP $fail/2)
                (VarP $clean/2)
              )
              (PrimE (CallPrim Principal) (VarE @new_async) (PrimE TupPrim))
            )
            (PrimE
              TupPrim
              (VarE $async/4)
              (FuncE
                $lambda
                Local
                Returns
                (params $rep0/1)
                ()
                (PrimE (CallPrim) (VarE $fulfill/2) (VarE $rep0/1))
              )
              (VarE $fail/2)
              (VarE $clean/2)
            )
          )
        )
        (LetD
          WildP
          (SelfCallE
            Principal
            (PrimE
              (CallPrim $__2258)
              (FuncE
                $lambda
                Local
                Returns
                ($@anon-async-463.79__9 Any)
                (params $k/4 $r/2 $b/1)
                ()
                (DeclareE
                  $available/1
                  (DeclareE
                    $accepted/1
                    (DeclareE
                      $sender_canister_version/5
                      (DeclareE
                        $canister_id/4
                        (BlockE
                          (LetD (VarP $v/14) (PrimE SystemCyclesAvailablePrim))
                          (LetD WildP (DefineE $available/1 Const (VarE $v/14)))
                          (BlockE
                            (LetD (VarP $u/15) (PrimE TupPrim))
                            (BlockE
                              (LetD
                                (VarP $v/15)
                                (PrimE
                                  SystemCyclesAcceptPrim
                                  (VarE $available/1)
                                )
                              )
                              (LetD
                                WildP
                                (DefineE $accepted/1 Const (VarE $v/15))
                              )
                              (BlockE
                                (LetD (VarP $u/16) (PrimE TupPrim))
                                (BlockE
                                  (LetD
                                    (VarP $v/16)
                                    (PrimE OptPrim (PrimE canister_version))
                                  )
                                  (LetD
                                    WildP
                                    (DefineE
                                      $sender_canister_version/5
                                      Const
                                      (VarE $v/16)
                                    )
                                  )
                                  (BlockE
                                    (LetD (VarP $u/17) (PrimE TupPrim))
                                    (BlockE
                                      (LetD
                                        WildP
                                        (AssignE
                                          (VarLE @cycles)
                                          (PrimE
                                            (BinPrim Nat AddOp)
                                            (VarE @cycles)
                                            (VarE $accepted/1)
                                          )
                                        )
                                      )
                                      (BlockE
                                        (LetD (VarP $u/18) (PrimE TupPrim))
                                        (BlockE
                                          (LetD
                                            (VarP $k/6)
                                            (FuncE
                                              $k/6
                                              Local
                                              Returns
                                              (params $v/18)
                                              ()
                                              (BlockE
                                                (LetD
                                                  (ObjP
                                                    (canister_id (VarP $v/17))
                                                  )
                                                  (VarE $v/18)
                                                )
                                                (LetD
                                                  WildP
                                                  (DefineE
                                                    $canister_id/4
                                                    Const
                                                    (VarE $v/17)
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $u/19)
                                                    (PrimE TupPrim)
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $k/5)
                                                      (FuncE
                                                        $k/5
                                                        Local
                                                        Returns
                                                        ()
                                                        (BlockE
                                                          (LetD
                                                            (VarP $v/19)
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (VarE $v/19)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $u/20)
                                                                (PrimE TupPrim)
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $u/21)
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE $k/4)
                                                                  (PrimE
                                                                    RetPrim
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        $k/4
                                                                      )
                                                                      (VarE
                                                                        $canister_id/4
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $v/20)
                                                        (PrimE
                                                          (ActorDotPrim
                                                            install_code
                                                          )
                                                          (VarE @ic00)
                                                        )
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $u/22)
                                                          (BlockE
                                                            (LetD
                                                              (TupP
                                                                (VarP $async/9)
                                                                (VarP $reply/4)
                                                                (VarP $reject/4)
                                                                (VarP
                                                                  $cleanup/4
                                                                )
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (TupP
                                                                    (VarP
                                                                      $async/8
                                                                    )
                                                                    (VarP
                                                                      $fulfill/4
                                                                    )
                                                                    (VarP
                                                                      $fail/4
                                                                    )
                                                                    (VarP
                                                                      $clean/4
                                                                    )
                                                                  )
                                                                  (PrimE
                                                                    (CallPrim
                                                                      ()
                                                                    )
                                                                    (VarE
                                                                      @new_async
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (PrimE
                                                                  TupPrim
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    (params
                                                                      $k/23
                                                                      $r/9
                                                                      $b/8
                                                                    )
                                                                    {#schedule : () -> (); #suspend}
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        $async/8
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                        (FuncE
                                                                          $lambda
                                                                          Local
                                                                          Returns
                                                                          (params
                                                                            $v/54
                                                                          )
                                                                          ()
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              $k/23
                                                                            )
                                                                            (VarE
                                                                              $v/54
                                                                            )
                                                                          )
                                                                        )
                                                                        (VarE
                                                                          $r/9
                                                                        )
                                                                        (VarE
                                                                          $b/8
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    ()
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        $fulfill/4
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                  )
                                                                  (VarE $fail/4)
                                                                  (VarE
                                                                    $clean/4
                                                                  )
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              (VarP $x/4)
                                                              (BlockE
                                                                (LetD
                                                                  (VarP
                                                                    $$mode/1/0
                                                                  )
                                                                  (PrimE
                                                                    (TagE
                                                                      install
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$canister_id/1/0
                                                                  )
                                                                  (VarE
                                                                    $canister_id/4
                                                                  )
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$wasm_module/1/0
                                                                  )
                                                                  (VarE
                                                                    wasm_module
                                                                  )
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$arg/1/0
                                                                  )
                                                                  (VarE arg)
                                                                )
                                                                (LetD
                                                                  (VarP
                                                                    $$sender_canister_version/3/0
                                                                  )
                                                                  (PrimE
                                                                    OptPrim
                                                                    (PrimE
                                                                      canister_version
                                                                    )
                                                                  )
                                                                )
                                                                (NewObjE
                                                                  Object
                                                                  (sender_canister_version
                                                                    $$sender_canister_version/3/0
                                                                  )
                                                                  (arg
                                                                    $$arg/1/0
                                                                  )
                                                                  (wasm_module
                                                                    $$wasm_module/1/0
                                                                  )
                                                                  (canister_id
                                                                    $$canister_id/1/0
                                                                  )
                                                                  (mode
                                                                    $$mode/1/0
                                                                  )
                                                                  {arg : Blob; canister_id : Principal; mode : {#install; #reinstall; #upgrade}; sender_canister_version : ?Nat64; wasm_module : wasm_module__2}
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                ICCallPrim
                                                                (VarE $v/20)
                                                                (VarE $x/4)
                                                                (VarE $reply/4)
                                                                (VarE $reject/4)
                                                                (VarE
                                                                  $cleanup/4
                                                                )
                                                              )
                                                            )
                                                            (VarE $async/9)
                                                          )
                                                        )
                                                        (IfE
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE
                                                              @call_succeeded
                                                            )
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              (VarP $v/53)
                                                              (PrimE
                                                                TupPrim
                                                                (VarE $k/5)
                                                                (VarE $r/2)
                                                                (VarE $b/1)
                                                              )
                                                            )
                                                            (SwitchE
                                                              (PrimE
                                                                (CallPrim)
                                                                (VarE $u/22)
                                                                (VarE $v/53)
                                                              )
                                                              (case
                                                                (TagP
                                                                  suspend
                                                                  WildP
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                              (case
                                                                (TagP
                                                                  schedule
                                                                  (VarP
                                                                    $schedule/3
                                                                  )
                                                                )
                                                                (BlockE
                                                                  (LetD
                                                                    (VarP
                                                                      $call/3
                                                                    )
                                                                    (SelfCallE
                                                                      ()
                                                                      (PrimE
                                                                        (ICReplyPrim
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                      (VarE
                                                                        $schedule/3
                                                                      )
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          1
                                                                        )
                                                                        (VarE
                                                                          $v/53
                                                                        )
                                                                      )
                                                                      (FuncE
                                                                        $lambda
                                                                        Local
                                                                        Returns
                                                                        ()
                                                                        (PrimE
                                                                          (CallPrim
                                                                          )
                                                                          (PrimE
                                                                            (ProjPrim
                                                                              2
                                                                            )
                                                                            (VarE
                                                                              $v/53
                                                                            )
                                                                          )
                                                                          (PrimE
                                                                            TupPrim
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (IfE
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        @call_succeeded
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                    (VarE
                                                                      $call/3
                                                                    )
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          1
                                                                        )
                                                                        (VarE
                                                                          $v/53
                                                                        )
                                                                      )
                                                                      (PrimE
                                                                        (CallPrim
                                                                        )
                                                                        (VarE
                                                                          @call_error
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $r/2)
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE @call_error)
                                                              (PrimE TupPrim)
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                          (BlockE
                                            (LetD
                                              (VarP $v/21)
                                              (PrimE
                                                (ActorDotPrim create_canister)
                                                (VarE @ic00)
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $u/23)
                                                (BlockE
                                                  (LetD
                                                    (TupP
                                                      (VarP $async/7)
                                                      (VarP $reply/3)
                                                      (VarP $reject/3)
                                                      (VarP $cleanup/3)
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (TupP
                                                          (VarP $async/6)
                                                          (VarP $fulfill/3)
                                                          (VarP $fail/3)
                                                          (VarP $clean/3)
                                                        )
                                                        (PrimE
                                                          (CallPrim
                                                            {canister_id : Principal}
                                                          )
                                                          (VarE @new_async)
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (PrimE
                                                        TupPrim
                                                        (VarE $async/6)
                                                        (FuncE
                                                          $lambda
                                                          Local
                                                          Returns
                                                          (params $rep0/2)
                                                          ()
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $fulfill/3)
                                                            (VarE $rep0/2)
                                                          )
                                                        )
                                                        (VarE $fail/3)
                                                        (VarE $clean/3)
                                                      )
                                                    )
                                                  )
                                                  (LetD
                                                    (VarP $x/3)
                                                    (BlockE
                                                      (LetD
                                                        (VarP $$settings/1/0)
                                                        (LitE NullLit)
                                                      )
                                                      (LetD
                                                        (VarP
                                                          $$sender_canister_version/2/0
                                                        )
                                                        (VarE
                                                          $sender_canister_version/5
                                                        )
                                                      )
                                                      (NewObjE
                                                        Object
                                                        (sender_canister_version
                                                          $$sender_canister_version/2/0
                                                        )
                                                        (settings
                                                          $$settings/1/0
                                                        )
                                                        {sender_canister_version : ?Nat64; settings : ?canister_settings__2}
                                                      )
                                                    )
                                                  )
                                                  (LetD
                                                    WildP
                                                    (PrimE
                                                      ICCallPrim
                                                      (VarE $v/21)
                                                      (VarE $x/3)
                                                      (VarE $reply/3)
                                                      (VarE $reject/3)
                                                      (VarE $cleanup/3)
                                                    )
                                                  )
                                                  (VarE $async/7)
                                                )
                                              )
                                              (IfE
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE @call_succeeded)
                                                  (PrimE TupPrim)
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $v/52)
                                                    (PrimE
                                                      TupPrim
                                                      (VarE $k/6)
                                                      (VarE $r/2)
                                                      (VarE $b/1)
                                                    )
                                                  )
                                                  (SwitchE
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $u/23)
                                                      (VarE $v/52)
                                                    )
                                                    (case
                                                      (TagP suspend WildP)
                                                      (PrimE TupPrim)
                                                    )
                                                    (case
                                                      (TagP
                                                        schedule
                                                        (VarP $schedule/2)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          (VarP $call/2)
                                                          (SelfCallE
                                                            ()
                                                            (PrimE
                                                              (ICReplyPrim)
                                                              (PrimE TupPrim)
                                                            )
                                                            (VarE $schedule/2)
                                                            (PrimE
                                                              (ProjPrim 1)
                                                              (VarE $v/52)
                                                            )
                                                            (FuncE
                                                              $lambda
                                                              Local
                                                              Returns
                                                              ()
                                                              (PrimE
                                                                (CallPrim)
                                                                (PrimE
                                                                  (ProjPrim 2)
                                                                  (VarE $v/52)
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                          )
                                                        )
                                                        (IfE
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE
                                                              @call_succeeded
                                                            )
                                                            (PrimE TupPrim)
                                                          )
                                                          (VarE $call/2)
                                                          (PrimE
                                                            (CallPrim)
                                                            (PrimE
                                                              (ProjPrim 1)
                                                              (VarE $v/52)
                                                            )
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE @call_error)
                                                              (PrimE TupPrim)
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                (PrimE
                                                  (CallPrim)
                                                  (VarE $r/2)
                                                  (PrimE
                                                    (CallPrim)
                                                    (VarE @call_error)
                                                    (PrimE TupPrim)
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
              (PrimE
                TupPrim
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $v/51)
                  ()
                  (PrimE (ICReplyPrim Principal) (VarE $v/51))
                )
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $e/2)
                  ()
                  (PrimE
                    ICRejectPrim
                    (PrimE
                      (ProjPrim 1)
                      (PrimE
                        (CastPrim
                          Error
                          ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                        )
                        (VarE $e/2)
                      )
                    )
                  )
                )
                (VarE @cleanup)
              )
            )
            (VarE $reply/2)
            (VarE $reject/2)
            (VarE $cleanup/2)
          )
        )
        (VarE $async/5)
      )
    )
  )
  (LetD
    (VarP @call_raw)
    (FuncE
      @call_raw
      Local
      Returns
      ($__2259 Any)
      (params p m a)
      (Blob -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}
      (BlockE
        (LetD
          (TupP
            (VarP $async/11)
            (VarP $reply/5)
            (VarP $reject/5)
            (VarP $cleanup/5)
          )
          (BlockE
            (LetD
              (TupP
                (VarP $async/10)
                (VarP $fulfill/5)
                (VarP $fail/5)
                (VarP $clean/5)
              )
              (PrimE (CallPrim Blob) (VarE @new_async) (PrimE TupPrim))
            )
            (PrimE
              TupPrim
              (VarE $async/10)
              (FuncE
                $lambda
                Local
                Returns
                (params $rep0/3)
                ()
                (PrimE (CallPrim) (VarE $fulfill/5) (VarE $rep0/3))
              )
              (VarE $fail/5)
              (VarE $clean/5)
            )
          )
        )
        (LetD
          WildP
          (SelfCallE
            Blob
            (PrimE
              (CallPrim $__2259)
              (FuncE
                $lambda
                Local
                Returns
                ($@call_raw__9 Any)
                (params $k/7 $r/3 $b/2)
                ()
                (BlockE
                  (LetD (VarP $v/22) (VarE p))
                  (BlockE
                    (LetD (VarP $v/23) (VarE m))
                    (BlockE
                      (LetD
                        (VarP $u/24)
                        (BlockE
                          (LetD
                            (TupP
                              (VarP $async/13)
                              (VarP $reply/6)
                              (VarP $reject/6)
                              (VarP $cleanup/6)
                            )
                            (BlockE
                              (LetD
                                (TupP
                                  (VarP $async/12)
                                  (VarP $fulfill/6)
                                  (VarP $fail/6)
                                  (VarP $clean/6)
                                )
                                (PrimE
                                  (CallPrim Blob)
                                  (VarE @new_async)
                                  (PrimE TupPrim)
                                )
                              )
                              (PrimE
                                TupPrim
                                (VarE $async/12)
                                (FuncE
                                  $lambda
                                  Local
                                  Returns
                                  (params $rep0/4)
                                  ()
                                  (PrimE
                                    (CallPrim)
                                    (VarE $fulfill/6)
                                    (VarE $rep0/4)
                                  )
                                )
                                (VarE $fail/6)
                                (VarE $clean/6)
                              )
                            )
                          )
                          (LetD
                            WildP
                            (PrimE
                              ICCallRawPrim
                              (VarE $v/22)
                              (VarE $v/23)
                              (VarE a)
                              (VarE $reply/6)
                              (VarE $reject/6)
                              (VarE $cleanup/6)
                            )
                          )
                          (VarE $async/13)
                        )
                      )
                      (IfE
                        (PrimE
                          (CallPrim)
                          (VarE @call_succeeded)
                          (PrimE TupPrim)
                        )
                        (BlockE
                          (LetD
                            (VarP $v/56)
                            (PrimE TupPrim (VarE $k/7) (VarE $r/3) (VarE $b/2))
                          )
                          (SwitchE
                            (PrimE (CallPrim) (VarE $u/24) (VarE $v/56))
                            (case (TagP suspend WildP) (PrimE TupPrim))
                            (case
                              (TagP schedule (VarP $schedule/4))
                              (BlockE
                                (LetD
                                  (VarP $call/4)
                                  (SelfCallE
                                    ()
                                    (PrimE (ICReplyPrim) (PrimE TupPrim))
                                    (VarE $schedule/4)
                                    (PrimE (ProjPrim 1) (VarE $v/56))
                                    (FuncE
                                      $lambda
                                      Local
                                      Returns
                                      ()
                                      (PrimE
                                        (CallPrim)
                                        (PrimE (ProjPrim 2) (VarE $v/56))
                                        (PrimE TupPrim)
                                      )
                                    )
                                  )
                                )
                                (IfE
                                  (PrimE
                                    (CallPrim)
                                    (VarE @call_succeeded)
                                    (PrimE TupPrim)
                                  )
                                  (VarE $call/4)
                                  (PrimE
                                    (CallPrim)
                                    (PrimE (ProjPrim 1) (VarE $v/56))
                                    (PrimE
                                      (CallPrim)
                                      (VarE @call_error)
                                      (PrimE TupPrim)
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                        (PrimE
                          (CallPrim)
                          (VarE $r/3)
                          (PrimE (CallPrim) (VarE @call_error) (PrimE TupPrim))
                        )
                      )
                    )
                  )
                )
              )
              (PrimE
                TupPrim
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $v/55)
                  ()
                  (PrimE (ICReplyPrim Blob) (VarE $v/55))
                )
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $e/3)
                  ()
                  (PrimE
                    ICRejectPrim
                    (PrimE
                      (ProjPrim 1)
                      (PrimE
                        (CastPrim
                          Error
                          ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                        )
                        (VarE $e/3)
                      )
                    )
                  )
                )
                (VarE @cleanup)
              )
            )
            (VarE $reply/5)
            (VarE $reject/5)
            (VarE $cleanup/5)
          )
        )
        (VarE $async/11)
      )
    )
  )
  (LetD
    (VarP @call_succeeded)
    (FuncE
      @call_succeeded
      Local
      Returns
      Bool
      (PrimE
        (RelPrim Nat32 EqOp)
        (PrimE call_perform_status)
        (LitE (Nat32Lit 0))
      )
    )
  )
  (LetD
    (VarP @call_error)
    (FuncE
      @call_error
      Local
      Returns
      Error
      (BlockE
        (LetD (VarP status) (PrimE call_perform_status))
        (LetD (VarP message) (PrimE call_perform_message))
        (LetD
          (VarP code)
          (PrimE
            (TagE call_error)
            (BlockE
              (LetD (VarP $err_code/0) (VarE status))
              (NewObjE Object (err_code $err_code/0) {err_code : Nat32})
            )
          )
        )
        (PrimE
          (CastPrim ({#call_error : {err_code : Nat32}}, Text) Error)
          (PrimE TupPrim (VarE code) (VarE message))
        )
      )
    )
  )
  (VarD @timers ?@Node__2 (LitE NullLit))
  (LetD
    (VarP @prune)
    (FuncE
      @prune
      Local
      Returns
      (params $id0/0)
      ?@Node__2
      (BlockE
        (VarD $temp0/58 ?@Node__2 (VarE $id0/0))
        (LoopE
          (LabelE
            $tailcall/75
            ()
            (BlockE
              (LetD (VarP n) (VarE $temp0/58))
              (PrimE
                RetPrim
                (SwitchE
                  (VarE n)
                  (case (LitP NullLit) (LitE NullLit))
                  (case
                    (OptP (VarP n))
                    (IfE
                      (PrimE
                        (RelPrim Nat64 EqOp)
                        (PrimE
                          IdxPrim
                          (PrimE (DotPrim expire) (VarE n))
                          (LitE (NatLit 0))
                        )
                        (LitE (Nat64Lit 0))
                      )
                      (BlockE
                        (LetD
                          WildP
                          (AssignE
                            (VarLE $temp0/58)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                        (PrimE (BreakPrim $tailcall/75) (PrimE TupPrim))
                      )
                      (PrimE
                        OptPrim
                        (BlockE
                          (LetD (VarP $base/1) (VarE n))
                          (LetD
                            (VarP $pre/0)
                            (PrimE
                              (CallPrim)
                              (VarE @prune)
                              (PrimE (DotPrim pre) (VarE n))
                            )
                          )
                          (LetD
                            (VarP $post/0)
                            (PrimE
                              (CallPrim)
                              (VarE @prune)
                              (PrimE (DotPrim post) (VarE n))
                            )
                          )
                          (LetD
                            (VarP $delay/0)
                            (PrimE (DotPrim delay) (VarE $base/1))
                          )
                          (LetD
                            (VarP $expire/0)
                            (PrimE (DotPrim expire) (VarE $base/1))
                          )
                          (LetD
                            (VarP $id/0)
                            (PrimE (DotPrim id) (VarE $base/1))
                          )
                          (LetD
                            (VarP $job/0)
                            (PrimE (DotPrim job) (VarE $base/1))
                          )
                          (NewObjE
                            Object
                            (job $job/0)
                            (id $id/0)
                            (expire $expire/0)
                            (delay $delay/0)
                            (post $post/0)
                            (pre $pre/0)
                            {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (LetD
    (VarP @nextExpiration)
    (FuncE
      @nextExpiration
      Local
      Returns
      (params n)
      Nat64
      (SwitchE
        (VarE n)
        (case (LitP NullLit) (LitE (Nat64Lit 0)))
        (case
          (OptP (VarP n))
          (BlockE
            (VarD
              exp
              Nat64
              (PrimE
                (CallPrim)
                (VarE @nextExpiration)
                (PrimE (DotPrim pre) (VarE n))
              )
            )
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                (BlockE
                  (LetD
                    WildP
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                  )
                  (IfE
                    (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
                    (AssignE
                      (VarLE exp)
                      (PrimE
                        (CallPrim)
                        (VarE @nextExpiration)
                        (PrimE (DotPrim post) (VarE n))
                      )
                    )
                    (PrimE TupPrim)
                  )
                )
                (PrimE TupPrim)
              )
            )
            (VarE exp)
          )
        )
      )
    )
  )
  (LetD
    (VarP @timer_helper)
    (FuncE
      @timer_helper
      Local
      Returns
      ($__2260 Any)
      (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}
      (BlockE
        (LetD
          (TupP
            (VarP $async/15)
            (VarP $reply/7)
            (VarP $reject/7)
            (VarP $cleanup/7)
          )
          (BlockE
            (LetD
              (TupP
                (VarP $async/14)
                (VarP $fulfill/7)
                (VarP $fail/7)
                (VarP $clean/7)
              )
              (PrimE (CallPrim ()) (VarE @new_async) (PrimE TupPrim))
            )
            (PrimE
              TupPrim
              (FuncE
                $lambda
                Local
                Returns
                (params $k/24 $r/10 $b/9)
                {#schedule : () -> (); #suspend}
                (PrimE
                  (CallPrim)
                  (VarE $async/14)
                  (PrimE
                    TupPrim
                    (FuncE
                      $lambda
                      Local
                      Returns
                      (params $v/57)
                      ()
                      (PrimE (CallPrim) (VarE $k/24) (VarE $v/57))
                    )
                    (VarE $r/10)
                    (VarE $b/9)
                  )
                )
              )
              (FuncE
                $lambda
                Local
                Returns
                ()
                (PrimE (CallPrim) (VarE $fulfill/7) (PrimE TupPrim))
              )
              (VarE $fail/7)
              (VarE $clean/7)
            )
          )
        )
        (LetD
          WildP
          (SelfCallE
            ()
            (PrimE
              (CallPrim $__2260)
              (FuncE
                $lambda
                Local
                Returns
                ($@timer_helper__9 Any)
                (params $k/8 $r/4 $b/3)
                ()
                (DeclareE
                  $Array_init/0
                  (DeclareE
                    $now/0
                    (DeclareE
                      $gathered/0
                      (DeclareE
                        $thunks/0
                        (DeclareE
                          $gatherExpired/0
                          (DeclareE
                            $exp/0
                            (BlockE
                              (LetD
                                (VarP $v/24)
                                (FuncE
                                  Array_init
                                  Local
                                  Returns
                                  (T__527 Any)
                                  (params $len/0 $x/0)
                                  [var T__527]
                                  (PrimE Array.init (VarE $len/0) (VarE $x/0))
                                )
                              )
                              (LetD
                                WildP
                                (DefineE $Array_init/0 Const (VarE $v/24))
                              )
                              (BlockE
                                (LetD (VarP $u/25) (PrimE TupPrim))
                                (BlockE
                                  (LetD (VarP $v/25) (PrimE SystemTimePrim))
                                  (LetD
                                    WildP
                                    (DefineE $now/0 Const (VarE $v/25))
                                  )
                                  (BlockE
                                    (LetD (VarP $u/26) (PrimE TupPrim))
                                    (BlockE
                                      (LetD
                                        (VarP $u/27)
                                        (DefineE
                                          $gathered/0
                                          Var
                                          (LitE (NatLit 0))
                                        )
                                      )
                                      (BlockE
                                        (LetD
                                          (VarP $v/26)
                                          (PrimE
                                            (CallPrim
                                              ?(<system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend})
                                            )
                                            (VarE $Array_init/0)
                                            (PrimE
                                              TupPrim
                                              (LitE (NatLit 10))
                                              (LitE NullLit)
                                            )
                                          )
                                        )
                                        (LetD
                                          WildP
                                          (DefineE $thunks/0 Const (VarE $v/26))
                                        )
                                        (BlockE
                                          (LetD (VarP $u/28) (PrimE TupPrim))
                                          (BlockE
                                            (LetD
                                              (VarP $v/27)
                                              (FuncE
                                                gatherExpired
                                                Local
                                                Returns
                                                (params $n/0)
                                                ()
                                                (SwitchE
                                                  (VarE $n/0)
                                                  (case
                                                    (LitP NullLit)
                                                    (PrimE TupPrim)
                                                  )
                                                  (case
                                                    (OptP (VarP $n/1))
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE
                                                            $gatherExpired/0
                                                          )
                                                          (PrimE
                                                            (DotPrim pre)
                                                            (VarE $n/1)
                                                          )
                                                        )
                                                      )
                                                      (LetD
                                                        WildP
                                                        (IfE
                                                          (IfE
                                                            (IfE
                                                              (PrimE
                                                                (RelPrim
                                                                  Nat64
                                                                  GtOp
                                                                )
                                                                (PrimE
                                                                  IdxPrim
                                                                  (PrimE
                                                                    (DotPrim
                                                                      expire
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                  (LitE
                                                                    (NatLit 0)
                                                                  )
                                                                )
                                                                (LitE
                                                                  (Nat64Lit 0)
                                                                )
                                                              )
                                                              (PrimE
                                                                (RelPrim
                                                                  Nat64
                                                                  LeOp
                                                                )
                                                                (PrimE
                                                                  IdxPrim
                                                                  (PrimE
                                                                    (DotPrim
                                                                      expire
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                  (LitE
                                                                    (NatLit 0)
                                                                  )
                                                                )
                                                                (VarE $now/0)
                                                              )
                                                              (LitE
                                                                (BoolLit false)
                                                              )
                                                            )
                                                            (PrimE
                                                              (RelPrim Nat LtOp)
                                                              (VarE $gathered/0)
                                                              (PrimE
                                                                array_len
                                                                (VarE $thunks/0)
                                                              )
                                                            )
                                                            (LitE
                                                              (BoolLit false)
                                                            )
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (AssignE
                                                                (IdxLE
                                                                  (VarE
                                                                    $thunks/0
                                                                  )
                                                                  (VarE
                                                                    $gathered/0
                                                                  )
                                                                )
                                                                (PrimE
                                                                  OptPrim
                                                                  (PrimE
                                                                    (DotPrim
                                                                      job
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (SwitchE
                                                                (PrimE
                                                                  (DotPrim
                                                                    delay
                                                                  )
                                                                  (VarE $n/1)
                                                                )
                                                                (case
                                                                  (AltP
                                                                    (LitP
                                                                      NullLit
                                                                    )
                                                                    (OptP
                                                                      (LitP
                                                                        (Nat64Lit
                                                                          0
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (case
                                                                  (OptP
                                                                    (VarP
                                                                      $delay/9
                                                                    )
                                                                  )
                                                                  (BlockE
                                                                    (LetD
                                                                      (VarP
                                                                        $expire/9
                                                                      )
                                                                      (PrimE
                                                                        (BinPrim
                                                                          Nat64
                                                                          AddOp
                                                                        )
                                                                        (PrimE
                                                                          IdxPrim
                                                                          (PrimE
                                                                            (DotPrim
                                                                              expire
                                                                            )
                                                                            (VarE
                                                                              $n/1
                                                                            )
                                                                          )
                                                                          (LitE
                                                                            (NatLit
                                                                              0
                                                                            )
                                                                          )
                                                                        )
                                                                        (PrimE
                                                                          (BinPrim
                                                                            Nat64
                                                                            MulOp
                                                                          )
                                                                          (VarE
                                                                            $delay/9
                                                                          )
                                                                          (PrimE
                                                                            (BinPrim
                                                                              Nat64
                                                                              AddOp
                                                                            )
                                                                            (LitE
                                                                              (Nat64Lit
                                                                                1
                                                                              )
                                                                            )
                                                                            (PrimE
                                                                              (BinPrim
                                                                                Nat64
                                                                                DivOp
                                                                              )
                                                                              (PrimE
                                                                                (BinPrim
                                                                                  Nat64
                                                                                  SubOp
                                                                                )
                                                                                (VarE
                                                                                  $now/0
                                                                                )
                                                                                (PrimE
                                                                                  IdxPrim
                                                                                  (PrimE
                                                                                    (DotPrim
                                                                                      expire
                                                                                    )
                                                                                    (VarE
                                                                                      $n/1
                                                                                    )
                                                                                  )
                                                                                  (LitE
                                                                                    (NatLit
                                                                                      0
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                              (VarE
                                                                                $delay/9
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (LetD
                                                                      WildP
                                                                      (AssignE
                                                                        (IdxLE
                                                                          (PrimE
                                                                            (DotPrim
                                                                              expire
                                                                            )
                                                                            (VarE
                                                                              $n/1
                                                                            )
                                                                          )
                                                                          (LitE
                                                                            (NatLit
                                                                              0
                                                                            )
                                                                          )
                                                                        )
                                                                        (LitE
                                                                          (Nat64Lit
                                                                            0
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (LetD
                                                                      (VarP
                                                                        $reinsert/0
                                                                      )
                                                                      (FuncE
                                                                        reinsert
                                                                        Local
                                                                        Returns
                                                                        (params
                                                                          $m/0
                                                                        )
                                                                        @Node__2
                                                                        (SwitchE
                                                                          (VarE
                                                                            $m/0
                                                                          )
                                                                          (case
                                                                            (LitP
                                                                              NullLit
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                (VarP
                                                                                  $$base/2/0
                                                                                )
                                                                                (VarE
                                                                                  $n/1
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$expire/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (ArrayPrim
                                                                                    Var
                                                                                    Nat64
                                                                                  )
                                                                                  (VarE
                                                                                    $expire/9
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$pre/1/0
                                                                                )
                                                                                (LitE
                                                                                  NullLit
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$post/1/0
                                                                                )
                                                                                (LitE
                                                                                  NullLit
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$delay/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (DotPrim
                                                                                    delay
                                                                                  )
                                                                                  (VarE
                                                                                    $$base/2/0
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$id/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (DotPrim
                                                                                    id
                                                                                  )
                                                                                  (VarE
                                                                                    $$base/2/0
                                                                                  )
                                                                                )
                                                                              )
                                                                              (LetD
                                                                                (VarP
                                                                                  $$job/1/0
                                                                                )
                                                                                (PrimE
                                                                                  (DotPrim
                                                                                    job
                                                                                  )
                                                                                  (VarE
                                                                                    $$base/2/0
                                                                                  )
                                                                                )
                                                                              )
                                                                              (NewObjE
                                                                                Object
                                                                                (job
                                                                                  $$job/1/0
                                                                                )
                                                                                (id
                                                                                  $$id/1/0
                                                                                )
                                                                                (delay
                                                                                  $$delay/1/0
                                                                                )
                                                                                (post
                                                                                  $$post/1/0
                                                                                )
                                                                                (pre
                                                                                  $$pre/1/0
                                                                                )
                                                                                (expire
                                                                                  $$expire/1/0
                                                                                )
                                                                                {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : Null; pre : Null}
                                                                              )
                                                                            )
                                                                          )
                                                                          (case
                                                                            (OptP
                                                                              (VarP
                                                                                $m/1
                                                                              )
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                WildP
                                                                                (PrimE
                                                                                  AssertPrim
                                                                                  (PrimE
                                                                                    (RelPrim
                                                                                      Bool
                                                                                      EqOp
                                                                                    )
                                                                                    (PrimE
                                                                                      (RelPrim
                                                                                        Nat64
                                                                                        EqOp
                                                                                      )
                                                                                      (PrimE
                                                                                        IdxPrim
                                                                                        (PrimE
                                                                                          (DotPrim
                                                                                            expire
                                                                                          )
                                                                                          (VarE
                                                                                            $m/1
                                                                                          )
                                                                                        )
                                                                                        (LitE
                                                                                          (NatLit
                                                                                            0
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                      (LitE
                                                                                        (Nat64Lit
                                                                                          0
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                    (LitE
                                                                                      (BoolLit
                                                                                        false
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                              (IfE
                                                                                (PrimE
                                                                                  (RelPrim
                                                                                    Nat64
                                                                                    LtOp
                                                                                  )
                                                                                  (VarE
                                                                                    $expire/9
                                                                                  )
                                                                                  (PrimE
                                                                                    IdxPrim
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        expire
                                                                                      )
                                                                                      (VarE
                                                                                        $m/1
                                                                                      )
                                                                                    )
                                                                                    (LitE
                                                                                      (NatLit
                                                                                        0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                (BlockE
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$base/4/0
                                                                                    )
                                                                                    (VarE
                                                                                      $m/1
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$pre/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      OptPrim
                                                                                      (PrimE
                                                                                        (CallPrim
                                                                                        )
                                                                                        (VarE
                                                                                          $reinsert/0
                                                                                        )
                                                                                        (PrimE
                                                                                          (DotPrim
                                                                                            pre
                                                                                          )
                                                                                          (VarE
                                                                                            $m/1
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$delay/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        delay
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$expire/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        expire
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$id/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        id
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$job/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        job
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$post/3/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        post
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/4/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (NewObjE
                                                                                    Object
                                                                                    (post
                                                                                      $$post/3/0
                                                                                    )
                                                                                    (job
                                                                                      $$job/3/0
                                                                                    )
                                                                                    (id
                                                                                      $$id/3/0
                                                                                    )
                                                                                    (expire
                                                                                      $$expire/3/0
                                                                                    )
                                                                                    (delay
                                                                                      $$delay/3/0
                                                                                    )
                                                                                    (pre
                                                                                      $$pre/3/0
                                                                                    )
                                                                                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                                                                                  )
                                                                                )
                                                                                (BlockE
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$base/3/0
                                                                                    )
                                                                                    (VarE
                                                                                      $m/1
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$post/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      OptPrim
                                                                                      (PrimE
                                                                                        (CallPrim
                                                                                        )
                                                                                        (VarE
                                                                                          $reinsert/0
                                                                                        )
                                                                                        (PrimE
                                                                                          (DotPrim
                                                                                            post
                                                                                          )
                                                                                          (VarE
                                                                                            $m/1
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$delay/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        delay
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$expire/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        expire
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$id/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        id
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$job/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        job
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $$pre/2/0
                                                                                    )
                                                                                    (PrimE
                                                                                      (DotPrim
                                                                                        pre
                                                                                      )
                                                                                      (VarE
                                                                                        $$base/3/0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                  (NewObjE
                                                                                    Object
                                                                                    (pre
                                                                                      $$pre/2/0
                                                                                    )
                                                                                    (job
                                                                                      $$job/2/0
                                                                                    )
                                                                                    (id
                                                                                      $$id/2/0
                                                                                    )
                                                                                    (expire
                                                                                      $$expire/2/0
                                                                                    )
                                                                                    (delay
                                                                                      $$delay/2/0
                                                                                    )
                                                                                    (post
                                                                                      $$post/2/0
                                                                                    )
                                                                                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (AssignE
                                                                      (VarLE
                                                                        @timers
                                                                      )
                                                                      (PrimE
                                                                        OptPrim
                                                                        (PrimE
                                                                          (CallPrim
                                                                          )
                                                                          (VarE
                                                                            $reinsert/0
                                                                          )
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              @prune
                                                                            )
                                                                            (VarE
                                                                              @timers
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (AssignE
                                                                (IdxLE
                                                                  (PrimE
                                                                    (DotPrim
                                                                      expire
                                                                    )
                                                                    (VarE $n/1)
                                                                  )
                                                                  (LitE
                                                                    (NatLit 0)
                                                                  )
                                                                )
                                                                (LitE
                                                                  (Nat64Lit 0)
                                                                )
                                                              )
                                                            )
                                                            (AssignE
                                                              (VarLE
                                                                $gathered/0
                                                              )
                                                              (PrimE
                                                                (BinPrim
                                                                  Nat
                                                                  AddOp
                                                                )
                                                                (VarE
                                                                  $gathered/0
                                                                )
                                                                (LitE
                                                                  (NatLit 1)
                                                                )
                                                              )
                                                            )
                                                          )
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE $gatherExpired/0)
                                                        (PrimE
                                                          (DotPrim post)
                                                          (VarE $n/1)
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                            (LetD
                                              WildP
                                              (DefineE
                                                $gatherExpired/0
                                                Const
                                                (VarE $v/27)
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $u/29)
                                                (PrimE TupPrim)
                                              )
                                              (BlockE
                                                (LetD
                                                  WildP
                                                  (PrimE
                                                    (CallPrim)
                                                    (VarE $gatherExpired/0)
                                                    (VarE @timers)
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $u/30)
                                                    (PrimE TupPrim)
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $v/28)
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE @nextExpiration)
                                                        (VarE @timers)
                                                      )
                                                    )
                                                    (LetD
                                                      WildP
                                                      (DefineE
                                                        $exp/0
                                                        Const
                                                        (VarE $v/28)
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $u/31)
                                                        (PrimE TupPrim)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          WildP
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                global_timer_set
                                                                (VarE $exp/0)
                                                              )
                                                            )
                                                            (PrimE TupPrim)
                                                          )
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/32)
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (IfE
                                                                (PrimE
                                                                  (RelPrim
                                                                    Nat64
                                                                    EqOp
                                                                  )
                                                                  (VarE $exp/0)
                                                                  (LitE
                                                                    (Nat64Lit 0)
                                                                  )
                                                                )
                                                                (AssignE
                                                                  (VarLE
                                                                    @timers
                                                                  )
                                                                  (LitE NullLit)
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $u/33)
                                                                (PrimE TupPrim)
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $u/34)
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (DeclareE
                                                                  $$arr/2/0
                                                                  (DeclareE
                                                                    $$last/2/0
                                                                    (DeclareE
                                                                      $$indx/2/0
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $v/29
                                                                          )
                                                                          (VarE
                                                                            $thunks/0
                                                                          )
                                                                        )
                                                                        (LetD
                                                                          WildP
                                                                          (DefineE
                                                                            $$arr/2/0
                                                                            Const
                                                                            (VarE
                                                                              $v/29
                                                                            )
                                                                          )
                                                                        )
                                                                        (BlockE
                                                                          (LetD
                                                                            (VarP
                                                                              $u/35
                                                                            )
                                                                            (PrimE
                                                                              TupPrim
                                                                            )
                                                                          )
                                                                          (BlockE
                                                                            (LetD
                                                                              (VarP
                                                                                $v/30
                                                                              )
                                                                              (PrimE
                                                                                GetLastArrayOffset
                                                                                (VarE
                                                                                  $$arr/2/0
                                                                                )
                                                                              )
                                                                            )
                                                                            (LetD
                                                                              WildP
                                                                              (DefineE
                                                                                $$last/2/0
                                                                                Const
                                                                                (VarE
                                                                                  $v/30
                                                                                )
                                                                              )
                                                                            )
                                                                            (BlockE
                                                                              (LetD
                                                                                (VarP
                                                                                  $u/36
                                                                                )
                                                                                (PrimE
                                                                                  TupPrim
                                                                                )
                                                                              )
                                                                              (BlockE
                                                                                (LetD
                                                                                  (VarP
                                                                                    $u/37
                                                                                  )
                                                                                  (DefineE
                                                                                    $$indx/2/0
                                                                                    Var
                                                                                    (LitE
                                                                                      (NatLit
                                                                                        0
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                (BlockE
                                                                                  (LetD
                                                                                    (VarP
                                                                                      $u/38
                                                                                    )
                                                                                    (PrimE
                                                                                      TupPrim
                                                                                    )
                                                                                  )
                                                                                  (IfE
                                                                                    (PrimE
                                                                                      EqArrayOffset
                                                                                      (VarE
                                                                                        $$last/2/0
                                                                                      )
                                                                                      (LitE
                                                                                        (IntLit
                                                                                          -1
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                    (PrimE
                                                                                      (CallPrim
                                                                                      )
                                                                                      (VarE
                                                                                        $k/8
                                                                                      )
                                                                                      (PrimE
                                                                                        TupPrim
                                                                                      )
                                                                                    )
                                                                                    (BlockE
                                                                                      (LetD
                                                                                        (VarP
                                                                                          $loop/0
                                                                                        )
                                                                                        (FuncE
                                                                                          $loop/0
                                                                                          Local
                                                                                          Returns
                                                                                          ()
                                                                                          (BlockE
                                                                                            (LetD
                                                                                              (VarP
                                                                                                $v/31
                                                                                              )
                                                                                              (PrimE
                                                                                                TupPrim
                                                                                              )
                                                                                            )
                                                                                            (DeclareE
                                                                                              $o/0
                                                                                              (BlockE
                                                                                                (LetD
                                                                                                  (VarP
                                                                                                    $v/32
                                                                                                  )
                                                                                                  (PrimE
                                                                                                    DerefArrayOffset
                                                                                                    (VarE
                                                                                                      $$arr/2/0
                                                                                                    )
                                                                                                    (VarE
                                                                                                      $$indx/2/0
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                                (LetD
                                                                                                  WildP
                                                                                                  (DefineE
                                                                                                    $o/0
                                                                                                    Const
                                                                                                    (VarE
                                                                                                      $v/32
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                                (BlockE
                                                                                                  (LetD
                                                                                                    (VarP
                                                                                                      $u/39
                                                                                                    )
                                                                                                    (PrimE
                                                                                                      TupPrim
                                                                                                    )
                                                                                                  )
                                                                                                  (BlockE
                                                                                                    (LetD
                                                                                                      (VarP
                                                                                                        $k/9
                                                                                                      )
                                                                                                      (FuncE
                                                                                                        $k/9
                                                                                                        Local
                                                                                                        Returns
                                                                                                        ()
                                                                                                        (BlockE
                                                                                                          (LetD
                                                                                                            (VarP
                                                                                                              $v/33
                                                                                                            )
                                                                                                            (PrimE
                                                                                                              TupPrim
                                                                                                            )
                                                                                                          )
                                                                                                          (BlockE
                                                                                                            (LetD
                                                                                                              WildP
                                                                                                              (VarE
                                                                                                                $v/33
                                                                                                              )
                                                                                                            )
                                                                                                            (BlockE
                                                                                                              (LetD
                                                                                                                (VarP
                                                                                                                  $u/40
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                              (BlockE
                                                                                                                (LetD
                                                                                                                  (VarP
                                                                                                                    $u/41
                                                                                                                  )
                                                                                                                  (PrimE
                                                                                                                    TupPrim
                                                                                                                  )
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  (CallPrim
                                                                                                                  )
                                                                                                                  (VarE
                                                                                                                    $loop/0
                                                                                                                  )
                                                                                                                  (IfE
                                                                                                                    (PrimE
                                                                                                                      EqArrayOffset
                                                                                                                      (VarE
                                                                                                                        $$indx/2/0
                                                                                                                      )
                                                                                                                      (VarE
                                                                                                                        $$last/2/0
                                                                                                                      )
                                                                                                                    )
                                                                                                                    (PrimE
                                                                                                                      RetPrim
                                                                                                                      (PrimE
                                                                                                                        (CallPrim
                                                                                                                        )
                                                                                                                        (VarE
                                                                                                                          $k/8
                                                                                                                        )
                                                                                                                        (PrimE
                                                                                                                          TupPrim
                                                                                                                        )
                                                                                                                      )
                                                                                                                    )
                                                                                                                    (AssignE
                                                                                                                      (VarLE
                                                                                                                        $$indx/2/0
                                                                                                                      )
                                                                                                                      (PrimE
                                                                                                                        NextArrayOffset
                                                                                                                        (VarE
                                                                                                                          $$indx/2/0
                                                                                                                        )
                                                                                                                      )
                                                                                                                    )
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                    (SwitchE
                                                                                                      (VarE
                                                                                                        $o/0
                                                                                                      )
                                                                                                      (case
                                                                                                        (OptP
                                                                                                          (VarP
                                                                                                            $thunk/3
                                                                                                          )
                                                                                                        )
                                                                                                        (BlockE
                                                                                                          (LetD
                                                                                                            (VarP
                                                                                                              $v/34
                                                                                                            )
                                                                                                            (VarE
                                                                                                              $thunk/3
                                                                                                            )
                                                                                                          )
                                                                                                          (BlockE
                                                                                                            (LetD
                                                                                                              (VarP
                                                                                                                $u/42
                                                                                                              )
                                                                                                              (PrimE
                                                                                                                (CallPrim
                                                                                                                  $@timer_helper__9
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  $v/34
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                            (IfE
                                                                                                              (PrimE
                                                                                                                (CallPrim
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  @call_succeeded
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  TupPrim
                                                                                                                )
                                                                                                              )
                                                                                                              (BlockE
                                                                                                                (LetD
                                                                                                                  WildP
                                                                                                                  (VarE
                                                                                                                    $u/42
                                                                                                                  )
                                                                                                                )
                                                                                                                (BlockE
                                                                                                                  (LetD
                                                                                                                    (VarP
                                                                                                                      $u/43
                                                                                                                    )
                                                                                                                    (PrimE
                                                                                                                      TupPrim
                                                                                                                    )
                                                                                                                  )
                                                                                                                  (BlockE
                                                                                                                    (LetD
                                                                                                                      (VarP
                                                                                                                        $u/44
                                                                                                                      )
                                                                                                                      (PrimE
                                                                                                                        TupPrim
                                                                                                                      )
                                                                                                                    )
                                                                                                                    (PrimE
                                                                                                                      (CallPrim
                                                                                                                      )
                                                                                                                      (VarE
                                                                                                                        $k/9
                                                                                                                      )
                                                                                                                      (PrimE
                                                                                                                        TupPrim
                                                                                                                      )
                                                                                                                    )
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                              (PrimE
                                                                                                                (CallPrim
                                                                                                                )
                                                                                                                (VarE
                                                                                                                  $r/4
                                                                                                                )
                                                                                                                (PrimE
                                                                                                                  (CallPrim
                                                                                                                  )
                                                                                                                  (VarE
                                                                                                                    @call_error
                                                                                                                  )
                                                                                                                  (PrimE
                                                                                                                    TupPrim
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                      (case
                                                                                                        WildP
                                                                                                        (PrimE
                                                                                                          (CallPrim
                                                                                                          )
                                                                                                          (VarE
                                                                                                            $k/9
                                                                                                          )
                                                                                                          (PrimE
                                                                                                            TupPrim
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                      (PrimE
                                                                                        (CallPrim
                                                                                        )
                                                                                        (VarE
                                                                                          $loop/0
                                                                                        )
                                                                                        (PrimE
                                                                                          TupPrim
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
              (PrimE
                TupPrim
                (FuncE
                  $lambda
                  Local
                  Returns
                  ()
                  (BlockE
                    (LetD (VarP $v/58) (PrimE TupPrim))
                    (PrimE (ICReplyPrim) (VarE $v/58))
                  )
                )
                (FuncE
                  $lambda
                  Local
                  Returns
                  (params $e/4)
                  ()
                  (PrimE
                    ICRejectPrim
                    (PrimE
                      (ProjPrim 1)
                      (PrimE
                        (CastPrim
                          Error
                          ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                        )
                        (VarE $e/4)
                      )
                    )
                  )
                )
                (VarE @cleanup)
              )
            )
            (VarE $reply/7)
            (VarE $reject/7)
            (VarE $cleanup/7)
          )
        )
        (VarE $async/15)
      )
    )
  )
  (VarD @lastTimerId Nat (LitE (NatLit 0)))
  (LetD
    (VarP @setTimer)
    (FuncE
      @setTimer
      Local
      Returns
      ($__2261 Any)
      (params delayNanos recurring job)
      Nat
      (BlockE
        (LetD
          WildP
          (AssignE
            (VarLE @lastTimerId)
            (PrimE (BinPrim Nat AddOp) (VarE @lastTimerId) (LitE (NatLit 1)))
          )
        )
        (LetD (VarP id) (VarE @lastTimerId))
        (LetD (VarP now) (PrimE SystemTimePrim))
        (LetD
          (VarP expire)
          (PrimE (BinPrim Nat64 AddOp) (VarE now) (VarE delayNanos))
        )
        (LetD
          (VarP delay)
          (IfE
            (VarE recurring)
            (PrimE OptPrim (VarE delayNanos))
            (LitE NullLit)
          )
        )
        (LetD
          (VarP insert)
          (FuncE
            insert
            Local
            Returns
            (params n)
            @Node__2
            (SwitchE
              (VarE n)
              (case
                (LitP NullLit)
                (BlockE
                  (LetD
                    (VarP $expire/4)
                    (PrimE (ArrayPrim Var Nat64) (VarE expire))
                  )
                  (LetD (VarP $id/4) (VarE id))
                  (LetD (VarP $delay/4) (VarE delay))
                  (LetD (VarP $job/4) (VarE job))
                  (LetD (VarP $pre/4) (LitE NullLit))
                  (LetD (VarP $post/4) (LitE NullLit))
                  (NewObjE
                    Object
                    (post $post/4)
                    (pre $pre/4)
                    (job $job/4)
                    (delay $delay/4)
                    (id $id/4)
                    (expire $expire/4)
                    {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                  )
                )
              )
              (case
                (OptP (VarP n))
                (BlockE
                  (LetD
                    WildP
                    (PrimE
                      AssertPrim
                      (PrimE
                        (RelPrim Bool EqOp)
                        (PrimE
                          (RelPrim Nat64 EqOp)
                          (PrimE
                            IdxPrim
                            (PrimE (DotPrim expire) (VarE n))
                            (LitE (NatLit 0))
                          )
                          (LitE (Nat64Lit 0))
                        )
                        (LitE (BoolLit false))
                      )
                    )
                  )
                  (IfE
                    (PrimE
                      (RelPrim Nat64 LtOp)
                      (VarE expire)
                      (PrimE
                        IdxPrim
                        (PrimE (DotPrim expire) (VarE n))
                        (LitE (NatLit 0))
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/6) (VarE n))
                      (LetD
                        (VarP $pre/6)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim pre) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/6)
                        (PrimE (DotPrim delay) (VarE $base/6))
                      )
                      (LetD
                        (VarP $expire/6)
                        (PrimE (DotPrim expire) (VarE $base/6))
                      )
                      (LetD (VarP $id/6) (PrimE (DotPrim id) (VarE $base/6)))
                      (LetD (VarP $job/6) (PrimE (DotPrim job) (VarE $base/6)))
                      (LetD
                        (VarP $post/6)
                        (PrimE (DotPrim post) (VarE $base/6))
                      )
                      (NewObjE
                        Object
                        (post $post/6)
                        (job $job/6)
                        (id $id/6)
                        (expire $expire/6)
                        (delay $delay/6)
                        (pre $pre/6)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                      )
                    )
                    (BlockE
                      (LetD (VarP $base/5) (VarE n))
                      (LetD
                        (VarP $post/5)
                        (PrimE
                          OptPrim
                          (PrimE
                            (CallPrim)
                            (VarE insert)
                            (PrimE (DotPrim post) (VarE n))
                          )
                        )
                      )
                      (LetD
                        (VarP $delay/5)
                        (PrimE (DotPrim delay) (VarE $base/5))
                      )
                      (LetD
                        (VarP $expire/5)
                        (PrimE (DotPrim expire) (VarE $base/5))
                      )
                      (LetD (VarP $id/5) (PrimE (DotPrim id) (VarE $base/5)))
                      (LetD (VarP $job/5) (PrimE (DotPrim job) (VarE $base/5)))
                      (LetD (VarP $pre/5) (PrimE (DotPrim pre) (VarE $base/5)))
                      (NewObjE
                        Object
                        (pre $pre/5)
                        (job $job/5)
                        (id $id/5)
                        (expire $expire/5)
                        (delay $delay/5)
                        (post $post/5)
                        {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE
              OptPrim
              (PrimE
                (CallPrim)
                (VarE insert)
                (PrimE (CallPrim) (VarE @prune) (VarE @timers))
              )
            )
          )
        )
        (LetD
          (VarP exp)
          (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
        )
        (LetD
          WildP
          (IfE
            (PrimE (RelPrim Nat64 EqOp) (VarE exp) (LitE (Nat64Lit 0)))
            (AssignE (VarLE @timers) (LitE NullLit))
            (PrimE TupPrim)
          )
        )
        (LetD
          WildP
          (BlockE
            (LetD WildP (PrimE global_timer_set (VarE exp)))
            (PrimE TupPrim)
          )
        )
        (VarE id)
      )
    )
  )
  (LetD
    (VarP @cancelTimer)
    (FuncE
      @cancelTimer
      Local
      Returns
      (params id)
      ()
      (BlockE
        (LetD
          (VarP graft)
          (FuncE
            graft
            Local
            Returns
            (params onto branch)
            ?@Node__2
            (SwitchE
              (PrimE TupPrim (VarE onto) (VarE branch))
              (case (TupP (LitP NullLit) (LitP NullLit)) (LitE NullLit))
              (case (TupP (LitP NullLit) WildP) (VarE branch))
              (case (TupP WildP (LitP NullLit)) (VarE onto))
              (case
                (TupP (OptP (VarP onto)) WildP)
                (PrimE
                  OptPrim
                  (BlockE
                    (LetD (VarP $base/7) (VarE onto))
                    (LetD
                      (VarP $post/7)
                      (PrimE
                        (CallPrim)
                        (VarE graft)
                        (PrimE
                          TupPrim
                          (PrimE (DotPrim post) (VarE onto))
                          (VarE branch)
                        )
                      )
                    )
                    (LetD
                      (VarP $delay/7)
                      (PrimE (DotPrim delay) (VarE $base/7))
                    )
                    (LetD
                      (VarP $expire/7)
                      (PrimE (DotPrim expire) (VarE $base/7))
                    )
                    (LetD (VarP $id/7) (PrimE (DotPrim id) (VarE $base/7)))
                    (LetD (VarP $job/7) (PrimE (DotPrim job) (VarE $base/7)))
                    (LetD (VarP $pre/7) (PrimE (DotPrim pre) (VarE $base/7)))
                    (NewObjE
                      Object
                      (pre $pre/7)
                      (job $job/7)
                      (id $id/7)
                      (expire $expire/7)
                      (delay $delay/7)
                      (post $post/7)
                      {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          (VarP hunt)
          (FuncE
            hunt
            Local
            Returns
            (params n)
            ?@Node__2
            (SwitchE
              (VarE n)
              (case (LitP NullLit) (VarE n))
              (case
                (OptP
                  (ObjP (id (VarP node)) (pre (VarP pre)) (post (VarP post)))
                )
                (IfE
                  (PrimE (RelPrim Nat EqOp) (VarE node) (VarE id))
                  (PrimE
                    (CallPrim)
                    (VarE graft)
                    (PrimE TupPrim (VarE pre) (VarE post))
                  )
                  (LabelE
                    !
                    ?@Node__2
                    (PrimE
                      OptPrim
                      (BlockE
                        (LetD
                          (VarP $base/8)
                          (SwitchE
                            (VarE n)
                            (case
                              (LitP NullLit)
                              (PrimE (BreakPrim !) (LitE NullLit))
                            )
                            (case (OptP (VarP $v/1)) (VarE $v/1))
                          )
                        )
                        (LetD
                          (VarP $pre/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE pre))
                        )
                        (LetD
                          (VarP $post/8)
                          (PrimE (CallPrim) (VarE hunt) (VarE post))
                        )
                        (LetD
                          (VarP $delay/8)
                          (PrimE (DotPrim delay) (VarE $base/8))
                        )
                        (LetD
                          (VarP $expire/8)
                          (PrimE (DotPrim expire) (VarE $base/8))
                        )
                        (LetD (VarP $id/8) (PrimE (DotPrim id) (VarE $base/8)))
                        (LetD
                          (VarP $job/8)
                          (PrimE (DotPrim job) (VarE $base/8))
                        )
                        (NewObjE
                          Object
                          (job $job/8)
                          (id $id/8)
                          (expire $expire/8)
                          (delay $delay/8)
                          (post $post/8)
                          (pre $pre/8)
                          {delay : ?Nat64; expire : [var Nat64]; id : Nat; job : <system>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; post : ?@Node__2; pre : ?@Node__2}
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (LetD
          WildP
          (AssignE
            (VarLE @timers)
            (PrimE (CallPrim) (VarE hunt) (VarE @timers))
          )
        )
        (IfE
          (PrimE
            (RelPrim Nat64 EqOp)
            (PrimE (CallPrim) (VarE @nextExpiration) (VarE @timers))
            (LitE (Nat64Lit 0))
          )
          (BlockE
            (LetD
              WildP
              (BlockE
                (LetD WildP (PrimE global_timer_set (LitE (Nat64Lit 0))))
                (PrimE TupPrim)
              )
            )
            (AssignE (VarLE @timers) (LitE NullLit))
          )
          (PrimE TupPrim)
        )
      )
    )
  )
  (LetD
    (VarP @set_global_timer)
    (FuncE
      @set_global_timer
      Local
      Returns
      (params time)
      ()
      (BlockE (LetD WildP (PrimE global_timer_set (VarE time))) (PrimE TupPrim))
    )
  )
  (LetD
    (VarP file$@prim)
    (BlockE
      (LetD (VarP Types) (NewObjE Module module {}))
      (LetD
        (VarP abs)
        (FuncE abs Local Returns (params x) Nat (PrimE abs (VarE x)))
      )
      (LetD
        (VarP shiftLeft)
        (FuncE
          shiftLeft
          Local
          Returns
          (params x shift)
          Nat
          (PrimE lsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP shiftRight)
        (FuncE
          shiftRight
          Local
          Returns
          (params x shift)
          Nat
          (PrimE rsh_Nat (VarE x) (VarE shift))
        )
      )
      (LetD
        (VarP idlHash)
        (FuncE idlHash Local Returns (params x) Nat32 (PrimE idlHash (VarE x)))
      )
      (LetD
        (VarP debugPrint)
        (FuncE debugPrint Local Returns (params x) () (PrimE print (VarE x)))
      )
      (LetD
        (VarP debugPrintNat)
        (FuncE
          debugPrintNat
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Nat) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintInt)
        (FuncE
          debugPrintInt
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE @text_of_Int) (VarE x))
          )
        )
      )
      (LetD
        (VarP debugPrintChar)
        (FuncE
          debugPrintChar
          Local
          Returns
          (params x)
          ()
          (PrimE
            (CallPrim)
            (VarE debugPrint)
            (PrimE (CallPrim) (VarE charToText) (VarE x))
          )
        )
      )
      (LetD
        (VarP trap)
        (FuncE trap Local Returns (params x) None__3 (PrimE trap (VarE x)))
      )
      (LetD
        (VarP rts_version)
        (FuncE rts_version Local Returns Text (PrimE rts_version))
      )
      (LetD
        (VarP rts_memory_size)
        (FuncE rts_memory_size Local Returns Nat (PrimE rts_memory_size))
      )
      (LetD
        (VarP rts_heap_size)
        (FuncE rts_heap_size Local Returns Nat (PrimE rts_heap_size))
      )
      (LetD
        (VarP rts_total_allocation)
        (FuncE
          rts_total_allocation
          Local
          Returns
          Nat
          (PrimE rts_total_allocation)
        )
      )
      (LetD
        (VarP rts_reclaimed)
        (FuncE rts_reclaimed Local Returns Nat (PrimE rts_reclaimed))
      )
      (LetD
        (VarP rts_max_live_size)
        (FuncE rts_max_live_size Local Returns Nat (PrimE rts_max_live_size))
      )
      (LetD
        (VarP rts_max_stack_size)
        (FuncE rts_max_stack_size Local Returns Nat (PrimE rts_max_stack_size))
      )
      (LetD
        (VarP rts_callback_table_count)
        (FuncE
          rts_callback_table_count
          Local
          Returns
          Nat
          (PrimE rts_callback_table_count)
        )
      )
      (LetD
        (VarP rts_callback_table_size)
        (FuncE
          rts_callback_table_size
          Local
          Returns
          Nat
          (PrimE rts_callback_table_size)
        )
      )
      (LetD
        (VarP rts_mutator_instructions)
        (FuncE
          rts_mutator_instructions
          Local
          Returns
          Nat
          (PrimE rts_mutator_instructions)
        )
      )
      (LetD
        (VarP rts_collector_instructions)
        (FuncE
          rts_collector_instructions
          Local
          Returns
          Nat
          (PrimE rts_collector_instructions)
        )
      )
      (LetD
        (VarP rts_stable_memory_size)
        (FuncE
          rts_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_stable_memory_size)
        )
      )
      (LetD
        (VarP rts_logical_stable_memory_size)
        (FuncE
          rts_logical_stable_memory_size
          Local
          Returns
          Nat
          (PrimE rts_logical_stable_memory_size)
        )
      )
      (LetD (VarP int64ToInt) (VarE @int64ToInt))
      (LetD (VarP int32ToInt) (VarE @int32ToInt))
      (LetD (VarP int16ToInt) (VarE @int16ToInt))
      (LetD (VarP int8ToInt) (VarE @int8ToInt))
      (LetD (VarP nat64ToNat) (VarE @nat64ToNat))
      (LetD (VarP nat32ToNat) (VarE @nat32ToNat))
      (LetD (VarP nat16ToNat) (VarE @nat16ToNat))
      (LetD (VarP nat8ToNat) (VarE @nat8ToNat))
      (LetD
        (VarP intToInt64)
        (FuncE
          intToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32)
        (FuncE
          intToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16)
        (FuncE
          intToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8)
        (FuncE
          intToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP natToNat64)
        (FuncE
          natToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat Nat64) (VarE n))
        )
      )
      (LetD
        (VarP natToNat32)
        (FuncE
          natToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat Nat32) (VarE n))
        )
      )
      (LetD
        (VarP natToNat16)
        (FuncE
          natToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat Nat16) (VarE n))
        )
      )
      (LetD
        (VarP natToNat8)
        (FuncE
          natToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat Nat8) (VarE n))
        )
      )
      (LetD
        (VarP intToInt64Wrap)
        (FuncE
          intToInt64Wrap
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Int Int64) (VarE n))
        )
      )
      (LetD
        (VarP intToInt32Wrap)
        (FuncE
          intToInt32Wrap
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Int Int32) (VarE n))
        )
      )
      (LetD
        (VarP intToInt16Wrap)
        (FuncE
          intToInt16Wrap
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Int Int16) (VarE n))
        )
      )
      (LetD
        (VarP intToInt8Wrap)
        (FuncE
          intToInt8Wrap
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Int Int8) (VarE n))
        )
      )
      (LetD
        (VarP intToNat64Wrap)
        (FuncE
          intToNat64Wrap
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int Nat64) (VarE n))
        )
      )
      (LetD
        (VarP intToNat32Wrap)
        (FuncE
          intToNat32Wrap
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int Nat32) (VarE n))
        )
      )
      (LetD
        (VarP intToNat16Wrap)
        (FuncE
          intToNat16Wrap
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int Nat16) (VarE n))
        )
      )
      (LetD
        (VarP intToNat8Wrap)
        (FuncE
          intToNat8Wrap
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int64ToNat64)
        (FuncE
          int64ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvWrapPrim Int64 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToInt64)
        (FuncE
          nat64ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvWrapPrim Nat64 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int32ToNat32)
        (FuncE
          int32ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvWrapPrim Int32 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToInt32)
        (FuncE
          nat32ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvWrapPrim Nat32 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int16ToNat16)
        (FuncE
          int16ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvWrapPrim Int16 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToInt16)
        (FuncE
          nat16ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvWrapPrim Nat16 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int8ToNat8)
        (FuncE
          int8ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvWrapPrim Int8 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToInt8)
        (FuncE
          nat8ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvWrapPrim Nat8 Int8) (VarE n))
        )
      )
      (LetD
        (VarP nat8ToNat16)
        (FuncE
          nat8ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat8 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat32)
        (FuncE
          nat16ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat16 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat64)
        (FuncE
          nat32ToNat64
          Local
          Returns
          (params n)
          Nat64
          (PrimE (NumConvTrapPrim Nat32 Nat64) (VarE n))
        )
      )
      (LetD
        (VarP nat64ToNat32)
        (FuncE
          nat64ToNat32
          Local
          Returns
          (params n)
          Nat32
          (PrimE (NumConvTrapPrim Nat64 Nat32) (VarE n))
        )
      )
      (LetD
        (VarP nat32ToNat16)
        (FuncE
          nat32ToNat16
          Local
          Returns
          (params n)
          Nat16
          (PrimE (NumConvTrapPrim Nat32 Nat16) (VarE n))
        )
      )
      (LetD
        (VarP nat16ToNat8)
        (FuncE
          nat16ToNat8
          Local
          Returns
          (params n)
          Nat8
          (PrimE (NumConvTrapPrim Nat16 Nat8) (VarE n))
        )
      )
      (LetD
        (VarP int8ToInt16)
        (FuncE
          int8ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int8 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt32)
        (FuncE
          int16ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int16 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt64)
        (FuncE
          int32ToInt64
          Local
          Returns
          (params n)
          Int64
          (PrimE (NumConvTrapPrim Int32 Int64) (VarE n))
        )
      )
      (LetD
        (VarP int64ToInt32)
        (FuncE
          int64ToInt32
          Local
          Returns
          (params n)
          Int32
          (PrimE (NumConvTrapPrim Int64 Int32) (VarE n))
        )
      )
      (LetD
        (VarP int32ToInt16)
        (FuncE
          int32ToInt16
          Local
          Returns
          (params n)
          Int16
          (PrimE (NumConvTrapPrim Int32 Int16) (VarE n))
        )
      )
      (LetD
        (VarP int16ToInt8)
        (FuncE
          int16ToInt8
          Local
          Returns
          (params n)
          Int8
          (PrimE (NumConvTrapPrim Int16 Int8) (VarE n))
        )
      )
      (LetD
        (VarP charToNat32)
        (FuncE
          charToNat32
          Local
          Returns
          (params c)
          Nat32
          (PrimE (NumConvWrapPrim Char Nat32) (VarE c))
        )
      )
      (LetD
        (VarP nat32ToChar)
        (FuncE
          nat32ToChar
          Local
          Returns
          (params w)
          Char
          (PrimE (NumConvTrapPrim Nat32 Char) (VarE w))
        )
      )
      (LetD
        (VarP charToText)
        (FuncE
          charToText
          Local
          Returns
          (params c)
          Text
          (PrimE conv_Char_Text (VarE c))
        )
      )
      (LetD
        (VarP charToUpper)
        (FuncE
          charToUpper
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_upper (VarE c))
        )
      )
      (LetD
        (VarP charToLower)
        (FuncE
          charToLower
          Local
          Returns
          (params c)
          Char
          (PrimE char_to_lower (VarE c))
        )
      )
      (LetD
        (VarP charIsWhitespace)
        (FuncE
          charIsWhitespace
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_whitespace (VarE c))
        )
      )
      (LetD
        (VarP charIsLowercase)
        (FuncE
          charIsLowercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_lowercase (VarE c))
        )
      )
      (LetD
        (VarP charIsUppercase)
        (FuncE
          charIsUppercase
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_uppercase (VarE c))
        )
      )
      (LetD
        (VarP charIsAlphabetic)
        (FuncE
          charIsAlphabetic
          Local
          Returns
          (params c)
          Bool
          (PrimE char_is_alphabetic (VarE c))
        )
      )
      (LetD
        (VarP blobCompare)
        (FuncE
          blobCompare
          Local
          Returns
          (params b1 b2)
          Int8
          (PrimE blob_compare (VarE b1) (VarE b2))
        )
      )
      (LetD
        (VarP hashBlob)
        (FuncE
          hashBlob
          Local
          Returns
          (params b)
          Nat32
          (PrimE crc32Hash (VarE b))
        )
      )
      (LetD
        (VarP decodeUtf8)
        (FuncE
          decodeUtf8
          Local
          Returns
          (params b)
          ?Text
          (PrimE DecodeUtf8 (VarE b))
        )
      )
      (LetD
        (VarP encodeUtf8)
        (FuncE
          encodeUtf8
          Local
          Returns
          (params t)
          Blob
          (PrimE EncodeUtf8 (VarE t))
        )
      )
      (LetD
        (VarP textCompare)
        (FuncE
          textCompare
          Local
          Returns
          (params t1 t2)
          Int8
          (PrimE text_compare (VarE t1) (VarE t2))
        )
      )
      (LetD
        (VarP textLowercase)
        (FuncE
          textLowercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_lowercase (VarE t))
        )
      )
      (LetD
        (VarP textUppercase)
        (FuncE
          textUppercase
          Local
          Returns
          (params t)
          Text
          (PrimE text_uppercase (VarE t))
        )
      )
      (LetD
        (VarP popcntNat8)
        (FuncE
          popcntNat8
          Local
          Returns
          (params w)
          Nat8
          (PrimE popcnt8 (VarE w))
        )
      )
      (LetD
        (VarP clzNat8)
        (FuncE clzNat8 Local Returns (params w) Nat8 (PrimE clz8 (VarE w)))
      )
      (LetD
        (VarP ctzNat8)
        (FuncE ctzNat8 Local Returns (params w) Nat8 (PrimE ctz8 (VarE w)))
      )
      (LetD
        (VarP btstNat8)
        (FuncE
          btstNat8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat8 EqOp)
              (PrimE btst8 (VarE w) (VarE amount))
              (LitE (Nat8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat16)
        (FuncE
          popcntNat16
          Local
          Returns
          (params w)
          Nat16
          (PrimE popcnt16 (VarE w))
        )
      )
      (LetD
        (VarP clzNat16)
        (FuncE clzNat16 Local Returns (params w) Nat16 (PrimE clz16 (VarE w)))
      )
      (LetD
        (VarP ctzNat16)
        (FuncE ctzNat16 Local Returns (params w) Nat16 (PrimE ctz16 (VarE w)))
      )
      (LetD
        (VarP btstNat16)
        (FuncE
          btstNat16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat16 EqOp)
              (PrimE btst16 (VarE w) (VarE amount))
              (LitE (Nat16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat32)
        (FuncE
          popcntNat32
          Local
          Returns
          (params w)
          Nat32
          (PrimE popcnt32 (VarE w))
        )
      )
      (LetD
        (VarP clzNat32)
        (FuncE clzNat32 Local Returns (params w) Nat32 (PrimE clz32 (VarE w)))
      )
      (LetD
        (VarP ctzNat32)
        (FuncE ctzNat32 Local Returns (params w) Nat32 (PrimE ctz32 (VarE w)))
      )
      (LetD
        (VarP btstNat32)
        (FuncE
          btstNat32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat32 EqOp)
              (PrimE btst32 (VarE w) (VarE amount))
              (LitE (Nat32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntNat64)
        (FuncE
          popcntNat64
          Local
          Returns
          (params w)
          Nat64
          (PrimE popcnt64 (VarE w))
        )
      )
      (LetD
        (VarP clzNat64)
        (FuncE clzNat64 Local Returns (params w) Nat64 (PrimE clz64 (VarE w)))
      )
      (LetD
        (VarP ctzNat64)
        (FuncE ctzNat64 Local Returns (params w) Nat64 (PrimE ctz64 (VarE w)))
      )
      (LetD
        (VarP btstNat64)
        (FuncE
          btstNat64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Nat64 EqOp)
              (PrimE btst64 (VarE w) (VarE amount))
              (LitE (Nat64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt8)
        (FuncE
          popcntInt8
          Local
          Returns
          (params w)
          Int8
          (PrimE popcntInt8 (VarE w))
        )
      )
      (LetD
        (VarP clzInt8)
        (FuncE clzInt8 Local Returns (params w) Int8 (PrimE clzInt8 (VarE w)))
      )
      (LetD
        (VarP ctzInt8)
        (FuncE ctzInt8 Local Returns (params w) Int8 (PrimE ctzInt8 (VarE w)))
      )
      (LetD
        (VarP btstInt8)
        (FuncE
          btstInt8
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int8 EqOp)
              (PrimE btstInt8 (VarE w) (VarE amount))
              (LitE (Int8Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt16)
        (FuncE
          popcntInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE popcntInt16 (VarE w))
        )
      )
      (LetD
        (VarP clzInt16)
        (FuncE
          clzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE clzInt16 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt16)
        (FuncE
          ctzInt16
          Local
          Returns
          (params w)
          Int16
          (PrimE ctzInt16 (VarE w))
        )
      )
      (LetD
        (VarP btstInt16)
        (FuncE
          btstInt16
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int16 EqOp)
              (PrimE btstInt16 (VarE w) (VarE amount))
              (LitE (Int16Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt32)
        (FuncE
          popcntInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE popcntInt32 (VarE w))
        )
      )
      (LetD
        (VarP clzInt32)
        (FuncE
          clzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE clzInt32 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt32)
        (FuncE
          ctzInt32
          Local
          Returns
          (params w)
          Int32
          (PrimE ctzInt32 (VarE w))
        )
      )
      (LetD
        (VarP btstInt32)
        (FuncE
          btstInt32
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int32 EqOp)
              (PrimE btstInt32 (VarE w) (VarE amount))
              (LitE (Int32Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP popcntInt64)
        (FuncE
          popcntInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE popcntInt64 (VarE w))
        )
      )
      (LetD
        (VarP clzInt64)
        (FuncE
          clzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE clzInt64 (VarE w))
        )
      )
      (LetD
        (VarP ctzInt64)
        (FuncE
          ctzInt64
          Local
          Returns
          (params w)
          Int64
          (PrimE ctzInt64 (VarE w))
        )
      )
      (LetD
        (VarP btstInt64)
        (FuncE
          btstInt64
          Local
          Returns
          (params w amount)
          Bool
          (PrimE
            (RelPrim Bool EqOp)
            (PrimE
              (RelPrim Int64 EqOp)
              (PrimE btstInt64 (VarE w) (VarE amount))
              (LitE (Int64Lit 0))
            )
            (LitE (BoolLit false))
          )
        )
      )
      (LetD
        (VarP floatAbs)
        (FuncE floatAbs Local Returns (params f) Float (PrimE fabs (VarE f)))
      )
      (LetD
        (VarP floatSqrt)
        (FuncE floatSqrt Local Returns (params f) Float (PrimE fsqrt (VarE f)))
      )
      (LetD
        (VarP floatCeil)
        (FuncE floatCeil Local Returns (params f) Float (PrimE fceil (VarE f)))
      )
      (LetD
        (VarP floatFloor)
        (FuncE
          floatFloor
          Local
          Returns
          (params f)
          Float
          (PrimE ffloor (VarE f))
        )
      )
      (LetD
        (VarP floatTrunc)
        (FuncE
          floatTrunc
          Local
          Returns
          (params f)
          Float
          (PrimE ftrunc (VarE f))
        )
      )
      (LetD
        (VarP floatNearest)
        (FuncE
          floatNearest
          Local
          Returns
          (params f)
          Float
          (PrimE fnearest (VarE f))
        )
      )
      (LetD
        (VarP floatMin)
        (FuncE
          floatMin
          Local
          Returns
          (params f g)
          Float
          (PrimE fmin (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatMax)
        (FuncE
          floatMax
          Local
          Returns
          (params f g)
          Float
          (PrimE fmax (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatCopySign)
        (FuncE
          floatCopySign
          Local
          Returns
          (params f g)
          Float
          (PrimE fcopysign (VarE f) (VarE g))
        )
      )
      (LetD
        (VarP floatToInt)
        (FuncE
          floatToInt
          Local
          Returns
          (params f)
          Int
          (PrimE (NumConvTrapPrim Float Int) (VarE f))
        )
      )
      (LetD
        (VarP intToFloat)
        (FuncE
          intToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int Float) (VarE n))
        )
      )
      (LetD
        (VarP floatToInt64)
        (FuncE
          floatToInt64
          Local
          Returns
          (params f)
          Int64
          (PrimE (NumConvTrapPrim Float Int64) (VarE f))
        )
      )
      (LetD
        (VarP int64ToFloat)
        (FuncE
          int64ToFloat
          Local
          Returns
          (params n)
          Float
          (PrimE (NumConvTrapPrim Int64 Float) (VarE n))
        )
      )
      (LetD (VarP floatToText) (VarE @text_of_Float))
      (LetD
        (VarP floatToFormattedText)
        (FuncE
          floatToFormattedText
          Local
          Returns
          (params f prec mode)
          Text
          (PrimE fmtFloat->Text (VarE f) (VarE prec) (VarE mode))
        )
      )
      (LetD
        (VarP sin)
        (FuncE sin Local Returns (params f) Float (PrimE fsin (VarE f)))
      )
      (LetD
        (VarP cos)
        (FuncE cos Local Returns (params f) Float (PrimE fcos (VarE f)))
      )
      (LetD
        (VarP tan)
        (FuncE tan Local Returns (params f) Float (PrimE ftan (VarE f)))
      )
      (LetD
        (VarP arcsin)
        (FuncE arcsin Local Returns (params f) Float (PrimE fasin (VarE f)))
      )
      (LetD
        (VarP arccos)
        (FuncE arccos Local Returns (params f) Float (PrimE facos (VarE f)))
      )
      (LetD
        (VarP arctan)
        (FuncE arctan Local Returns (params f) Float (PrimE fatan (VarE f)))
      )
      (LetD
        (VarP arctan2)
        (FuncE
          arctan2
          Local
          Returns
          (params y x)
          Float
          (PrimE fatan2 (VarE y) (VarE x))
        )
      )
      (LetD
        (VarP exp)
        (FuncE exp Local Returns (params f) Float (PrimE fexp (VarE f)))
      )
      (LetD
        (VarP log)
        (FuncE log Local Returns (params f) Float (PrimE flog (VarE f)))
      )
      (LetD
        (VarP Array_init)
        (FuncE
          Array_init
          Local
          Returns
          (T__528 Any)
          (params len x)
          [var T__528]
          (PrimE Array.init (VarE len) (VarE x))
        )
      )
      (LetD
        (VarP Array_tabulate)
        (FuncE
          Array_tabulate
          Local
          Returns
          (T__529 Any)
          (params len gen)
          [T__529]
          (PrimE Array.tabulate (VarE len) (VarE gen))
        )
      )
      (LetD
        (VarP blobToArray)
        (FuncE
          blobToArray
          Local
          Returns
          (params b)
          [Nat8]
          (PrimE blobToArray (VarE b))
        )
      )
      (LetD
        (VarP blobToArrayMut)
        (FuncE
          blobToArrayMut
          Local
          Returns
          (params b)
          [var Nat8]
          (PrimE blobToArrayMut (VarE b))
        )
      )
      (LetD
        (VarP arrayToBlob)
        (FuncE
          arrayToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayToBlob (VarE a))
        )
      )
      (LetD
        (VarP arrayMutToBlob)
        (FuncE
          arrayMutToBlob
          Local
          Returns
          (params a)
          Blob
          (PrimE arrayMutToBlob (VarE a))
        )
      )
      (LetD
        (VarP error)
        (FuncE
          error
          Local
          Returns
          (params message)
          Error
          (BlockE
            (LetD
              (VarP e)
              (PrimE
                TupPrim
                (PrimE (TagE canister_reject) (PrimE TupPrim))
                (VarE message)
              )
            )
            (PrimE (CastPrim (ErrorCode__2, Text) Error) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorCode)
        (FuncE
          errorCode
          Local
          Returns
          (params e)
          ErrorCode__2
          (PrimE
            (ProjPrim 0)
            (PrimE (CastPrim Error (ErrorCode__2, Text)) (VarE e))
          )
        )
      )
      (LetD
        (VarP errorMessage)
        (FuncE
          errorMessage
          Local
          Returns
          (params e)
          Text
          (PrimE
            (ProjPrim 1)
            (PrimE (CastPrim Error (ErrorCode__2, Text)) (VarE e))
          )
        )
      )
      (LetD (VarP time) (FuncE time Local Returns Nat64 (PrimE SystemTimePrim)))
      (LetD
        (VarP blobOfPrincipal)
        (FuncE
          blobOfPrincipal
          Local
          Returns
          (params id)
          Blob
          (PrimE (CastPrim Principal Blob) (VarE id))
        )
      )
      (LetD
        (VarP principalOfBlob)
        (FuncE
          principalOfBlob
          Local
          Returns
          (params act)
          Principal
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE
                  (RelPrim Nat GtOp)
                  (PrimE blob_size (VarE act))
                  (LitE (NatLit 29))
                )
                (PrimE
                  (CallPrim)
                  (VarE trap)
                  (LitE (TextLit blob too long for principal))
                )
                (PrimE TupPrim)
              )
            )
            (PrimE (CastPrim Blob Principal) (VarE act))
          )
        )
      )
      (LetD
        (VarP principalOfActor)
        (FuncE
          principalOfActor
          Local
          Returns
          (params act)
          Principal
          (PrimE (CastPrim actor {} Principal) (VarE act))
        )
      )
      (LetD
        (VarP isController)
        (FuncE
          isController
          Local
          Returns
          (params p)
          Bool
          (PrimE is_controller (VarE p))
        )
      )
      (LetD
        (VarP canisterVersion)
        (FuncE canisterVersion Local Returns Nat64 (PrimE canister_version))
      )
      (LetD (VarP createActor) (VarE @create_actor_helper))
      (LetD
        (VarP cyclesBalance)
        (FuncE cyclesBalance Local Returns Nat (PrimE SystemCyclesBalancePrim))
      )
      (LetD
        (VarP cyclesAvailable)
        (FuncE
          cyclesAvailable
          Local
          Returns
          Nat
          (PrimE SystemCyclesAvailablePrim)
        )
      )
      (LetD
        (VarP cyclesRefunded)
        (FuncE cyclesRefunded Local Returns Nat (VarE @refund))
      )
      (LetD
        (VarP cyclesAccept)
        (FuncE
          cyclesAccept
          Local
          Returns
          ($__2262 Any)
          (params amount)
          Nat
          (PrimE SystemCyclesAcceptPrim (VarE amount))
        )
      )
      (LetD
        (VarP cyclesAdd)
        (FuncE
          cyclesAdd
          Local
          Returns
          ($__2263 Any)
          (params amount)
          ()
          (BlockE
            (LetD
              WildP
              (IfE
                (PrimE (RelPrim Nat EqOp) (VarE amount) (LitE (NatLit 0)))
                (PrimE RetPrim (PrimE TupPrim))
                (PrimE TupPrim)
              )
            )
            (LetD
              WildP
              (AssignE
                (VarLE @cycles)
                (PrimE (BinPrim Nat AddOp) (VarE @cycles) (VarE amount))
              )
            )
            (IfE
              (PrimE
                (RelPrim Nat GtOp)
                (VarE @cycles)
                (LitE
                  (NatLit 340_282_366_920_938_463_463_374_607_431_768_211_455)
                )
              )
              (PrimE
                (CallPrim)
                (VarE trap)
                (LitE (TextLit cannot add more than 2^128 cycles))
              )
              (PrimE TupPrim)
            )
          )
        )
      )
      (LetD
        (VarP setCertifiedData)
        (FuncE
          setCertifiedData
          Local
          Returns
          (params data)
          ()
          (PrimE SetCertifiedData (VarE data))
        )
      )
      (LetD
        (VarP getCertificate)
        (FuncE getCertificate Local Returns ?Blob (PrimE GetCertificate))
      )
      (LetD
        (VarP stableMemorySize)
        (FuncE stableMemorySize Local Returns Nat64 (PrimE stableMemorySize))
      )
      (LetD
        (VarP stableMemoryGrow)
        (FuncE
          stableMemoryGrow
          Local
          Returns
          (params pages)
          Nat64
          (PrimE stableMemoryGrow (VarE pages))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat32)
        (FuncE
          stableMemoryLoadNat32
          Local
          Returns
          (params offset)
          Nat32
          (PrimE stableMemoryLoadNat32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat32)
        (FuncE
          stableMemoryStoreNat32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat8)
        (FuncE
          stableMemoryLoadNat8
          Local
          Returns
          (params offset)
          Nat8
          (PrimE stableMemoryLoadNat8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat8)
        (FuncE
          stableMemoryStoreNat8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat16)
        (FuncE
          stableMemoryLoadNat16
          Local
          Returns
          (params offset)
          Nat16
          (PrimE stableMemoryLoadNat16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat16)
        (FuncE
          stableMemoryStoreNat16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadNat64)
        (FuncE
          stableMemoryLoadNat64
          Local
          Returns
          (params offset)
          Nat64
          (PrimE stableMemoryLoadNat64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreNat64)
        (FuncE
          stableMemoryStoreNat64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreNat64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt32)
        (FuncE
          stableMemoryLoadInt32
          Local
          Returns
          (params offset)
          Int32
          (PrimE stableMemoryLoadInt32 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt32)
        (FuncE
          stableMemoryStoreInt32
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt32 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt8)
        (FuncE
          stableMemoryLoadInt8
          Local
          Returns
          (params offset)
          Int8
          (PrimE stableMemoryLoadInt8 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt8)
        (FuncE
          stableMemoryStoreInt8
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt8 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt16)
        (FuncE
          stableMemoryLoadInt16
          Local
          Returns
          (params offset)
          Int16
          (PrimE stableMemoryLoadInt16 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt16)
        (FuncE
          stableMemoryStoreInt16
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt16 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadInt64)
        (FuncE
          stableMemoryLoadInt64
          Local
          Returns
          (params offset)
          Int64
          (PrimE stableMemoryLoadInt64 (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreInt64)
        (FuncE
          stableMemoryStoreInt64
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreInt64 (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadFloat)
        (FuncE
          stableMemoryLoadFloat
          Local
          Returns
          (params offset)
          Float
          (PrimE stableMemoryLoadFloat (VarE offset))
        )
      )
      (LetD
        (VarP stableMemoryStoreFloat)
        (FuncE
          stableMemoryStoreFloat
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreFloat (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableMemoryLoadBlob)
        (FuncE
          stableMemoryLoadBlob
          Local
          Returns
          (params offset size)
          Blob
          (PrimE stableMemoryLoadBlob (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP stableMemoryStoreBlob)
        (FuncE
          stableMemoryStoreBlob
          Local
          Returns
          (params offset val)
          ()
          (PrimE stableMemoryStoreBlob (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP stableVarQuery)
        (FuncE
          stableVarQuery
          Local
          Returns
          shared query <system>() -> replies {size : Nat64}
          (PrimE stableVarQuery)
        )
      )
      (LetD
        (VarP regionNew)
        (FuncE regionNew Local Returns Region (PrimE regionNew))
      )
      (LetD
        (VarP regionId)
        (FuncE regionId Local Returns (params r) Nat (PrimE regionId (VarE r)))
      )
      (LetD
        (VarP regionSize)
        (FuncE
          regionSize
          Local
          Returns
          (params r)
          Nat64
          (PrimE regionSize (VarE r))
        )
      )
      (LetD
        (VarP regionGrow)
        (FuncE
          regionGrow
          Local
          Returns
          (params r pages)
          Nat64
          (PrimE regionGrow (VarE r) (VarE pages))
        )
      )
      (LetD
        (VarP regionLoadNat32)
        (FuncE
          regionLoadNat32
          Local
          Returns
          (params r offset)
          Nat32
          (PrimE regionLoadNat32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat32)
        (FuncE
          regionStoreNat32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat8)
        (FuncE
          regionLoadNat8
          Local
          Returns
          (params r offset)
          Nat8
          (PrimE regionLoadNat8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat8)
        (FuncE
          regionStoreNat8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat16)
        (FuncE
          regionLoadNat16
          Local
          Returns
          (params r offset)
          Nat16
          (PrimE regionLoadNat16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat16)
        (FuncE
          regionStoreNat16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadNat64)
        (FuncE
          regionLoadNat64
          Local
          Returns
          (params r offset)
          Nat64
          (PrimE regionLoadNat64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreNat64)
        (FuncE
          regionStoreNat64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreNat64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt32)
        (FuncE
          regionLoadInt32
          Local
          Returns
          (params r offset)
          Int32
          (PrimE regionLoadInt32 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt32)
        (FuncE
          regionStoreInt32
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt32 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt8)
        (FuncE
          regionLoadInt8
          Local
          Returns
          (params r offset)
          Int8
          (PrimE regionLoadInt8 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt8)
        (FuncE
          regionStoreInt8
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt8 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt16)
        (FuncE
          regionLoadInt16
          Local
          Returns
          (params r offset)
          Int16
          (PrimE regionLoadInt16 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt16)
        (FuncE
          regionStoreInt16
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt16 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadInt64)
        (FuncE
          regionLoadInt64
          Local
          Returns
          (params r offset)
          Int64
          (PrimE regionLoadInt64 (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreInt64)
        (FuncE
          regionStoreInt64
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreInt64 (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadFloat)
        (FuncE
          regionLoadFloat
          Local
          Returns
          (params r offset)
          Float
          (PrimE regionLoadFloat (VarE r) (VarE offset))
        )
      )
      (LetD
        (VarP regionStoreFloat)
        (FuncE
          regionStoreFloat
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreFloat (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD
        (VarP regionLoadBlob)
        (FuncE
          regionLoadBlob
          Local
          Returns
          (params r offset size)
          Blob
          (PrimE regionLoadBlob (VarE r) (VarE offset) (VarE size))
        )
      )
      (LetD
        (VarP regionStoreBlob)
        (FuncE
          regionStoreBlob
          Local
          Returns
          (params r offset val)
          ()
          (PrimE regionStoreBlob (VarE r) (VarE offset) (VarE val))
        )
      )
      (LetD (VarP call_raw) (VarE @call_raw))
      (LetD
        (VarP performanceCounter)
        (FuncE
          performanceCounter
          Local
          Returns
          (params counter)
          Nat64
          (PrimE performanceCounter (VarE counter))
        )
      )
      (LetD
        (VarP forall)
        (FuncE
          forall
          Local
          Returns
          (T__530 Any)
          (params f)
          Bool
          (PrimE forall (VarE f))
        )
      )
      (LetD
        (VarP exists)
        (FuncE
          exists
          Local
          Returns
          (T__531 Any)
          (params f)
          Bool
          (PrimE exists (VarE f))
        )
      )
      (LetD
        (VarP Ret)
        (FuncE Ret Local Returns (T__532 Any) T__532 (PrimE viperRet))
      )
      (LetD (VarP setTimer) (VarE @setTimer))
      (LetD (VarP cancelTimer) (VarE @cancelTimer))
      (NewObjE
        Module
        (trap trap)
        (time time)
        (textUppercase textUppercase)
        (textLowercase textLowercase)
        (textCompare textCompare)
        (tan tan)
        (stableVarQuery stableVarQuery)
        (stableMemoryStoreNat8 stableMemoryStoreNat8)
        (stableMemoryStoreNat64 stableMemoryStoreNat64)
        (stableMemoryStoreNat32 stableMemoryStoreNat32)
        (stableMemoryStoreNat16 stableMemoryStoreNat16)
        (stableMemoryStoreInt8 stableMemoryStoreInt8)
        (stableMemoryStoreInt64 stableMemoryStoreInt64)
        (stableMemoryStoreInt32 stableMemoryStoreInt32)
        (stableMemoryStoreInt16 stableMemoryStoreInt16)
        (stableMemoryStoreFloat stableMemoryStoreFloat)
        (stableMemoryStoreBlob stableMemoryStoreBlob)
        (stableMemorySize stableMemorySize)
        (stableMemoryLoadNat8 stableMemoryLoadNat8)
        (stableMemoryLoadNat64 stableMemoryLoadNat64)
        (stableMemoryLoadNat32 stableMemoryLoadNat32)
        (stableMemoryLoadNat16 stableMemoryLoadNat16)
        (stableMemoryLoadInt8 stableMemoryLoadInt8)
        (stableMemoryLoadInt64 stableMemoryLoadInt64)
        (stableMemoryLoadInt32 stableMemoryLoadInt32)
        (stableMemoryLoadInt16 stableMemoryLoadInt16)
        (stableMemoryLoadFloat stableMemoryLoadFloat)
        (stableMemoryLoadBlob stableMemoryLoadBlob)
        (stableMemoryGrow stableMemoryGrow)
        (sin sin)
        (shiftRight shiftRight)
        (shiftLeft shiftLeft)
        (setTimer setTimer)
        (setCertifiedData setCertifiedData)
        (rts_version rts_version)
        (rts_total_allocation rts_total_allocation)
        (rts_stable_memory_size rts_stable_memory_size)
        (rts_reclaimed rts_reclaimed)
        (rts_mutator_instructions rts_mutator_instructions)
        (rts_memory_size rts_memory_size)
        (rts_max_stack_size rts_max_stack_size)
        (rts_max_live_size rts_max_live_size)
        (rts_logical_stable_memory_size rts_logical_stable_memory_size)
        (rts_heap_size rts_heap_size)
        (rts_collector_instructions rts_collector_instructions)
        (rts_callback_table_size rts_callback_table_size)
        (rts_callback_table_count rts_callback_table_count)
        (regionStoreNat8 regionStoreNat8)
        (regionStoreNat64 regionStoreNat64)
        (regionStoreNat32 regionStoreNat32)
        (regionStoreNat16 regionStoreNat16)
        (regionStoreInt8 regionStoreInt8)
        (regionStoreInt64 regionStoreInt64)
        (regionStoreInt32 regionStoreInt32)
        (regionStoreInt16 regionStoreInt16)
        (regionStoreFloat regionStoreFloat)
        (regionStoreBlob regionStoreBlob)
        (regionSize regionSize)
        (regionNew regionNew)
        (regionLoadNat8 regionLoadNat8)
        (regionLoadNat64 regionLoadNat64)
        (regionLoadNat32 regionLoadNat32)
        (regionLoadNat16 regionLoadNat16)
        (regionLoadInt8 regionLoadInt8)
        (regionLoadInt64 regionLoadInt64)
        (regionLoadInt32 regionLoadInt32)
        (regionLoadInt16 regionLoadInt16)
        (regionLoadFloat regionLoadFloat)
        (regionLoadBlob regionLoadBlob)
        (regionId regionId)
        (regionGrow regionGrow)
        (principalOfBlob principalOfBlob)
        (principalOfActor principalOfActor)
        (popcntNat8 popcntNat8)
        (popcntNat64 popcntNat64)
        (popcntNat32 popcntNat32)
        (popcntNat16 popcntNat16)
        (popcntInt8 popcntInt8)
        (popcntInt64 popcntInt64)
        (popcntInt32 popcntInt32)
        (popcntInt16 popcntInt16)
        (performanceCounter performanceCounter)
        (natToNat8 natToNat8)
        (natToNat64 natToNat64)
        (natToNat32 natToNat32)
        (natToNat16 natToNat16)
        (nat8ToNat16 nat8ToNat16)
        (nat8ToNat nat8ToNat)
        (nat8ToInt8 nat8ToInt8)
        (nat64ToNat32 nat64ToNat32)
        (nat64ToNat nat64ToNat)
        (nat64ToInt64 nat64ToInt64)
        (nat32ToNat64 nat32ToNat64)
        (nat32ToNat16 nat32ToNat16)
        (nat32ToNat nat32ToNat)
        (nat32ToInt32 nat32ToInt32)
        (nat32ToChar nat32ToChar)
        (nat16ToNat8 nat16ToNat8)
        (nat16ToNat32 nat16ToNat32)
        (nat16ToNat nat16ToNat)
        (nat16ToInt16 nat16ToInt16)
        (log log)
        (isController isController)
        (intToNat8Wrap intToNat8Wrap)
        (intToNat64Wrap intToNat64Wrap)
        (intToNat32Wrap intToNat32Wrap)
        (intToNat16Wrap intToNat16Wrap)
        (intToInt8Wrap intToInt8Wrap)
        (intToInt8 intToInt8)
        (intToInt64Wrap intToInt64Wrap)
        (intToInt64 intToInt64)
        (intToInt32Wrap intToInt32Wrap)
        (intToInt32 intToInt32)
        (intToInt16Wrap intToInt16Wrap)
        (intToInt16 intToInt16)
        (intToFloat intToFloat)
        (int8ToNat8 int8ToNat8)
        (int8ToInt16 int8ToInt16)
        (int8ToInt int8ToInt)
        (int64ToNat64 int64ToNat64)
        (int64ToInt32 int64ToInt32)
        (int64ToInt int64ToInt)
        (int64ToFloat int64ToFloat)
        (int32ToNat32 int32ToNat32)
        (int32ToInt64 int32ToInt64)
        (int32ToInt16 int32ToInt16)
        (int32ToInt int32ToInt)
        (int16ToNat16 int16ToNat16)
        (int16ToInt8 int16ToInt8)
        (int16ToInt32 int16ToInt32)
        (int16ToInt int16ToInt)
        (idlHash idlHash)
        (hashBlob hashBlob)
        (getCertificate getCertificate)
        (forall forall)
        (floatTrunc floatTrunc)
        (floatToText floatToText)
        (floatToInt64 floatToInt64)
        (floatToInt floatToInt)
        (floatToFormattedText floatToFormattedText)
        (floatSqrt floatSqrt)
        (floatNearest floatNearest)
        (floatMin floatMin)
        (floatMax floatMax)
        (floatFloor floatFloor)
        (floatCopySign floatCopySign)
        (floatCeil floatCeil)
        (floatAbs floatAbs)
        (exp exp)
        (exists exists)
        (errorMessage errorMessage)
        (errorCode errorCode)
        (error error)
        (encodeUtf8 encodeUtf8)
        (decodeUtf8 decodeUtf8)
        (debugPrintNat debugPrintNat)
        (debugPrintInt debugPrintInt)
        (debugPrintChar debugPrintChar)
        (debugPrint debugPrint)
        (cyclesRefunded cyclesRefunded)
        (cyclesBalance cyclesBalance)
        (cyclesAvailable cyclesAvailable)
        (cyclesAdd cyclesAdd)
        (cyclesAccept cyclesAccept)
        (ctzNat8 ctzNat8)
        (ctzNat64 ctzNat64)
        (ctzNat32 ctzNat32)
        (ctzNat16 ctzNat16)
        (ctzInt8 ctzInt8)
        (ctzInt64 ctzInt64)
        (ctzInt32 ctzInt32)
        (ctzInt16 ctzInt16)
        (createActor createActor)
        (cos cos)
        (clzNat8 clzNat8)
        (clzNat64 clzNat64)
        (clzNat32 clzNat32)
        (clzNat16 clzNat16)
        (clzInt8 clzInt8)
        (clzInt64 clzInt64)
        (clzInt32 clzInt32)
        (clzInt16 clzInt16)
        (charToUpper charToUpper)
        (charToText charToText)
        (charToNat32 charToNat32)
        (charToLower charToLower)
        (charIsWhitespace charIsWhitespace)
        (charIsUppercase charIsUppercase)
        (charIsLowercase charIsLowercase)
        (charIsAlphabetic charIsAlphabetic)
        (canisterVersion canisterVersion)
        (cancelTimer cancelTimer)
        (call_raw call_raw)
        (btstNat8 btstNat8)
        (btstNat64 btstNat64)
        (btstNat32 btstNat32)
        (btstNat16 btstNat16)
        (btstInt8 btstInt8)
        (btstInt64 btstInt64)
        (btstInt32 btstInt32)
        (btstInt16 btstInt16)
        (blobToArrayMut blobToArrayMut)
        (blobToArray blobToArray)
        (blobOfPrincipal blobOfPrincipal)
        (blobCompare blobCompare)
        (arrayToBlob arrayToBlob)
        (arrayMutToBlob arrayMutToBlob)
        (arctan2 arctan2)
        (arctan arctan)
        (arcsin arcsin)
        (arccos arccos)
        (abs abs)
        (Types Types)
        (Ret Ret)
        (Array_tabulate Array_tabulate)
        (Array_init Array_init)
        module {Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; Ret : <T>() -> T; Types : module {}; abs : Int -> Nat; arccos : Float -> Float; arcsin : Float -> Float; arctan : Float -> Float; arctan2 : (Float, Float) -> Float; arrayMutToBlob : [var Nat8] -> Blob; arrayToBlob : [Nat8] -> Blob; blobCompare : (Blob, Blob) -> Int8; blobOfPrincipal : Principal -> Blob; blobToArray : Blob -> [Nat8]; blobToArrayMut : Blob -> [var Nat8]; btstInt16 : (Int16, Int16) -> Bool; btstInt32 : (Int32, Int32) -> Bool; btstInt64 : (Int64, Int64) -> Bool; btstInt8 : (Int8, Int8) -> Bool; btstNat16 : (Nat16, Nat16) -> Bool; btstNat32 : (Nat32, Nat32) -> Bool; btstNat64 : (Nat64, Nat64) -> Bool; btstNat8 : (Nat8, Nat8) -> Bool; call_raw : <system>(Principal, Text, Blob) -> (Blob -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; cancelTimer : Nat -> (); canisterVersion : () -> Nat64; charIsAlphabetic : Char -> Bool; charIsLowercase : Char -> Bool; charIsUppercase : Char -> Bool; charIsWhitespace : Char -> Bool; charToLower : Char -> Char; charToNat32 : Char -> Nat32; charToText : Char -> Text; charToUpper : Char -> Char; clzInt16 : Int16 -> Int16; clzInt32 : Int32 -> Int32; clzInt64 : Int64 -> Int64; clzInt8 : Int8 -> Int8; clzNat16 : Nat16 -> Nat16; clzNat32 : Nat32 -> Nat32; clzNat64 : Nat64 -> Nat64; clzNat8 : Nat8 -> Nat8; cos : Float -> Float; createActor : <system>(Blob, Blob) -> (Principal -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}; ctzInt16 : Int16 -> Int16; ctzInt32 : Int32 -> Int32; ctzInt64 : Int64 -> Int64; ctzInt8 : Int8 -> Int8; ctzNat16 : Nat16 -> Nat16; ctzNat32 : Nat32 -> Nat32; ctzNat64 : Nat64 -> Nat64; ctzNat8 : Nat8 -> Nat8; cyclesAccept : <system>Nat -> Nat; cyclesAdd : <system>Nat -> (); cyclesAvailable : () -> Nat; cyclesBalance : () -> Nat; cyclesRefunded : () -> Nat; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); decodeUtf8 : Blob -> ?Text; encodeUtf8 : Text -> Blob; error : Text -> Error; errorCode : Error -> ErrorCode__2; errorMessage : Error -> Text; exists : <T>(T -> Bool) -> Bool; exp : Float -> Float; floatAbs : Float -> Float; floatCeil : Float -> Float; floatCopySign : (Float, Float) -> Float; floatFloor : Float -> Float; floatMax : (Float, Float) -> Float; floatMin : (Float, Float) -> Float; floatNearest : Float -> Float; floatSqrt : Float -> Float; floatToFormattedText : (Float, Nat8, Nat8) -> Text; floatToInt : Float -> Int; floatToInt64 : Float -> Int64; floatToText : Float -> Text; floatTrunc : Float -> Float; forall : <T>(T -> Bool) -> Bool; getCertificate : () -> ?Blob; hashBlob : Blob -> Nat32; idlHash : Text -> Nat32; int16ToInt : Int16 -> Int; int16ToInt32 : Int16 -> Int32; int16ToInt8 : Int16 -> Int8; int16ToNat16 : Int16 -> Nat16; int32ToInt : Int32 -> Int; int32ToInt16 : Int32 -> Int16; int32ToInt64 : Int32 -> Int64; int32ToNat32 : Int32 -> Nat32; int64ToFloat : Int64 -> Float; int64ToInt : Int64 -> Int; int64ToInt32 : Int64 -> Int32; int64ToNat64 : Int64 -> Nat64; int8ToInt : Int8 -> Int; int8ToInt16 : Int8 -> Int16; int8ToNat8 : Int8 -> Nat8; intToFloat : Int -> Float; intToInt16 : Int -> Int16; intToInt16Wrap : Int -> Int16; intToInt32 : Int -> Int32; intToInt32Wrap : Int -> Int32; intToInt64 : Int -> Int64; intToInt64Wrap : Int -> Int64; intToInt8 : Int -> Int8; intToInt8Wrap : Int -> Int8; intToNat16Wrap : Int -> Nat16; intToNat32Wrap : Int -> Nat32; intToNat64Wrap : Int -> Nat64; intToNat8Wrap : Int -> Nat8; isController : Principal -> Bool; log : Float -> Float; nat16ToInt16 : Nat16 -> Int16; nat16ToNat : Nat16 -> Nat; nat16ToNat32 : Nat16 -> Nat32; nat16ToNat8 : Nat16 -> Nat8; nat32ToChar : Nat32 -> Char; nat32ToInt32 : Nat32 -> Int32; nat32ToNat : Nat32 -> Nat; nat32ToNat16 : Nat32 -> Nat16; nat32ToNat64 : Nat32 -> Nat64; nat64ToInt64 : Nat64 -> Int64; nat64ToNat : Nat64 -> Nat; nat64ToNat32 : Nat64 -> Nat32; nat8ToInt8 : Nat8 -> Int8; nat8ToNat : Nat8 -> Nat; nat8ToNat16 : Nat8 -> Nat16; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; performanceCounter : Nat32 -> Nat64; popcntInt16 : Int16 -> Int16; popcntInt32 : Int32 -> Int32; popcntInt64 : Int64 -> Int64; popcntInt8 : Int8 -> Int8; popcntNat16 : Nat16 -> Nat16; popcntNat32 : Nat32 -> Nat32; popcntNat64 : Nat64 -> Nat64; popcntNat8 : Nat8 -> Nat8; principalOfActor : (actor {}) -> Principal; principalOfBlob : Blob -> Principal; regionGrow : (Region, Nat64) -> Nat64; regionId : Region -> Nat; regionLoadBlob : (Region, Nat64, Nat) -> Blob; regionLoadFloat : (Region, Nat64) -> Float; regionLoadInt16 : (Region, Nat64) -> Int16; regionLoadInt32 : (Region, Nat64) -> Int32; regionLoadInt64 : (Region, Nat64) -> Int64; regionLoadInt8 : (Region, Nat64) -> Int8; regionLoadNat16 : (Region, Nat64) -> Nat16; regionLoadNat32 : (Region, Nat64) -> Nat32; regionLoadNat64 : (Region, Nat64) -> Nat64; regionLoadNat8 : (Region, Nat64) -> Nat8; regionNew : () -> Region; regionSize : Region -> Nat64; regionStoreBlob : (Region, Nat64, Blob) -> (); regionStoreFloat : (Region, Nat64, Float) -> (); regionStoreInt16 : (Region, Nat64, Int16) -> (); regionStoreInt32 : (Region, Nat64, Int32) -> (); regionStoreInt64 : (Region, Nat64, Int64) -> (); regionStoreInt8 : (Region, Nat64, Int8) -> (); regionStoreNat16 : (Region, Nat64, Nat16) -> (); regionStoreNat32 : (Region, Nat64, Nat32) -> (); regionStoreNat64 : (Region, Nat64, Nat64) -> (); regionStoreNat8 : (Region, Nat64, Nat8) -> (); rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_collector_instructions : () -> Nat; rts_heap_size : () -> Nat; rts_logical_stable_memory_size : () -> Nat; rts_max_live_size : () -> Nat; rts_max_stack_size : () -> Nat; rts_memory_size : () -> Nat; rts_mutator_instructions : () -> Nat; rts_reclaimed : () -> Nat; rts_stable_memory_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; setCertifiedData : Blob -> (); setTimer : <system>(Nat64, Bool, <system_1>() -> (() -> (), Error -> (), () -> ()) -> {#schedule : () -> (); #suspend}) -> Nat; shiftLeft : (Nat, Nat32) -> Nat; shiftRight : (Nat, Nat32) -> Nat; sin : Float -> Float; stableMemoryGrow : Nat64 -> Nat64; stableMemoryLoadBlob : (Nat64, Nat) -> Blob; stableMemoryLoadFloat : Nat64 -> Float; stableMemoryLoadInt16 : Nat64 -> Int16; stableMemoryLoadInt32 : Nat64 -> Int32; stableMemoryLoadInt64 : Nat64 -> Int64; stableMemoryLoadInt8 : Nat64 -> Int8; stableMemoryLoadNat16 : Nat64 -> Nat16; stableMemoryLoadNat32 : Nat64 -> Nat32; stableMemoryLoadNat64 : Nat64 -> Nat64; stableMemoryLoadNat8 : Nat64 -> Nat8; stableMemorySize : () -> Nat64; stableMemoryStoreBlob : (Nat64, Blob) -> (); stableMemoryStoreFloat : (Nat64, Float) -> (); stableMemoryStoreInt16 : (Nat64, Int16) -> (); stableMemoryStoreInt32 : (Nat64, Int32) -> (); stableMemoryStoreInt64 : (Nat64, Int64) -> (); stableMemoryStoreInt8 : (Nat64, Int8) -> (); stableMemoryStoreNat16 : (Nat64, Nat16) -> (); stableMemoryStoreNat32 : (Nat64, Nat32) -> (); stableMemoryStoreNat64 : (Nat64, Nat64) -> (); stableMemoryStoreNat8 : (Nat64, Nat8) -> (); stableVarQuery : () -> shared query <system>() -> replies {size : Nat64}; tan : Float -> Float; textCompare : (Text, Text) -> Int8; textLowercase : Text -> Text; textUppercase : Text -> Text; time : () -> Nat64; trap : Text -> None__3}
      )
    )
  )
  (LetD
    (ObjP
      (debugPrint (VarP debugPrint))
      (error (VarP error))
      (errorMessage (VarP errorMessage))
      (call_raw (VarP call_raw))
      (principalOfActor (VarP principalOfActor))
    )
    (VarE file$@prim)
  )
  (LetD
    (VarP $__motoko_stable_var_info)
    (FuncE
      $__motoko_stable_var_info
      Shared Query
      Replies
      (T1__17 Any)
      {size : Nat64}
      (PrimE
        (CallPrim T1__17)
        (FuncE
          $lambda
          Local
          Returns
          (T2__9 Any)
          (params $k/10 $r/5 $b/4)
          ()
          (PrimE
            (CallPrim)
            (VarE $k/10)
            (BlockE
              (LetD (VarP $$caller/0/0) (PrimE ICCallerPrim))
              (LetD
                WildP
                (PrimE
                  AssertPrim
                  (IfE
                    (PrimE
                      (RelPrim Principal EqOp)
                      (VarE $$caller/0/0)
                      (PrimE (SelfRef Principal))
                    )
                    (LitE (BoolLit true))
                    (PrimE is_controller (VarE $$caller/0/0))
                  )
                )
              )
              (LetD
                (VarP $$size/0/0)
                (PrimE (ICStableSize memory {}) (NewObjE Memory memory {}))
              )
              (NewObjE Object (size $$size/0/0) {size : Nat64})
            )
          )
        )
        (PrimE
          TupPrim
          (FuncE
            $lambda
            Local
            Returns
            (params $v/59)
            ()
            (PrimE (ICReplyPrim {size : Nat64}) (VarE $v/59))
          )
          (FuncE
            $lambda
            Local
            Returns
            (params $e/5)
            ()
            (PrimE
              ICRejectPrim
              (PrimE
                (ProjPrim 1)
                (PrimE
                  (CastPrim
                    Error
                    ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                  )
                  (VarE $e/5)
                )
              )
            )
          )
          (VarE @cleanup)
        )
      )
    )
  )
  (VarD $state/0 ?(memory {}) (PrimE OptPrim (PrimE (ICStableRead memory {}))))
  (LetD
    (VarP $getState/0)
    (FuncE
      $getState/0
      Local
      Returns
      memory {}
      (SwitchE
        (VarE $state/0)
        (case (LitP NullLit) (LoopE (PrimE TupPrim)))
        (case (OptP (VarP $v/0)) (VarE $v/0))
      )
    )
  )
  (LetD
    (VarP foo)
    (FuncE
      foo
      Shared
      Returns
      ($__2264 Any)
      ()
      (PrimE
        (CallPrim $__2264)
        (FuncE
          $lambda
          Local
          Returns
          ($foo__9 Any)
          (params $k/11 $r/6 $b/5)
          ()
          (DeclareE
            $$thunk/0/0
            (BlockE
              (LetD
                (VarP $v/35)
                (FuncE
                  $cleanup
                  Local
                  Returns
                  ()
                  (PrimE (CallPrim) (VarE debugPrint) (LitE (TextLit OUT0)))
                )
              )
              (LetD WildP (DefineE $$thunk/0/0 Const (VarE $v/35)))
              (BlockE
                (LetD (VarP $u/45) (PrimE TupPrim))
                (BlockE
                  (LetD (VarP $u/46) (PrimE TupPrim))
                  (BlockE
                    (LetD
                      (VarP $k/12)
                      (FuncE
                        $k/12
                        Local
                        Returns
                        (params $v/36)
                        ()
                        (BlockE
                          (LetD WildP (LitE (IntLit 7_771)))
                          (LetD
                            WildP
                            (PrimE
                              (CallPrim)
                              (VarE $$thunk/0/0)
                              (PrimE TupPrim)
                            )
                          )
                          (PrimE (CallPrim) (VarE $r/6) (VarE $v/36))
                        )
                      )
                    )
                    (BlockE
                      (LetD
                        (VarP $k/13)
                        (FuncE
                          $k/13
                          Local
                          Returns
                          ()
                          (BlockE
                            (LetD (VarP $v/37) (PrimE TupPrim))
                            (BlockE
                              (LetD WildP (LitE (IntLit 7_771)))
                              (LetD
                                WildP
                                (PrimE
                                  (CallPrim)
                                  (VarE $$thunk/0/0)
                                  (PrimE TupPrim)
                                )
                              )
                              (PrimE (CallPrim) (VarE $k/11) (VarE $v/37))
                            )
                          )
                        )
                      )
                      (DeclareE
                        $$thunk/1/0
                        (BlockE
                          (LetD
                            (VarP $v/38)
                            (FuncE
                              $cleanup
                              Local
                              Returns
                              ()
                              (PrimE
                                (CallPrim)
                                (VarE debugPrint)
                                (LitE (TextLit OUT1))
                              )
                            )
                          )
                          (LetD WildP (DefineE $$thunk/1/0 Const (VarE $v/38)))
                          (BlockE
                            (LetD (VarP $u/47) (PrimE TupPrim))
                            (BlockE
                              (LetD (VarP $u/48) (PrimE TupPrim))
                              (BlockE
                                (LetD
                                  (VarP $k/14)
                                  (FuncE
                                    $k/14
                                    Local
                                    Returns
                                    (params $v/39)
                                    ()
                                    (BlockE
                                      (LetD WildP (LitE (IntLit 7_772)))
                                      (LetD
                                        WildP
                                        (PrimE
                                          (CallPrim)
                                          (VarE $$thunk/0/0)
                                          (PrimE TupPrim)
                                        )
                                      )
                                      (PrimE
                                        (CallPrim)
                                        (VarE $r/6)
                                        (VarE $v/39)
                                      )
                                    )
                                  )
                                )
                                (BlockE
                                  (LetD
                                    (VarP $k/15)
                                    (FuncE
                                      $k/15
                                      Local
                                      Returns
                                      ()
                                      (BlockE
                                        (LetD (VarP $v/40) (PrimE TupPrim))
                                        (BlockE
                                          (LetD WildP (LitE (IntLit 7_771)))
                                          (LetD
                                            WildP
                                            (PrimE
                                              (CallPrim)
                                              (VarE $$thunk/1/0)
                                              (PrimE TupPrim)
                                            )
                                          )
                                          (PrimE
                                            (CallPrim)
                                            (VarE $k/13)
                                            (VarE $v/40)
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (DeclareE
                                    $$thunk/2/0
                                    (BlockE
                                      (LetD
                                        (VarP $v/41)
                                        (FuncE
                                          $cleanup
                                          Local
                                          Returns
                                          ()
                                          (PrimE
                                            (CallPrim)
                                            (VarE debugPrint)
                                            (LitE (TextLit OUT2))
                                          )
                                        )
                                      )
                                      (LetD
                                        WildP
                                        (DefineE $$thunk/2/0 Const (VarE $v/41))
                                      )
                                      (BlockE
                                        (LetD (VarP $u/49) (PrimE TupPrim))
                                        (BlockE
                                          (LetD (VarP $u/50) (PrimE TupPrim))
                                          (BlockE
                                            (LetD
                                              (VarP $k/16)
                                              (FuncE
                                                $k/16
                                                Local
                                                Returns
                                                (params $v/42)
                                                ()
                                                (BlockE
                                                  (LetD
                                                    WildP
                                                    (LitE (IntLit 7_773))
                                                  )
                                                  (LetD
                                                    WildP
                                                    (PrimE
                                                      (CallPrim)
                                                      (VarE $$thunk/0/0)
                                                      (PrimE TupPrim)
                                                    )
                                                  )
                                                  (PrimE
                                                    (CallPrim)
                                                    (VarE $r/6)
                                                    (VarE $v/42)
                                                  )
                                                )
                                              )
                                            )
                                            (BlockE
                                              (LetD
                                                (VarP $k/17)
                                                (FuncE
                                                  $k/17
                                                  Local
                                                  Returns
                                                  ()
                                                  (BlockE
                                                    (LetD
                                                      (VarP $v/43)
                                                      (PrimE TupPrim)
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        WildP
                                                        (LitE (IntLit 7_771))
                                                      )
                                                      (LetD
                                                        WildP
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $$thunk/2/0)
                                                          (PrimE TupPrim)
                                                        )
                                                      )
                                                      (PrimE
                                                        (CallPrim)
                                                        (VarE $k/15)
                                                        (VarE $v/43)
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                              (BlockE
                                                (LetD
                                                  (VarP $k/18)
                                                  (FuncE
                                                    $k/18
                                                    Local
                                                    Returns
                                                    ()
                                                    (BlockE
                                                      (LetD
                                                        (VarP $v/44)
                                                        (PrimE TupPrim)
                                                      )
                                                      (BlockE
                                                        (LetD
                                                          WildP
                                                          (LitE (IntLit 7_771))
                                                        )
                                                        (LetD
                                                          WildP
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $$thunk/0/0)
                                                            (PrimE TupPrim)
                                                          )
                                                        )
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $b/5)
                                                          (VarE $v/44)
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                (BlockE
                                                  (LetD
                                                    (VarP $k/19)
                                                    (FuncE
                                                      $k/19
                                                      Local
                                                      Returns
                                                      (params $v/45)
                                                      ()
                                                      (BlockE
                                                        (LetD
                                                          WildP
                                                          (LitE (IntLit 7_774))
                                                        )
                                                        (LetD
                                                          WildP
                                                          (PrimE
                                                            (CallPrim)
                                                            (VarE $$thunk/0/0)
                                                            (PrimE TupPrim)
                                                          )
                                                        )
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE $r/6)
                                                          (VarE $v/45)
                                                        )
                                                      )
                                                    )
                                                  )
                                                  (BlockE
                                                    (LetD
                                                      (VarP $k/20)
                                                      (FuncE
                                                        $k/20
                                                        Local
                                                        Returns
                                                        ()
                                                        (BlockE
                                                          (LetD
                                                            (VarP $v/46)
                                                            (PrimE TupPrim)
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (VarE $v/46)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (VarP $u/51)
                                                                (PrimE TupPrim)
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $u/52)
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                                (PrimE
                                                                  (CallPrim)
                                                                  (VarE $k/17)
                                                                  (IfE
                                                                    (LitE
                                                                      (BoolLit
                                                                        true
                                                                      )
                                                                    )
                                                                    (PrimE
                                                                      RetPrim
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $u/54
                                                                          )
                                                                          (PrimE
                                                                            TupPrim
                                                                          )
                                                                        )
                                                                        (BlockE
                                                                          (LetD
                                                                            WildP
                                                                            (LitE
                                                                              (IntLit
                                                                                7_772
                                                                              )
                                                                            )
                                                                          )
                                                                          (LetD
                                                                            WildP
                                                                            (PrimE
                                                                              (CallPrim
                                                                              )
                                                                              (VarE
                                                                                $$thunk/0/0
                                                                              )
                                                                              (PrimE
                                                                                TupPrim
                                                                              )
                                                                            )
                                                                          )
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              $k/11
                                                                            )
                                                                            (VarE
                                                                              $u/54
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                    (PrimE
                                                                      RetPrim
                                                                      (BlockE
                                                                        (LetD
                                                                          (VarP
                                                                            $u/53
                                                                          )
                                                                          (PrimE
                                                                            TupPrim
                                                                          )
                                                                        )
                                                                        (BlockE
                                                                          (LetD
                                                                            WildP
                                                                            (LitE
                                                                              (IntLit
                                                                                7_771
                                                                              )
                                                                            )
                                                                          )
                                                                          (LetD
                                                                            WildP
                                                                            (PrimE
                                                                              (CallPrim
                                                                              )
                                                                              (VarE
                                                                                $$thunk/0/0
                                                                              )
                                                                              (PrimE
                                                                                TupPrim
                                                                              )
                                                                            )
                                                                          )
                                                                          (PrimE
                                                                            (CallPrim
                                                                            )
                                                                            (VarE
                                                                              $k/11
                                                                            )
                                                                            (VarE
                                                                              $u/53
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                    (BlockE
                                                      (LetD
                                                        (VarP $u/55)
                                                        (BlockE
                                                          (LetD
                                                            (TupP
                                                              (VarP $async/17)
                                                              (VarP $reply/8)
                                                              (VarP $reject/8)
                                                              (VarP $cleanup/8)
                                                            )
                                                            (BlockE
                                                              (LetD
                                                                (TupP
                                                                  (VarP
                                                                    $async/16
                                                                  )
                                                                  (VarP
                                                                    $fulfill/8
                                                                  )
                                                                  (VarP $fail/8)
                                                                  (VarP
                                                                    $clean/8
                                                                  )
                                                                )
                                                                (PrimE
                                                                  (CallPrim ())
                                                                  (VarE
                                                                    @new_async
                                                                  )
                                                                  (PrimE
                                                                    TupPrim
                                                                  )
                                                                )
                                                              )
                                                              (PrimE
                                                                TupPrim
                                                                (FuncE
                                                                  $lambda
                                                                  Local
                                                                  Returns
                                                                  (params
                                                                    $k/25
                                                                    $r/11
                                                                    $b/10
                                                                  )
                                                                  {#schedule : () -> (); #suspend}
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      $async/16
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                      (FuncE
                                                                        $lambda
                                                                        Local
                                                                        Returns
                                                                        (params
                                                                          $v/62
                                                                        )
                                                                        ()
                                                                        (PrimE
                                                                          (CallPrim
                                                                          )
                                                                          (VarE
                                                                            $k/25
                                                                          )
                                                                          (VarE
                                                                            $v/62
                                                                          )
                                                                        )
                                                                      )
                                                                      (VarE
                                                                        $r/11
                                                                      )
                                                                      (VarE
                                                                        $b/10
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                (FuncE
                                                                  $lambda
                                                                  Local
                                                                  Returns
                                                                  ()
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      $fulfill/8
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (VarE $fail/8)
                                                                (VarE $clean/8)
                                                              )
                                                            )
                                                          )
                                                          (LetD
                                                            WildP
                                                            (SelfCallE
                                                              ()
                                                              (PrimE
                                                                (CallPrim
                                                                  $foo__9
                                                                )
                                                                (FuncE
                                                                  $lambda
                                                                  Local
                                                                  Returns
                                                                  ($@anon-async-8.29__9
                                                                    Any
                                                                  )
                                                                  (params
                                                                    $k/21
                                                                    $r/7
                                                                    $b/6
                                                                  )
                                                                  ()
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE $k/21)
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                )
                                                                (PrimE
                                                                  TupPrim
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    ()
                                                                    (BlockE
                                                                      (LetD
                                                                        (VarP
                                                                          $v/63
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                      (PrimE
                                                                        (ICReplyPrim
                                                                        )
                                                                        (VarE
                                                                          $v/63
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (FuncE
                                                                    $lambda
                                                                    Local
                                                                    Returns
                                                                    (params
                                                                      $e/7
                                                                    )
                                                                    ()
                                                                    (PrimE
                                                                      ICRejectPrim
                                                                      (PrimE
                                                                        (ProjPrim
                                                                          1
                                                                        )
                                                                        (PrimE
                                                                          (CastPrim
                                                                            Error
                                                                            ({#call_error : {err_code : Nat32}; #canister_error; #canister_reject; #destination_invalid; #future : Nat32; #system_fatal; #system_transient}, Text)
                                                                          )
                                                                          (VarE
                                                                            $e/7
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                  (VarE
                                                                    @cleanup
                                                                  )
                                                                )
                                                              )
                                                              (VarE $reply/8)
                                                              (VarE $reject/8)
                                                              (VarE $cleanup/8)
                                                            )
                                                          )
                                                          (VarE $async/17)
                                                        )
                                                      )
                                                      (IfE
                                                        (PrimE
                                                          (CallPrim)
                                                          (VarE @call_succeeded)
                                                          (PrimE TupPrim)
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $v/61)
                                                            (PrimE
                                                              TupPrim
                                                              (VarE $k/20)
                                                              (VarE $k/19)
                                                              (VarE $k/18)
                                                            )
                                                          )
                                                          (SwitchE
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE $u/55)
                                                              (VarE $v/61)
                                                            )
                                                            (case
                                                              (TagP
                                                                suspend
                                                                WildP
                                                              )
                                                              (PrimE TupPrim)
                                                            )
                                                            (case
                                                              (TagP
                                                                schedule
                                                                (VarP
                                                                  $schedule/5
                                                                )
                                                              )
                                                              (BlockE
                                                                (LetD
                                                                  (VarP $call/5)
                                                                  (SelfCallE
                                                                    ()
                                                                    (PrimE
                                                                      (ICReplyPrim
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                    (VarE
                                                                      $schedule/5
                                                                    )
                                                                    (PrimE
                                                                      (ProjPrim
                                                                        1
                                                                      )
                                                                      (VarE
                                                                        $v/61
                                                                      )
                                                                    )
                                                                    (FuncE
                                                                      $lambda
                                                                      Local
                                                                      Returns
                                                                      ()
                                                                      (PrimE
                                                                        (CallPrim
                                                                        )
                                                                        (PrimE
                                                                          (ProjPrim
                                                                            2
                                                                          )
                                                                          (VarE
                                                                            $v/61
                                                                          )
                                                                        )
                                                                        (PrimE
                                                                          TupPrim
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                (IfE
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (VarE
                                                                      @call_succeeded
                                                                    )
                                                                    (PrimE
                                                                      TupPrim
                                                                    )
                                                                  )
                                                                  (VarE $call/5)
                                                                  (PrimE
                                                                    (CallPrim)
                                                                    (PrimE
                                                                      (ProjPrim
                                                                        1
                                                                      )
                                                                      (VarE
                                                                        $v/61
                                                                      )
                                                                    )
                                                                    (PrimE
                                                                      (CallPrim)
                                                                      (VarE
                                                                        @call_error
                                                                      )
                                                                      (PrimE
                                                                        TupPrim
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                        (BlockE
                                                          (LetD
                                                            (VarP $u/56)
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE @call_error)
                                                              (PrimE TupPrim)
                                                            )
                                                          )
                                                          (BlockE
                                                            (LetD
                                                              WildP
                                                              (LitE
                                                                (IntLit 7_775)
                                                              )
                                                            )
                                                            (LetD
                                                              WildP
                                                              (PrimE
                                                                (CallPrim)
                                                                (VarE
                                                                  $$thunk/0/0
                                                                )
                                                                (PrimE TupPrim)
                                                              )
                                                            )
                                                            (PrimE
                                                              (CallPrim)
                                                              (VarE $r/6)
                                                              (VarE $u/56)
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (PrimE
          TupPrim
          (FuncE
            $lambda
            Local
            Returns
            ()
            (BlockE (LetD (VarP $v/60) (PrimE TupPrim)) (PrimE TupPrim))
          )
          (FuncE $lambda Local Returns (params $e/6) () (PrimE TupPrim))
          (VarE @cleanup)
        )
      )
    )
  )
  (LetD WildP (AssignE (VarLE $state/0) (LitE NullLit)))
  (foo foo)
  (__motoko_stable_var_info $__motoko_stable_var_info)
  (System
    (Pre (PrimE (ICStableWrite memory {}) (NewObjE Memory memory {})))
    (Post (PrimE TupPrim))
    (Heartbeat (PrimE TupPrim))
    (Timer
      (BlockE
        (LetD
          (VarP $r/0)
          (FuncE $r/0 Local Returns (params $e/0) () (PrimE TupPrim))
        )
        (BlockE
          (LetD (VarP $v/2) (VarE @timer_helper))
          (BlockE
            (LetD (VarP $u/0) (PrimE (CallPrim ()) (VarE $v/2) (PrimE TupPrim)))
            (IfE
              (PrimE (CallPrim) (VarE @call_succeeded) (PrimE TupPrim))
              (BlockE
                (LetD WildP (VarE $u/0))
                (BlockE
                  (LetD (VarP $u/1) (PrimE TupPrim))
                  (BlockE
                    (LetD (VarP $u/2) (PrimE TupPrim))
                    (BlockE (LetD (VarP $u/3) (PrimE TupPrim)) (PrimE TupPrim))
                  )
                )
              )
              (PrimE
                (CallPrim)
                (VarE $r/0)
                (PrimE (CallPrim) (VarE @call_error) (PrimE TupPrim))
              )
            )
          )
        )
      )
    )
    (Inspect (PrimE TupPrim))
  )
  actor {foo : shared () -> ()}
)
MApping Return
MApping Throw
MApping Cleanup
MApping Return
metaX
MApping Throw
metaX
MApping Cleanup
metaX
MApping Return
metaX
MApping Throw
metaX
MApping Cleanup
metaX
